/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
**
** This version of "lempar.c" is modified, slightly, for use by SQLite.
** The only modifications are the addition of a couple of NEVER()
** macros to disable tests that are needed in the case of a general
** LALR(1) grammar but which are always false in the
** specific grammar used by SQLite.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>

#include "token.h"
#include "parsercontext.h"
#include "parser_helper_stubs.h"
#include "common/utils_sql.h"
#include "common/global.h"
#include "common/unused.h"
#include "parser/ast/sqlitealtertable.h"
#include "parser/ast/sqliteanalyze.h"
#include "parser/ast/sqliteattach.h"
#include "parser/ast/sqlitebegintrans.h"
#include "parser/ast/sqlitecommittrans.h"
#include "parser/ast/sqlitecreateindex.h"
#include "parser/ast/sqlitecreatetable.h"
#include "parser/ast/sqlitecreatetrigger.h"
#include "parser/ast/sqlitecreateview.h"
#include "parser/ast/sqlitecreatevirtualtable.h"
#include "parser/ast/sqlitedelete.h"
#include "parser/ast/sqlitedetach.h"
#include "parser/ast/sqlitedropindex.h"
#include "parser/ast/sqlitedroptable.h"
#include "parser/ast/sqlitedroptrigger.h"
#include "parser/ast/sqlitedropview.h"
#include "parser/ast/sqliteemptyquery.h"
#include "parser/ast/sqliteinsert.h"
#include "parser/ast/sqlitepragma.h"
#include "parser/ast/sqlitereindex.h"
#include "parser/ast/sqliterelease.h"
#include "parser/ast/sqliterollback.h"
#include "parser/ast/sqlitesavepoint.h"
#include "parser/ast/sqliteselect.h"
#include "parser/ast/sqliteupdate.h"
#include "parser/ast/sqlitevacuum.h"
#include "parser/ast/sqliteexpr.h"
#include "parser/ast/sqlitecolumntype.h"
#include "parser/ast/sqliteconflictalgo.h"
#include "parser/ast/sqlitesortorder.h"
#include "parser/ast/sqliteindexedcolumn.h"
#include "parser/ast/sqliteforeignkey.h"
#include "parser/ast/sqlitewith.h"
#include "parser/ast/sqliteupsert.h"
#include "parser/ast/sqlitewindowdefinition.h"
#include "parser/ast/sqlitefilterover.h"
#include "parser/ast/sqlitenulls.h"
#include <QObject>
#include <QDebug>
#include <limits.h>

#define assert(X) Q_ASSERT(X)
#define UNUSED_PARAMETER(X) (void)(X)
#define DONT_INHERIT_TOKENS(X) noTokenInheritanceFields << X

/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/*
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands.
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    sqlite3_parseTOKENTYPE     is the data type used for minor tokens given
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is sqlite3_parseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    sqlite3_parseARG_SDECL     A static variable declaration for the %extra_argument
**    sqlite3_parseARG_PDECL     A parameter declaration for the %extra_argument
**    sqlite3_parseARG_STORE     Code to store %extra_argument into yypParser
**    sqlite3_parseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned short int
#define YYNOCODE 329
#define YYACTIONTYPE unsigned short int
#define YYWILDCARD 80
#define sqlite3_parseTOKENTYPE Token*
typedef union {
  int yyinit;
  sqlite3_parseTOKENTYPE yy0;
  SqliteLimit* yy4;
  SqliteWindowDefinition::Window* yy14;
  SqliteUpsert* yy16;
  ParserCteList* yy17;
  SqliteWindowDefinition::Window::Frame::RangeOrRows* yy34;
  bool* yy35;
  ParserExprNestedList* yy54;
  ParserFkConditionList* yy56;
  SqliteCreateTable::Column::Constraint* yy64;
  SqliteConflictAlgo* yy66;
  SqliteSelect* yy73;
  SqliteWindowDefinition* yy74;
  SqliteNulls* yy99;
  ParserStubTransDetails* yy100;
  SqliteExpr::LikeOp* yy104;
  SqliteCreateTable::Column* yy115;
  SqliteCreateTable::Constraint* yy166;
  SqliteExpr* yy176;
  ParserOtherSourceList* yy195;
  ParserCreateTableOptionList* yy217;
  ParserDeferSubClause* yy218;
  ParserIndexedBy* yy224;
  SqliteFilterOver::Over* yy231;
  ParserCreateTableColumnList* yy234;
  QString* yy255;
  ParserCreateTableColumnConstraintList* yy259;
  SqliteFilterOver::Filter* yy269;
  ParserStubAlias* yy280;
  ParserStubInsertOrReplace* yy281;
  SqliteWith* yy321;
  SqliteSelect::Core::JoinSource* yy335;
  QStringList* yy336;
  SqliteWindowDefinition::Window::Frame::Exclude* yy337;
  SqliteWith::CommonTableExpression* yy366;
  SqliteWith::CommonTableExpression::AsMode* yy383;
  SqliteSelect::Core::SingleSource* yy393;
  SqliteWindowDefinition::Window::Frame::Bound* yy394;
  SqliteCreateTrigger::Scope* yy403;
  SqliteCreateTrigger::Event* yy407;
  ParserResultColumnList* yy421;
  SqliteSelect::Core::JoinConstraint* yy423;
  SqliteSelect::Core* yy438;
  ParserCreateTableConstraintList* yy445;
  SqliteSelect::Core::JoinOp* yy461;
  SqliteFilterOver* yy487;
  SqliteForeignKey::Condition::Reaction* yy488;
  ParserOrderByList* yy499;
  ParserFullName* yy520;
  ParserIndexedColumnList* yy527;
  SqliteInitially* yy536;
  SqliteIndexedColumn* yy540;
  ParserTermOrLiteral* yy542;
  ParserWindowDefList* yy555;
  int* yy562;
  ParserExprList* yy567;
  ParserStubExplain* yy571;
  SqliteSelect::CompoundOperator* yy574;
  ParserQueryList* yy575;
  SqliteWindowDefinition::Window::Frame* yy585;
  SqliteForeignKey::Condition* yy587;
  SqliteColumnType* yy601;
  ParserStubCreateTableOption* yy607;
  SqliteCreateTrigger::Time* yy612;
  ParserSetValueList* yy617;
  QVariant* yy629;
  SqliteQuery* yy635;
  SqliteSortOrder* yy645;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define sqlite3_parseARG_SDECL ParserContext* parserContext;
#define sqlite3_parseARG_PDECL ,ParserContext* parserContext
#define sqlite3_parseARG_FETCH ParserContext* parserContext = yypParser->parserContext
#define sqlite3_parseARG_STORE yypParser->parserContext = parserContext
#define YYNSTATE 875
#define YYNRULE 490
#define YYFALLBACK 1
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

#define GET_CONTEXT yyParser* yypParser = pParser; sqlite3_parseARG_FETCH

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (2803)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   535,   62,   62,   62,   61,   59,  263,   27,   67,   68,
 /*    10 */   534,  283,  526,  698,  823,  823,   65,   65,   66,   66,
 /*    20 */    66,   66,  841,   64,   64,   64,   64,   63,   63,   62,
 /*    30 */    62,   62,   61,   59,  263,  469, 1238,  812,   67,   68,
 /*    40 */   534,  283,   58,  135,  823,  823,   65,   65,   66,   66,
 /*    50 */    66,   66,  531,   64,   64,   64,   64,   63,   63,   62,
 /*    60 */    62,   62,   61,   59,  263,  385, 1288,  282,  281,  800,
 /*    70 */   663,  261,   78,  813,  194,   66,   66,   66,   66,   56,
 /*    80 */    64,   64,   64,   64,   63,   63,   62,   62,   62,   61,
 /*    90 */    59,  263,  839,  867,   23,  840,   53,   54,  720,  619,
 /*   100 */   835,  800,  524,  261,   55, 1047,  838,  638,  805,  804,
 /*   110 */   535,  833,    2, 1047,  837,  836,  835,  821, 1047,  844,
 /*   120 */   756,  523,  526,  835,  864,  866,  359,  670,  464,  838,
 /*   130 */  1113,  251,  250,  249,  834,  223,  821,  837,  836,  835,
 /*   140 */   866, 1047,  756,  533,  613,   80,  867,  128,  756,  292,
 /*   150 */   867,  265,  872,  416, 1047,  436, 1047, 1047,  833,  371,
 /*   160 */  1047,  291,  531,  163,  373, 1047, 1047, 1047, 1047, 1047,
 /*   170 */  1047,  821,  866,  614,  821,  616,  811,   12,  615,  141,
 /*   180 */    82,  834,  230,  813,  624,  308,  447,  320, 1047,   56,
 /*   190 */   533,  867,  132,  866,  780,  285,  478,  370,  329,   21,
 /*   200 */   432,  332,  372,  183,  810,   72,   53,   54,  109,   89,
 /*   210 */   728,   81,  814,  127,   55, 1113,  865,  864,  488,  473,
 /*   220 */   535,  162,    2, 1113,  461,  458,  457,  821, 1113,  729,
 /*   230 */   286,  523,  526,  835,  864,  345,  517,  814,  783,  838,
 /*   240 */   565,  386,  456,  527,  728,  369,  821,  837,  836,  835,
 /*   250 */   374, 1113,  181,  344,  866, 1064, 1064,  116,   72,   74,
 /*   260 */   566,  567,  113,  728, 1113,  391, 1113, 1113,  287,  865,
 /*   270 */   864,  814,  531,  865,  864, 1113, 1113, 1113, 1113,  686,
 /*   280 */  1113,  821,  729,  676,  821,   73,  811,   12,  411,  808,
 /*   290 */   807,  387,  867,  813,  505,  751,    4,  728, 1113,   56,
 /*   300 */    64,   64,   64,   64,   63,   63,   62,   62,   62,   61,
 /*   310 */    59,  263,  348,  465,  865,  864,   53,   54,   61,   59,
 /*   320 */   263,  631,  833,  107,   55, 1098,  358,  820,  417,  675,
 /*   330 */   474,  264,    2, 1098,  568,  803,  866,  821, 1098,  826,
 /*   340 */   866,  523,  826,  835,  864,  834,  230,  502,  477,  838,
 /*   350 */   714,  713,  822,  507,  533,  662,  821,  837,  836,  835,
 /*   360 */   368, 1098,  820,  863,  803,  648,   92,  866,  122,  866,
 /*   370 */   861,  677,  678,  503, 1098,  833, 1098, 1098,  833,  862,
 /*   380 */  1203, 1203,  488,  475,  142, 1098,  507, 1098, 1098,  866,
 /*   390 */  1098,  821,  866,  776,  821,  763,  811,   12,  834,  201,
 /*   400 */   866,  834,  215,  775,    1,  386,  177,  533, 1098,  832,
 /*   410 */   533,  709,  709,  867, 1208,  865,  864,  794,  403,   67,
 /*   420 */    68,  534,  283, 1203, 1203,  823,  823,   65,   65,   66,
 /*   430 */    66,   66,   66,  826,   64,   64,   64,   64,   63,   63,
 /*   440 */    62,   62,   62,   61,   59,  263,   63,   63,   62,   62,
 /*   450 */    62,   61,   59,  263,   39,  143,  172,  163,  780,  435,
 /*   460 */   510,  780,  826, 1203, 1203,  826,  508,  773,  254,   67,
 /*   470 */    68,  534,  283,   69,  825,  823,  823,   65,   65,   66,
 /*   480 */    66,   66,   66,   91,   64,   64,   64,   64,   63,   63,
 /*   490 */    62,   62,   62,   61,   59,  263,  501,  453,  764,  758,
 /*   500 */   772,  739,   67,   68,  534,  283, 1203, 1203,  823,  823,
 /*   510 */    65,   65,   66,   66,   66,   66,  593,   64,   64,   64,
 /*   520 */    64,   63,   63,   62,   62,   62,   61,   59,  263,  793,
 /*   530 */   349,  590,  786,  867,  565,  814,  865,  864,  607,  608,
 /*   540 */   429,  792,  176,   45,  866,    8,   57,  172,  866,  733,
 /*   550 */   392,   14,  377, 1315,  566,  418,  826,  867, 1315,  391,
 /*   560 */   814, 1203, 1203,   81,  732,  339,  693,  376,  592,  817,
 /*   570 */  1208,  520, 1208,   66,   66,   66,   66,   40,   64,   64,
 /*   580 */    64,   64,   63,   63,   62,   62,   62,   61,   59,  263,
 /*   590 */   692,  867,  739,  296,  814,  276,  300, 1209,  590,  611,
 /*   600 */    67,   68,  534,  283, 1203, 1203,  823,  823,   65,   65,
 /*   610 */    66,   66,   66,   66,  756,   64,   64,   64,   64,   63,
 /*   620 */    63,   62,   62,   62,   61,   59,  263,  141,  419,  803,
 /*   630 */   689,  421,  497,  867,  376,  591,  756,  662,  426,  867,
 /*   640 */   302,  866,  756, 1203, 1203,  866,  688,  546,   92,  589,
 /*   650 */   589,  866,   67,   68,  534,  283,  865,  864,  823,  823,
 /*   660 */    65,   65,   66,   66,   66,   66,  816,   64,   64,   64,
 /*   670 */    64,   63,   63,   62,   62,   62,   61,   59,  263,  815,
 /*   680 */   865,  864,   67,   68,  534,  283, 1203, 1203,  823,  823,
 /*   690 */    65,   65,   66,   66,   66,   66,  197,   64,   64,   64,
 /*   700 */    64,   63,   63,   62,   62,   62,   61,   59,  263,  769,
 /*   710 */   298,  848,  809,  661,  865,  864,  662, 1274,  162,  415,
 /*   720 */   851,  461,  458,  457,  848,  866,  845,   92,  819,   42,
 /*   730 */   866,  536,  769,  846, 1366,  190,  540,    3,  866,  456,
 /*   740 */   118,  795,  472,  751,    4,  727,  116,  867,  496,  492,
 /*   750 */   603,  167,  272, 1209,  649, 1209,  865,  864,   67,   68,
 /*   760 */   534,  283,  865,  864,  823,  823,   65,   65,   66,   66,
 /*   770 */    66,   66,  798,   64,   64,   64,   64,   63,   63,   62,
 /*   780 */    62,   62,   61,   59,  263,   67,   68,  534,  283,  726,
 /*   790 */   722,  823,  823,   65,   65,   66,   66,   66,   66,  873,
 /*   800 */    64,   64,   64,   64,   63,   63,   62,   62,   62,   61,
 /*   810 */    59,  263,  535, 1274,  349,  867,  359,  603,  839,  349,
 /*   820 */   462,  840,  826,  602,  526,  805,  804,  487,  866,  423,
 /*   830 */   866,  593,  867,  866,  826,   67,   68,  534,  283,  353,
 /*   840 */   826,  823,  823,   65,   65,   66,   66,   66,   66,  826,
 /*   850 */    64,   64,   64,   64,   63,   63,   62,   62,   62,   61,
 /*   860 */    59,  263,  826,  833,  531,  122,  849,  377, 1314,  405,
 /*   870 */   865,  864,  119, 1314,  352,  833,  358,  866,  749,  381,
 /*   880 */   797,   81,  793,  486,  381,  813,  834,  215,  697,  866,
 /*   890 */   866,   56,  597,  259,  792,  533,  708,  256,  834,  123,
 /*   900 */   255,  712,  638,  476,  970,  747,  785,  533,   53,   54,
 /*   910 */   173,  246,  245,   58,  740,  410,   55,  179,  126,  346,
 /*   920 */   467,  341,  466,  164,    2, 1215,  521,   71,  783,  821,
 /*   930 */   347,  704,  256,  523,   90,  835,  864,  339,  835,  613,
 /*   940 */    80,  838, 1223,  702,  838,  826,  780,  509,  821,  837,
 /*   950 */   836,  835,  837,  836,  835,  865,  864,  826,  780,  867,
 /*   960 */   510,  721, 1210,  826, 1323, 1323,  842,  787,  614,  789,
 /*   970 */   616,  784,  826,  615,  799,  668,  172,  347,  704,  196,
 /*   980 */   294,  351,  256,  821,  758,  826,  821,  781,  811,   12,
 /*   990 */    67,   68,  534,  283,  866,  433,  823,  823,   65,   65,
 /*  1000 */    66,   66,   66,   66, 1212,   64,   64,   64,   64,   63,
 /*  1010 */    63,   62,   62,   62,   61,   59,  263,   67,   68,  534,
 /*  1020 */   283,  739,  779,  823,  823,   65,   65,   66,   66,   66,
 /*  1030 */    66,  512,   64,   64,   64,   64,   63,   63,   62,   62,
 /*  1040 */    62,   61,   59,  263,   67,   68,  534,  283,   47,  756,
 /*  1050 */   823,  823,   65,   65,   66,   66,   66,   66,  359,   64,
 /*  1060 */    64,   64,   64,   63,   63,   62,   62,   62,   61,   59,
 /*  1070 */   263,  756,  866,  571,   46,  644,  644,  756,   67,   68,
 /*  1080 */   534,  283,  865,  864,  823,  823,   65,   65,   66,   66,
 /*  1090 */    66,   66,   51,   64,   64,   64,   64,   63,   63,   62,
 /*  1100 */    62,   62,   61,   59,  263,  394,  247,  513,  867,   67,
 /*  1110 */    68,  534,  283,  750,  703,  823,  823,   65,   65,   66,
 /*  1120 */    66,   66,   66,  442,   64,   64,   64,   64,   63,   63,
 /*  1130 */    62,   62,   62,   61,   59,  263,   44,  866,  867,   20,
 /*  1140 */   867,   67,   68,  534,  283,  701,   48,  823,  823,   65,
 /*  1150 */    65,   66,   66,   66,   66,   79,   64,   64,   64,   64,
 /*  1160 */    63,   63,   62,   62,   62,   61,   59,  263,  255,  712,
 /*  1170 */   796,  476,   67,   68,  534,  283,   44,  684,  823,  823,
 /*  1180 */    65,   65,   66,   66,   66,   66,  511,   64,   64,   64,
 /*  1190 */    64,   63,   63,   62,   62,   62,   61,   59,  263,  117,
 /*  1200 */   268,  440,  867,   67,   68,  534,  283,  867,  195,  823,
 /*  1210 */   823,   65,   65,   66,   66,   66,   66,   77,   64,   64,
 /*  1220 */    64,   64,   63,   63,   62,   62,   62,   61,   59,  263,
 /*  1230 */   506,  865,  864,  716,   67,   68,  534,  283,   58,  336,
 /*  1240 */   823,  823,   65,   65,   66,   66,   66,   66,  867,   64,
 /*  1250 */    64,   64,   64,   63,   63,   62,   62,   62,   61,   59,
 /*  1260 */   263,  865,  864,  865,  864,  771,   67,   68,  534,  283,
 /*  1270 */   725,   28,  823,  823,   65,   65,   66,   66,   66,   66,
 /*  1280 */   740,   64,   64,   64,   64,   63,   63,   62,   62,   62,
 /*  1290 */    61,   59,  263,   19, 1289,   67,   68,  534,  283,  741,
 /*  1300 */   724,  823,  823,   65,   65,   66,   66,   66,   66,  868,
 /*  1310 */    64,   64,   64,   64,   63,   63,   62,   62,   62,   61,
 /*  1320 */    59,  263,  535, 1287,  337,  865,  864,  734,  454,  116,
 /*  1330 */   865,  864,  652,  116,  526,  682,  766,  499,   67,   68,
 /*  1340 */   534,  283,  653,  830,  823,  823,   65,   65,   66,   66,
 /*  1350 */    66,   66,  135,   64,   64,   64,   64,   63,   63,   62,
 /*  1360 */    62,   62,   61,   59,  263,  833,  667,  666,  535,  491,
 /*  1370 */   871,  865,  864,  514,  531,  539,   52,  333,   50,  866,
 /*  1380 */   526,  413,  544,  499,  671,  833,  638,  498,  834,  230,
 /*  1390 */   867,  866,  744,  358,   79,  813,  866,  533,  833,  866,
 /*  1400 */   765,   56,  744,    6,  867,  605,  866,  866,  834,  230,
 /*  1410 */   606,  122,  866,  875,  490,   81,  866,  533,   53,   54,
 /*  1420 */   531,  834,  123,  575,   80,  412,   55,  284,    5,  867,
 /*  1430 */   533,  443,  271,  498,    2,  442,  173,   22,  427,  821,
 /*  1440 */   760,  813,  415,  523,  522,  835,  864,   56,  386,  866,
 /*  1450 */   535,  838,  574,  867,  573,  833,  446,  572,  821,  837,
 /*  1460 */   836,  835,  526,  407,   53,   54,   22,  867,  515,  866,
 /*  1470 */   175,  356,   55,  400,  434,  867,  759,  867,  834,  230,
 /*  1480 */     2,  780,  122,  542,  787,  821,  833,  533,  867,  523,
 /*  1490 */   867,  835,  864,  821,  867,  518,  821,  838,  811,   12,
 /*  1500 */   866,  362,  531,  355,  821,  837,  836,  835,  756,  834,
 /*  1510 */   123,  833,  266,  865,  864,  488,  489,  647,  533,   81,
 /*  1520 */   115,  550,  873,  813,  757,  866,  504,  865,  864,   56,
 /*  1530 */   756,   18,  991,  122,  834,  123,  756,  650,  386,  821,
 /*  1540 */   550,  867,  821,  533,  811,   12,   53,   54,   17,  618,
 /*  1550 */   867,  441,  865,  864,   55,  122,  173,  695,  174,  694,
 /*  1560 */   856,  745,    2,  282,  281,  556,   16,  821,  550,  780,
 /*  1570 */   867,  523,   11,  835,  864,   58,  865,  864,  867,  838,
 /*  1580 */   525,  808,  807,  397,  171,  642,  821,  837,  836,  835,
 /*  1590 */   865,  864,  598,  556,  780,  562,   81,  867,  865,  864,
 /*  1600 */   865,  864, 1323, 1323,  805,  804,   76,  535,  564,  735,
 /*  1610 */   563,  865,  864,  865,  864,  874,    3,  865,  864,  526,
 /*  1620 */   180,  821,  499,  122,  821,  867,  811,   12,   67,   38,
 /*  1630 */   534,  283, 1259,  170,  823,  823,   65,   65,   66,   66,
 /*  1640 */    66,   66,  495,   64,   64,   64,   64,   63,   63,   62,
 /*  1650 */    62,   62,   61,   59,  263,  833,  803,  598,  553,  531,
 /*  1660 */   634,  788,  694,  529,  865,  864,  867,  330,  833,  866,
 /*  1670 */   847,  331,  500,  865,  864,  833,  554,  553,  834,  230,
 /*  1680 */   813,  866,  866,  285,  478,  310,   56,  533,  723,  866,
 /*  1690 */    44,  834,  123,  865,  864,  559,  744,  867,  834,  230,
 /*  1700 */   533,  865,  864,   53,   54,  553,  552,  533,  744,  112,
 /*  1710 */   866,   55,  305,  595,  169,  488,  479,   44,  378,    2,
 /*  1720 */   865,  864,  866,  168,  821,  740,  312,  358,  523,  129,
 /*  1730 */   835,  864,  439,  833,  552,  493,  838,  173,  386,  833,
 /*  1740 */   395,  866,  640,  821,  837,  836,  835,  866,  865,  864,
 /*  1750 */   867,  780,  867,  866,  770,    4,  834,  215,  386,  755,
 /*  1760 */     4,  559,  834,  211,  122,  533,  402,  399,  630,  754,
 /*  1770 */     4,  533,  731,  867,  471,  640,  867,  482,  821,  267,
 /*  1780 */   718,  821,  782,  811,   12,  744,   68,  534,  283,  865,
 /*  1790 */   864,  823,  823,   65,   65,   66,   66,   66,   66,  866,
 /*  1800 */    64,   64,   64,   64,   63,   63,   62,   62,   62,   61,
 /*  1810 */    59,  263,  535,  740,  579,    7,  780,  717,  787,   81,
 /*  1820 */   865,  864,  780,  740,  526,  325,  711,  534,  283,  270,
 /*  1830 */   480,  823,  823,   65,   65,   66,   66,   66,   66,  866,
 /*  1840 */    64,   64,   64,   64,   63,   63,   62,   62,   62,   61,
 /*  1850 */    59,  263,  867,  350,  761,  833,  428,  833,  867,  854,
 /*  1860 */   730,  579,   72, 1057,  531,   15,  715,  728,  358,  866,
 /*  1870 */   275,  866,  867,  865,  864,  865,  864,  710,  834,  230,
 /*  1880 */   834,  230,  866,  121,  867,  813,  729,  533,  165,  533,
 /*  1890 */   576,   56,  706,  635,  752,    4,  865,  864,   37,  865,
 /*  1900 */   864,  728, 1323, 1323,  869,  857,   87,  401,   53,   54,
 /*  1910 */   753,    4,  635,  855,  535,  278,   55,  277,  866,  866,
 /*  1920 */   833,  867,  470,  833,    2,  683,  526,  866,  120,  821,
 /*  1930 */   138,  853,  274,  523,  866,  835,  864,  866,  386,  833,
 /*  1940 */   386,  838,  867,  834,  230,  866,  834,  233,  821,  837,
 /*  1950 */   836,  835,  533,  866,  256,  533,  719,   25,  576,  787,
 /*  1960 */   319,  674,  834,  231,  269,  463,  531,   36,  782,  665,
 /*  1970 */   850,  533,  460,  558,  866,  865,  864,   86,   85,  852,
 /*  1980 */   406,  865,  864,  821,  866,  843,  821,  813,  811,   12,
 /*  1990 */   831,  833,   24,   56,  820,  865,  864,  455,  867,  866,
 /*  2000 */   867,  629,  338,  386,  866,  866,  780,  865,  864,   84,
 /*  2010 */    53,   54,  867,  451,  834,  241,  535,  344,   55,  867,
 /*  2020 */   629,  161,  780,  533,  643,  818,    2,  335,  526,  820,
 /*  2030 */    10,  821,  833,  528,  193,  523,  157,  835,  864,  866,
 /*  2040 */   750,  105,  867,  838,  865,  864,  866,  866,  833,  867,
 /*  2050 */   821,  837,  836,  835,  867,  834,  240,  651,  103,  582,
 /*  2060 */    35,  746,  866,   34,  533,  865,  864,  742,  531,   33,
 /*  2070 */    32,  834,  242,  833,  780,  866,  102,  867,  833,  867,
 /*  2080 */   533,  866,  867, 1206,  833,  821,  398,  866,  821,  813,
 /*  2090 */   811,   12,  866,  582,  396,   56,  834,  243,  866,  101,
 /*  2100 */   867,  834,  262,  867,  623,  533,  617,  834,  361,  309,
 /*  2110 */   533,  612,   53,   54,  430,  780,  533,  610,  535,  307,
 /*  2120 */    55,  865,  864,  865,  864,  867,  173,  833,    2,  621,
 /*  2130 */   526,  780,  110,  821,  658,  865,  864,  523,  604,  835,
 /*  2140 */   864,  866,  865,  864,  152,  838,  867,   13,  621,  304,
 /*  2150 */   834,  239,  821,  837,  836,  835,  780,  833,  646,  533,
 /*  2160 */   737,  780,  736,  867,  680,  865,  864,  780,  166,  198,
 /*  2170 */   531,  866,  865,  864,  866,  187,  585,  865,  864,   96,
 /*  2180 */   834,  360,  866,  561,  833,  867,  560,  821,  414,  533,
 /*  2190 */   821,  813,  811,   12, 1213,  596,  144,   56,  866,  641,
 /*  2200 */   865,  864,  865,  864,  867,  865,  864,  834,  210,  541,
 /*  2210 */   780,   94,  256,  609,   53,   54,  533,  252,  637,  485,
 /*  2220 */   535,  273,   55,  865,  864,  114,  865,  864,  870,  248,
 /*  2230 */     2, 1215,  526,  866,  185,  821,  833,  860,  639,  523,
 /*  2240 */   780,  835,  864,  867,  390,  389,  859,  838,  865,  864,
 /*  2250 */   866,  583,  833,  867,  821,  837,  836,  835,  867,  834,
 /*  2260 */   228,  633,  538,  586,  108,  705,  866,  780,  533,  865,
 /*  2270 */   864,  184,  531,  858,  537,  834,  232,   75, 1217,  866,
 /*  2280 */   182,  452,  586,  829,  533,  601,  865,  864,  833,  821,
 /*  2290 */   178,  833,  821,  813,  811,   12,  340,  867,  828,   56,
 /*  2300 */  1217,  285,  866,  364,  681,  866, 1217,  867,  865,  864,
 /*  2310 */   866,  834,  384,   23,  834,  383,   53,   54,  866,  780,
 /*  2320 */   533,  628,  833,  533,   55,  867,  494,  865,  864,  363,
 /*  2330 */   263,  192,    2,  659,   43,  780,  866,  821,  827,   70,
 /*  2340 */   599,  523,  357,  835,  864,  834,  382,  866,  578,  838,
 /*  2350 */   334,   88, 1217,  867,  533,  833,  821,  837,  836,  835,
 /*  2360 */  1217,  833,  519,  260,  866, 1217,  865,  864,  409,  866,
 /*  2370 */   279,  780,  867,   49,  780,  866,  865,  864,  834,  227,
 /*  2380 */   354,  865,  864,  510,  834,  213,  867,  533, 1217,  587,
 /*  2390 */   280,  821,  778,  533,  821,  833,  811,   12,  777,  327,
 /*  2400 */   408, 1217,  833, 1217, 1217,  780,  768,  581,  424,  866,
 /*  2410 */   548,  774, 1217,  866, 1217, 1217,  866, 1217,  834,  226,
 /*  2420 */   865,  864,  866,  547,  866,  834,  225,  533,  253,  762,
 /*  2430 */   865,  864,  140,  549,  533, 1217,  833,  139,  780,  833,
 /*  2440 */   367,  569,  543,  833,  780,  707,  481,  478,  865,  864,
 /*  2450 */   866,  314,  165,  866,  866,  313,  833,  866,  833,  834,
 /*  2460 */   212,  543,  834,  238,  468,  866,  834,  237,  533,  532,
 /*  2470 */   866,  533,  866,  328,  696,  533,  865,  864,  780,  834,
 /*  2480 */   209,  834,  124,  866,  404,  780,  444,  866,  533,  301,
 /*  2490 */   533,  306,  833,  588,  687,  865,  864,  833,  299,  303,
 /*  2500 */   866,  691,  584,  866,  833,  866,  866,  690,  661,  865,
 /*  2510 */   864,  866,  866,  866,  686,  834,  208,  664,  866,  780,
 /*  2520 */   834,  206,  780,  833,  533,   30,  780,  834,  234,  533,
 /*  2530 */   342,  380,  685,  657,  656,  655,  533,  866,  654,  780,
 /*  2540 */   833,  780,  379,  743,  297,  833,  834,  236,  580,  645,
 /*  2550 */   160,  106,  159,  295,  866,  533,  293,  577,  866,  866,
 /*  2560 */   833,  450,  833,  834,  229,  833,  137,  866,  834,  235,
 /*  2570 */   866,  258,  533,  158,  866,  780,  866,  533,  431,  866,
 /*  2580 */   780,  326,  289,  834,  224,  834,  221,  780,  834,  205,
 /*  2590 */   290,   31,  533,  448,  533,  833,  866,  533,  833,  288,
 /*  2600 */   156,  833,  322,  388,  866,  323,  780,  321,  199,  866,
 /*  2610 */   104,  136,  866,  866,  155,  866,  636,  316,  834,  204,
 /*  2620 */   317,  834,  203,  780,  834,  202,  315,  533,  780,  154,
 /*  2630 */   533,  111,  632,  533,  438,  311,  626,  191,  833,  622,
 /*  2640 */   833,  437,  833,  780,  620,  780,  134,  425,  780,  133,
 /*  2650 */   153,  600,  866,  422,  866,  151,  866,  100,  420,  150,
 /*  2660 */    99,  834,  214,  834,  219,  834,  218,  149,   98,  148,
 /*  2670 */   533,  833,  533,   97,  533,  833,  147,   30,  780,  570,
 /*  2680 */   393,  780,  833,  146,  780,  866,  833,  557,  555,  866,
 /*  2690 */    29,   26,  131,  130,  834,  125,  866,  551,  834,  217,
 /*  2700 */   866,  145,  545,  533,   83,  834,  216,  533,  833,  834,
 /*  2710 */   222,  186,  200,  365,  533,  833,   60,  806,  533,  833,
 /*  2720 */   802,  780,  866,  780,  189,  780,  791,  516,  738,  866,
 /*  2730 */   188,  834,  220,  866,  748,  343,  682,  459,  834,  207,
 /*  2740 */   533,  318,  834,   93,  244,  627,  324,  533,  445,  625,
 /*  2750 */   375,  484,    9,  824,  780,  257,  801,  790,  780,  449,
 /*  2760 */   669,  366,   41,  530,   95,  780,  767,  660,  700,  780,
 /*  2770 */   679,   81,  673,  594,  867, 1367,  672,  699, 1367, 1367,
 /*  2780 */  1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
 /*  2790 */  1367,  780, 1367, 1367, 1367, 1367, 1367, 1367,  780, 1367,
 /*  2800 */  1367, 1367,  780,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     4,  102,  103,  104,  105,  106,  107,   50,   81,   82,
 /*    10 */    83,   84,   16,  217,   87,   88,   89,   90,   91,   92,
 /*    20 */    93,   94,  226,   96,   97,   98,   99,  100,  101,  102,
 /*    30 */   103,  104,  105,  106,  107,  102,  109,  117,   81,   82,
 /*    40 */    83,   84,  122,  122,   87,   88,   89,   90,   91,   92,
 /*    50 */    93,   94,   56,   96,   97,   98,   99,  100,  101,  102,
 /*    60 */   103,  104,  105,  106,  107,  215,  109,  100,  101,  219,
 /*    70 */   220,  221,  116,   77,  118,   91,   92,   93,   94,   83,
 /*    80 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*    90 */   106,  107,  159,    4,  173,  162,  100,  101,  102,   60,
 /*   100 */   127,  219,  220,  221,  108,  109,  133,  211,  141,  142,
 /*   110 */     4,  203,  116,  117,  141,  142,  143,  121,  122,  225,
 /*   120 */    35,  125,   16,  127,  128,  217,  203,  233,  234,  133,
 /*   130 */    24,  146,  147,  148,  226,  227,  140,  141,  142,  143,
 /*   140 */   217,  145,   57,  235,  248,  249,    4,    9,   63,   11,
 /*   150 */     4,   13,  109,   76,  158,  148,  160,  161,  203,  113,
 /*   160 */   164,   23,   56,   43,   26,  169,  170,  171,  172,  173,
 /*   170 */   174,  175,  217,  277,  178,  279,  180,  181,  282,  203,
 /*   180 */   117,  226,  227,   77,  177,  146,  147,  148,  192,   83,
 /*   190 */   235,    4,   54,  217,  286,  156,  157,   59,   68,  303,
 /*   200 */   304,   71,   64,   65,  117,  116,  100,  101,   70,  122,
 /*   210 */   121,   73,    5,   75,  108,  109,  127,  128,  263,  264,
 /*   220 */     4,  131,  116,  117,  134,  135,  136,  121,  122,  140,
 /*   230 */   153,  125,   16,  127,  128,  133,  313,   30,  315,  133,
 /*   240 */   203,  286,  152,   36,  155,  115,  140,  141,  142,  143,
 /*   250 */   112,  145,  114,  151,  217,  166,  167,  122,  116,   90,
 /*   260 */   223,  224,  116,  121,  158,  145,  160,  161,  191,  127,
 /*   270 */   128,   64,   56,  127,  128,  169,  170,  171,  172,  144,
 /*   280 */   174,  175,  140,   15,  178,  116,  180,  181,  222,  223,
 /*   290 */   224,  153,    4,   77,  318,  319,  320,  155,  192,   83,
 /*   300 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*   310 */   106,  107,  122,   45,  127,  128,  100,  101,  105,  106,
 /*   320 */   107,  175,  203,  122,  108,  109,  203,  140,  190,   61,
 /*   330 */   211,  116,  116,  117,  297,  298,  217,  121,  122,    4,
 /*   340 */   217,  125,    4,  127,  128,  226,  227,   19,  158,  133,
 /*   350 */   160,  161,  133,  203,  235,  203,  140,  141,  142,  143,
 /*   360 */   208,  145,  175,   21,  298,  213,  214,  217,  249,  217,
 /*   370 */    28,  132,  133,   45,  158,  203,  160,  161,  203,   37,
 /*   380 */    42,   43,  263,  264,  119,  169,  203,  171,  172,  217,
 /*   390 */   174,  175,  217,   31,  178,   67,  180,  181,  226,  227,
 /*   400 */   217,  226,  227,   41,  116,  286,  119,  235,  192,  121,
 /*   410 */   235,   42,   43,    4,   26,  127,  128,  294,  150,   81,
 /*   420 */    82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
 /*   430 */    92,   93,   94,    4,   96,   97,   98,   99,  100,  101,
 /*   440 */   102,  103,  104,  105,  106,  107,  100,  101,  102,  103,
 /*   450 */   104,  105,  106,  107,   85,   86,  118,   43,  286,   24,
 /*   460 */   169,  286,  127,   42,   43,  127,  316,  317,  116,   81,
 /*   470 */    82,   83,   84,   52,  139,   87,   88,   89,   90,   91,
 /*   480 */    92,   93,   94,  192,   96,   97,   98,   99,  100,  101,
 /*   490 */   102,  103,  104,  105,  106,  107,  321,   83,  170,  324,
 /*   500 */   317,  163,   81,   82,   83,   84,   85,   86,   87,   88,
 /*   510 */    89,   90,   91,   92,   93,   94,   80,   96,   97,   98,
 /*   520 */    99,  100,  101,  102,  103,  104,  105,  106,  107,   10,
 /*   530 */   203,   80,   44,    4,  203,    5,  127,  128,  146,  147,
 /*   540 */   148,   22,  122,  122,  217,  116,  116,  118,  217,  140,
 /*   550 */   205,  116,  116,  117,  223,  224,  127,    4,  122,  145,
 /*   560 */    30,   42,   43,   73,  155,  151,   36,  116,  117,  117,
 /*   570 */   182,   83,  184,   91,   92,   93,   94,   95,   96,   97,
 /*   580 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   590 */    60,    4,  163,   68,   64,  268,   71,   26,   80,  109,
 /*   600 */    81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
 /*   610 */    91,   92,   93,   94,   35,   96,   97,   98,   99,  100,
 /*   620 */   101,  102,  103,  104,  105,  106,  107,  203,  297,  298,
 /*   630 */    21,  203,   53,    4,  116,  117,   57,  203,  293,    4,
 /*   640 */   115,  217,   63,   42,   43,  217,   37,  213,  214,  120,
 /*   650 */   121,  217,   81,   82,   83,   84,  127,  128,   87,   88,
 /*   660 */    89,   90,   91,   92,   93,   94,  117,   96,   97,   98,
 /*   670 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  117,
 /*   680 */   127,  128,   81,   82,   83,   84,   85,   86,   87,   88,
 /*   690 */    89,   90,   91,   92,   93,   94,  116,   96,   97,   98,
 /*   700 */    99,  100,  101,  102,  103,  104,  105,  106,  107,   32,
 /*   710 */   185,  203,  117,  126,  127,  128,  203,   13,  131,   29,
 /*   720 */   212,  134,  135,  136,  203,  217,  213,  214,  175,  145,
 /*   730 */   217,  210,   55,  212,  196,  197,  198,  199,  217,  152,
 /*   740 */   122,  117,  318,  319,  320,  122,  122,    4,  169,  165,
 /*   750 */   121,  128,  239,  182,  241,  184,  127,  128,   81,   82,
 /*   760 */    83,   84,  127,  128,   87,   88,   89,   90,   91,   92,
 /*   770 */    93,   94,  117,   96,   97,   98,   99,  100,  101,  102,
 /*   780 */   103,  104,  105,  106,  107,   81,   82,   83,   84,  166,
 /*   790 */   167,   87,   88,   89,   90,   91,   92,   93,   94,  109,
 /*   800 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*   810 */   106,  107,    4,  109,  203,    4,  203,  188,  159,  203,
 /*   820 */    34,  162,    4,   66,   16,  141,  142,  211,  217,   72,
 /*   830 */   217,   80,    4,  217,    4,   81,   82,   83,   84,  229,
 /*   840 */     4,   87,   88,   89,   90,   91,   92,   93,   94,    4,
 /*   850 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*   860 */   106,  107,    4,  203,   56,  249,  123,  116,  117,   83,
 /*   870 */   127,  128,  118,  122,  229,  203,  203,  217,  267,  268,
 /*   880 */   117,   73,   10,  267,  268,   77,  226,  227,   77,  217,
 /*   890 */   217,   83,  135,  107,   22,  235,  292,  287,  226,  227,
 /*   900 */   250,  251,  211,  253,  118,  117,   44,  235,  100,  101,
 /*   910 */   122,  100,  101,  122,  219,  242,  108,  131,  132,  133,
 /*   920 */   134,  135,  136,  137,  116,  117,  313,  116,  315,  121,
 /*   930 */   326,  327,  287,  125,  116,  127,  128,  151,  127,  248,
 /*   940 */   249,  133,  185,  292,  133,  127,  286,  275,  140,  141,
 /*   950 */   142,  143,  141,  142,  143,  127,  128,  127,  286,    4,
 /*   960 */   169,  266,   26,  127,  156,  157,  138,  294,  277,  139,
 /*   970 */   279,  117,  127,  282,  129,  139,  118,  326,  327,  116,
 /*   980 */   203,  321,  287,  175,  324,  127,  178,   26,  180,  181,
 /*   990 */    81,   82,   83,   84,  217,  304,   87,   88,   89,   90,
 /*  1000 */    91,   92,   93,   94,  182,   96,   97,   98,   99,  100,
 /*  1010 */   101,  102,  103,  104,  105,  106,  107,   81,   82,   83,
 /*  1020 */    84,  163,  117,   87,   88,   89,   90,   91,   92,   93,
 /*  1030 */    94,  162,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  1040 */   104,  105,  106,  107,   81,   82,   83,   84,  164,   35,
 /*  1050 */    87,   88,   89,   90,   91,   92,   93,   94,  203,   96,
 /*  1060 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1070 */   107,   57,  217,  296,  164,  120,  121,   63,   81,   82,
 /*  1080 */    83,   84,  127,  128,   87,   88,   89,   90,   91,   92,
 /*  1090 */    93,   94,  183,   96,   97,   98,   99,  100,  101,  102,
 /*  1100 */   103,  104,  105,  106,  107,  309,  310,   83,    4,   81,
 /*  1110 */    82,   83,   84,  122,  117,   87,   88,   89,   90,   91,
 /*  1120 */    92,   93,   94,  203,   96,   97,   98,   99,  100,  101,
 /*  1130 */   102,  103,  104,  105,  106,  107,  122,  217,    4,   14,
 /*  1140 */     4,   81,   82,   83,   84,  117,  183,   87,   88,   89,
 /*  1150 */    90,   91,   92,   93,   94,  164,   96,   97,   98,   99,
 /*  1160 */   100,  101,  102,  103,  104,  105,  106,  107,  250,  251,
 /*  1170 */   315,  253,   81,   82,   83,   84,  122,  117,   87,   88,
 /*  1180 */    89,   90,   91,   92,   93,   94,  162,   96,   97,   98,
 /*  1190 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  122,
 /*  1200 */   280,  283,    4,   81,   82,   83,   84,    4,  117,   87,
 /*  1210 */    88,   89,   90,   91,   92,   93,   94,  116,   96,   97,
 /*  1220 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  1230 */   118,  127,  128,  117,   81,   82,   83,   84,  122,  117,
 /*  1240 */    87,   88,   89,   90,   91,   92,   93,   94,    4,   96,
 /*  1250 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1260 */   107,  127,  128,  127,  128,  117,   81,   82,   83,   84,
 /*  1270 */   166,  118,   87,   88,   89,   90,   91,   92,   93,   94,
 /*  1280 */   219,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  1290 */   105,  106,  107,   14,  109,   81,   82,   83,   84,  163,
 /*  1300 */   166,   87,   88,   89,   90,   91,   92,   93,   94,  111,
 /*  1310 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1320 */   106,  107,    4,  109,  117,  127,  128,  266,  117,  122,
 /*  1330 */   127,  128,  233,  122,   16,  236,   47,   19,   81,   82,
 /*  1340 */    83,   84,  243,  140,   87,   88,   89,   90,   91,   92,
 /*  1350 */    93,   94,  122,   96,   97,   98,   99,  100,  101,  102,
 /*  1360 */   103,  104,  105,  106,  107,  203,  217,  218,    4,   38,
 /*  1370 */   195,  127,  128,  211,   56,  200,  182,  203,  184,  217,
 /*  1380 */    16,  207,  203,   19,  140,  203,  211,   69,  226,  227,
 /*  1390 */     4,  217,  203,  203,  164,   77,  217,  235,  203,  217,
 /*  1400 */    62,   83,  203,   85,    4,    7,  217,  217,  226,  227,
 /*  1410 */    12,  249,  217,    0,   83,   73,  217,  235,  100,  101,
 /*  1420 */    56,  226,  227,  248,  249,  263,  108,  255,   82,    4,
 /*  1430 */   235,  117,  242,   69,  116,  203,  122,  265,   40,  121,
 /*  1440 */    32,   77,   29,  125,  211,  127,  128,   83,  286,  217,
 /*  1450 */     4,  133,  277,    4,  279,  203,  255,  282,  140,  141,
 /*  1460 */   142,  143,   16,  274,  100,  101,  265,    4,  286,  217,
 /*  1470 */   275,  289,  108,  274,  132,    4,   62,    4,  226,  227,
 /*  1480 */   116,  286,  249,  308,  294,  121,  203,  235,    4,  125,
 /*  1490 */     4,  127,  128,  175,    4,  211,  178,  133,  180,  181,
 /*  1500 */   217,  260,   56,  262,  140,  141,  142,  143,   35,  226,
 /*  1510 */   227,  203,  280,  127,  128,  263,  264,  211,  235,   73,
 /*  1520 */   116,  121,  109,   77,   55,  217,   53,  127,  128,   83,
 /*  1530 */    57,   14,  117,  249,  226,  227,   63,  122,  286,  175,
 /*  1540 */   140,    4,  178,  235,  180,  181,  100,  101,   14,   26,
 /*  1550 */     4,  117,  127,  128,  108,  249,  122,  244,  275,  246,
 /*  1560 */   111,  175,  116,  100,  101,  140,   14,  121,  168,  286,
 /*  1570 */     4,  125,   14,  127,  128,  122,  127,  128,    4,  133,
 /*  1580 */   222,  223,  224,  275,   14,  211,  140,  141,  142,  143,
 /*  1590 */   127,  128,  121,  168,  286,  132,   73,    4,  127,  128,
 /*  1600 */   127,  128,  156,  157,  141,  142,  116,    4,  145,   38,
 /*  1610 */   147,  127,  128,  127,  128,  198,  199,  127,  128,   16,
 /*  1620 */    74,  175,   19,  249,  178,    4,  180,  181,   81,   82,
 /*  1630 */    83,   84,  109,  117,   87,   88,   89,   90,   91,   92,
 /*  1640 */    93,   94,  169,   96,   97,   98,   99,  100,  101,  102,
 /*  1650 */   103,  104,  105,  106,  107,  203,  298,  186,  121,   56,
 /*  1660 */   244,  175,  246,  179,  127,  128,    4,  203,  203,  217,
 /*  1670 */   124,  207,   69,  127,  128,  203,  139,  140,  226,  227,
 /*  1680 */    77,  217,  217,  156,  157,  117,   83,  235,  166,  217,
 /*  1690 */   122,  226,  227,  127,  128,  121,  203,    4,  226,  227,
 /*  1700 */   235,  127,  128,  100,  101,  168,  140,  235,  203,  116,
 /*  1710 */   217,  108,  117,  117,  117,  263,  264,  122,  122,  116,
 /*  1720 */   127,  128,  217,  117,  121,  219,  211,  203,  125,  119,
 /*  1730 */   127,  128,  117,  203,  168,  263,  133,  122,  286,  203,
 /*  1740 */   275,  217,  121,  140,  141,  142,  143,  217,  127,  128,
 /*  1750 */     4,  286,    4,  217,  319,  320,  226,  227,  286,  319,
 /*  1760 */   320,  187,  226,  227,  249,  235,  242,  274,  175,  319,
 /*  1770 */   320,  235,  266,    4,   79,  154,    4,  119,  175,  274,
 /*  1780 */   102,  178,  120,  180,  181,  203,   82,   83,   84,  127,
 /*  1790 */   128,   87,   88,   89,   90,   91,   92,   93,   94,  217,
 /*  1800 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1810 */   106,  107,    4,  219,  121,  116,  286,  117,  294,   73,
 /*  1820 */   127,  128,  286,  219,   16,  203,  117,   83,   84,  207,
 /*  1830 */   122,   87,   88,   89,   90,   91,   92,   93,   94,  217,
 /*  1840 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1850 */   106,  107,    4,  323,  324,  203,  274,  203,    4,  111,
 /*  1860 */   266,  168,  116,  117,   56,  116,  159,  121,  203,  217,
 /*  1870 */   266,  217,    4,  127,  128,  127,  128,  117,  226,  227,
 /*  1880 */   226,  227,  217,  117,    4,   77,  140,  235,  193,  235,
 /*  1890 */   121,   83,  117,  121,  319,  320,  127,  128,  173,  127,
 /*  1900 */   128,  155,  156,  157,  203,  203,   58,  242,  100,  101,
 /*  1910 */   319,  320,  140,  203,    4,  263,  108,  263,  217,  217,
 /*  1920 */   203,    4,  116,  203,  116,  117,   16,  217,  117,  121,
 /*  1930 */    18,  203,   50,  125,  217,  127,  128,  217,  286,  203,
 /*  1940 */   286,  133,    4,  226,  227,  217,  226,  227,  140,  141,
 /*  1950 */   142,  143,  235,  217,  287,  235,  102,  116,  189,  294,
 /*  1960 */   203,    6,  226,  227,  207,  118,   56,  116,  120,    8,
 /*  1970 */   203,  235,   50,  306,  217,  127,  128,  116,  116,  111,
 /*  1980 */   263,  127,  128,  175,  217,  203,  178,   77,  180,  181,
 /*  1990 */   203,  203,  116,   83,  140,  127,  128,   50,    4,  217,
 /*  2000 */     4,  121,  117,  286,  217,  217,  286,  127,  128,  116,
 /*  2010 */   100,  101,    4,   83,  226,  227,    4,  151,  108,    4,
 /*  2020 */   140,  137,  286,  235,  125,  203,  116,  117,   16,  175,
 /*  2030 */    13,  121,  203,  203,  118,  125,  145,  127,  128,  217,
 /*  2040 */   122,  164,    4,  133,  127,  128,  217,  217,  203,    4,
 /*  2050 */   140,  141,  142,  143,    4,  226,  227,  140,  150,  121,
 /*  2060 */    90,  203,  217,   90,  235,  127,  128,  203,   56,   90,
 /*  2070 */    90,  226,  227,  203,  286,  217,  176,    4,  203,    4,
 /*  2080 */   235,  217,    4,  109,  203,  175,   18,  217,  178,   77,
 /*  2090 */   180,  181,  217,  155,   24,   83,  226,  227,  217,  150,
 /*  2100 */     4,  226,  227,    4,  177,  235,  109,  226,  227,  157,
 /*  2110 */   235,  109,  100,  101,   25,  286,  235,   62,    4,  185,
 /*  2120 */   108,  127,  128,  127,  128,    4,  122,  203,  116,  121,
 /*  2130 */    16,  286,   51,  121,  138,  127,  128,  125,   51,  127,
 /*  2140 */   128,  217,  127,  128,  145,  133,    4,  116,  140,  115,
 /*  2150 */   226,  227,  140,  141,  142,  143,  286,  203,  120,  235,
 /*  2160 */   203,  286,  168,    4,  149,  127,  128,  286,  203,  116,
 /*  2170 */    56,  217,  127,  128,  217,  165,  125,  127,  128,  115,
 /*  2180 */   226,  227,  217,  117,  203,    4,  117,  175,   49,  235,
 /*  2190 */   178,   77,  180,  181,  182,  120,  113,   83,  217,  154,
 /*  2200 */   127,  128,  127,  128,    4,  127,  128,  226,  227,   48,
 /*  2210 */   286,  216,  287,  140,  100,  101,  235,  269,  140,  203,
 /*  2220 */     4,  232,  108,  127,  128,  232,  127,  128,  202,  310,
 /*  2230 */   116,  117,   16,  217,  110,  121,  203,  202,  188,  125,
 /*  2240 */   286,  127,  128,    4,  312,  312,  202,  133,  127,  128,
 /*  2250 */   217,  155,  203,    4,  140,  141,  142,  143,    4,  226,
 /*  2260 */   227,  140,  202,  121,  206,  203,  217,  286,  235,  127,
 /*  2270 */   128,  204,   56,   65,  209,  226,  227,  122,   35,  217,
 /*  2280 */   204,   78,  140,  272,  235,  186,  127,  128,  203,  175,
 /*  2290 */   119,  203,  178,   77,  180,  181,  203,    4,  251,   83,
 /*  2300 */    57,  156,  217,  257,  203,  217,   63,    4,  127,  128,
 /*  2310 */   217,  226,  227,  173,  226,  227,  100,  101,  217,  286,
 /*  2320 */   235,  140,  203,  235,  108,    4,  170,  127,  128,  258,
 /*  2330 */   107,  259,  116,  203,  171,  286,  217,  121,  261,  172,
 /*  2340 */   140,  125,  231,  127,  128,  226,  227,  217,  189,  133,
 /*  2350 */   203,  116,  109,    4,  235,  203,  140,  141,  142,  143,
 /*  2360 */   117,  203,  314,  107,  217,  122,  127,  128,  118,  217,
 /*  2370 */   290,  286,    4,  182,  286,  217,  127,  128,  226,  227,
 /*  2380 */   260,  127,  128,  169,  226,  227,    4,  235,  145,  140,
 /*  2390 */   295,  175,  261,  235,  178,  203,  180,  181,  276,  203,
 /*  2400 */    46,  158,  203,  160,  161,  286,  322,  168,  203,  217,
 /*  2410 */   203,  276,  169,  217,  171,  172,  217,  174,  226,  227,
 /*  2420 */   127,  128,  217,  120,  217,  226,  227,  235,   27,  322,
 /*  2430 */   127,  128,  272,  140,  235,  192,  203,  119,  286,  203,
 /*  2440 */   203,  187,  121,  203,  286,  327,  253,  157,  127,  128,
 /*  2450 */   217,  203,  193,  217,  217,  207,  203,  217,  203,  226,
 /*  2460 */   227,  140,  226,  227,  145,  217,  226,  227,  235,  203,
 /*  2470 */   217,  235,  217,  203,  228,  235,  127,  128,  286,  226,
 /*  2480 */   227,  226,  227,  217,   39,  286,  203,  217,  235,  203,
 /*  2490 */   235,  203,  203,  207,  230,  127,  128,  203,  203,  203,
 /*  2500 */   217,  228,  207,  217,  203,  217,  217,  238,  126,  127,
 /*  2510 */   128,  217,  217,  217,  144,  226,  227,  238,  217,  286,
 /*  2520 */   226,  227,  286,  203,  235,  176,  286,  226,  227,  235,
 /*  2530 */   228,  231,  228,  228,  228,  228,  235,  217,  228,  286,
 /*  2540 */   203,  286,  231,  175,  203,  203,  226,  227,  207,  272,
 /*  2550 */   119,  206,  119,  203,  217,  235,  203,  207,  217,  217,
 /*  2560 */   203,  231,  203,  226,  227,  203,  206,  217,  226,  227,
 /*  2570 */   217,  272,  235,  119,  217,  286,  217,  235,   33,  217,
 /*  2580 */   286,  301,  203,  226,  227,  226,  227,  286,  226,  227,
 /*  2590 */   203,  182,  235,  302,  235,  203,  217,  235,  203,  203,
 /*  2600 */   119,  203,  278,  207,  217,  257,  286,  260,  174,  217,
 /*  2610 */   245,   81,  217,  217,  119,  217,  261,  278,  226,  227,
 /*  2620 */   257,  226,  227,  286,  226,  227,  260,  235,  286,  119,
 /*  2630 */   235,  116,  261,  235,  145,  284,  278,  281,  203,  278,
 /*  2640 */   203,  257,  203,  286,  245,  286,  206,  272,  286,  206,
 /*  2650 */   119,  257,  217,  272,  217,  119,  217,  247,   78,  119,
 /*  2660 */   247,  226,  227,  226,  227,  226,  227,  119,  247,  119,
 /*  2670 */   235,  203,  235,  247,  235,  203,  119,  176,  286,  296,
 /*  2680 */   272,  286,  203,  119,  286,  217,  203,   20,  272,  217,
 /*  2690 */   305,  305,  119,  119,  226,  227,  217,  272,  226,  227,
 /*  2700 */   217,  119,   17,  235,  307,  226,  227,  235,  203,  226,
 /*  2710 */   227,  307,  254,  256,  235,  203,  287,  298,  235,  203,
 /*  2720 */   298,  286,  217,  286,  260,  286,  229,  291,  273,  217,
 /*  2730 */   260,  226,  227,  217,  271,  229,  236,  230,  226,  227,
 /*  2740 */   235,  256,  226,  227,  240,  285,  273,  235,  273,  257,
 /*  2750 */   201,  235,  254,  219,  286,  299,  219,  219,  286,  300,
 /*  2760 */   219,  252,  288,  246,  270,  286,  325,  241,  226,  286,
 /*  2770 */   237,   73,  237,  311,    4,  328,  237,  226,  328,  328,
 /*  2780 */   328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
 /*  2790 */   328,  286,  328,  328,  328,  328,  328,  328,  286,  328,
 /*  2800 */   328,  328,  286,
};
#define YY_SHIFT_USE_DFLT (-102)
#define YY_SHIFT_COUNT (539)
#define YY_SHIFT_MIN   (-101)
#define YY_SHIFT_MAX   (2770)
static const short yy_shift_ofst[] = {
 /*     0 */   690,  808, 1446,  138, 1318, 1603, 1364, 2114, 2114, 2114,
 /*    10 */   490,  216, 2012, 2216, 2216, 2216, 2216, 2216, 2216, 2216,
 /*    20 */  2216, 1523,   -4,  106, 1910, 1808, 2216, 2216, 2216, 2216,
 /*    30 */  2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216,
 /*    40 */  2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216,
 /*    50 */  2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216,
 /*    60 */  2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216,
 /*    70 */  2216, 2216, 1746, 1463, 1463,  587, 1473, 1473, 2382,   89,
 /*    80 */    39, 1848, 1546, 2382, 1486, 1486, 1486, 1662, 1486,  -33,
 /*    90 */   -33,  635,  845,  338,  786,  142, 2321, 1769, 1693, 1938,
 /*   100 */  2142, 1593, 2008, 1593, 1880, 1772, 1621, 1546,  955, 2349,
 /*   110 */  2368, 2368, 2368, 2368,  414, 2368, 1486,  635,  635,  845,
 /*   120 */  1695, 1695, 1527,  519,  519,  -43,  811, 1537, 1400, 1854,
 /*   130 */  1566, 1425, 1574,  529, 1471,  146,  530,  629,  530,  409,
 /*   140 */   429,  579,  187,  288, 2303, 2293, 2254, 2159, 2239, 2096,
 /*   150 */  2249, 2075, 2200, 2099, 2181, 2121, 2078, 2073, 2050, 2045,
 /*   160 */  2038, 1917, 1996, 2015, 1244, 1490, 1134, 1104,  858,  858,
 /*   170 */   858, 1994, 1136, 1386, 1014, 1014, 1484,  553, 1203,  828,
 /*   180 */   743,  757, 1868, 1748, 1449, 1198,  635,  635,   85,   85,
 /*   190 */  1413, 1342,  291, 2698, 2698, 2770, 2698, 2698, -102, -102,
 /*   200 */  -102,  421,  601,  601,  601,  601,  601,  601,  601,  601,
 /*   210 */   601,  601,  571,  388,  704,  677, 1214, 1185, 1153,  -73,
 /*   220 */  1122, 1091, 1060, 1028,  997,  963,  936,  909,  754, 1547,
 /*   230 */  1257, 1704, 1744, 1744,  482,  -16,  -16,  -16,  -16,  -16,
 /*   240 */   -16,  204,  346, -101,   90,  -27,  -27,  751,  436,  268,
 /*   250 */   268,  268,  623,  328,  207,  190,  369,  392, 1398,  836,
 /*   260 */   830,  818,  213,  335,  -67,  342,  -79, 1615, 1230, 1331,
 /*   270 */  1331,  135, 1415,  120,  872, 1331,  584,  791,  791, 1194,
 /*   280 */   872,  684,  684, 1024,  991,  659, 2685, 2685, 2582, 2574,
 /*   290 */  2573, 2667, 2667, 2564, 2501, 2557, 2580, 2550, 2580, 2548,
 /*   300 */  2580, 2540, 2580, 2536, 2203, 2140, 2531, 2203, 2530, 2434,
 /*   310 */  2140, 2434, 2489, 2515, 2510, 2167, 2214, 2434, 2140, 2495,
 /*   320 */  2530, 2167, 2214, 2434, 2140, 2481, 2409, 2545, 2454, 2203,
 /*   330 */  2433, 2235, 2203, 2431, 2235, 2319, 2319, 2319, 2319, 2445,
 /*   340 */  2235, 2319, 2370, 2319, 2445, 2319, 2319, 2259, 2290, 2318,
 /*   350 */  2401, 2401, 2354, 2354, 2167, 2214, 2191, 2250, 2256, 2235,
 /*   360 */  2223, 2223, 2167, 2163, 2156, 2140, 2145, 2171, 2155, 2203,
 /*   370 */  2208, 2208, 2124, 2124, 2124, 2124, -102, -102, -102, -102,
 /*   380 */  -102, -102, -102, -102, -102, -102, 2243,  525,   77,  518,
 /*   390 */   451,  -15,  130,  169, 1596, 1595,    7, 1568,  435, 1434,
 /*   400 */  1314, 1211, 1207,  239,  609,  102, 1116,  788,  362,  488,
 /*   410 */   624,   87,  -80,  -44, 2161, 2139, 2083, 2064, 2069, 2066,
 /*   420 */  2051, 2053, 2010, 2034, 2031, 1999, 1934, 2087, 2004, 2081,
 /*   430 */  2055, 2089, 2002, 1997, 1952, 1927, 1949, 2070, 2068, 1974,
 /*   440 */  1900, 1980, 1979, 1973, 1970, 1908, 1918, 1877, 2017, 1891,
 /*   450 */  1916, 1899, 1930, 1866, 1884, 1893, 1947, 1876, 1862, 1885,
 /*   460 */  1861, 1922, 1961, 1851, 1847, 1955, 1841, 1882, 1912, 1811,
 /*   470 */  1725, 1806, 1775, 1766, 1760, 1709, 1708, 1707, 1749, 1700,
 /*   480 */  1699, 1708, 1678, 1658, 1610, 1522, 1606, 1597, 1453, 1516,
 /*   490 */  1571, 1570, 1404, 1453, 1558, 1552, 1534, 1517, 1469, 1414,
 /*   500 */  1408, 1346, 1338, 1289, 1279, 1148, 1101, 1112, 1077, 1054,
 /*   510 */  1125,  910,  884,  869,  905,  822,  961,  618,  854,  863,
 /*   520 */   862,  618,  763,  580,  655,  595,  430,  562,  549,  452,
 /*   530 */   420,  352,  287,  265,  219,  215,  201,   63,   46,   43,
};
#define YY_REDUCE_USE_DFLT (-205)
#define YY_REDUCE_COUNT (385)
#define YY_REDUCE_MIN   (-204)
#define YY_REDUCE_MAX   (2551)
static const short yy_reduce_ofst[] = {
 /*     0 */   538,  119, 1162, 1175,  660, 1530,  175, 1452, 1252,  -45,
 /*    10 */  -104, 1472, 1182, 1465, 1308, 1717, 1283, 1195, 1654, 1652,
 /*    20 */   672,  691, 2516, 2512, 2505, 2483, 2479, 2472, 2468, 2439,
 /*    30 */  2437, 2435, 2398, 2395, 2392, 2362, 2359, 2357, 2342, 2337,
 /*    40 */  2320, 2301, 2294, 2289, 2255, 2253, 2240, 2236, 2233, 2199,
 /*    50 */  2192, 2158, 2152, 2119, 2088, 2085, 2049, 2033, 1981, 1954,
 /*    60 */  1924, 1881, 1875, 1870, 1845, 1829, 1788, 1736, 1720, 1536,
 /*    70 */   172,  -92,  616,  331,   37,  513,  424,  -24,  152,  611,
 /*    80 */   918,  613,  521,  434, 1665, 1524, 1190,  -77,  673, 1358,
 /*    90 */    66,  150, -150,  695, -106,  327, 2396, 2350, 2341, 2295,
 /*   100 */  2286, 1232, 2248,  920, 1757, 1622, 1464,  508, 1174,  777,
 /*   110 */  1582, 1505, 1493, 1199, 1099, 1189,  123,  183,  855, -118,
 /*   120 */   651,  604,  650,  645,  610, 1667, -204, 2387, 2379, 2266,
 /*   130 */  1787, 1787, 2353, 2296, 2288, 2283, 1416, 2270, 1313, 1787,
 /*   140 */  1604, 1591, 2266, 2237, 2207, 1787, 1787, 1787, 1787, 1787,
 /*   150 */  1787, 1787, 2205, 1787, 1787, 1787, 1787, 2196, 1787, 1787,
 /*   160 */  1787, 2147, 2130, 2101, 2093, 2062, 2016, 1965, 1594, 1506,
 /*   170 */  1061, 1957, 1864, 1858, 1575, 1450, 1830, 1822, 1787, 1782,
 /*   180 */  1767,  345, 1728, 1710, 1702, 1701, 1179,  428, 1440, 1435,
 /*   190 */  1417, 1515, 1241, 1374, 1306, 1149, 1284, 1233,  796, 1201,
 /*   200 */  1172, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,
 /*   210 */  1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,
 /*   220 */  1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,
 /*   230 */  1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,
 /*   240 */  1925, 1925, 1925, 1925, 2526, 2551, 2542, 2462, 2462, 2539,
 /*   250 */  2535, 2533, 2494, 2441, 2517, 2509, 2474, 2459, 2456, 2541,
 /*   260 */  2538, 2537, 1925, 2534, 2498, 2549, 2492, 2460, 2485, 2475,
 /*   270 */  2473, 2507, 2504, 2500, 2506, 2455, 2463, 2470, 2464, 2436,
 /*   280 */  2497, 2422, 2419, 2429, 2457, 2458, 2404, 2397, 2277, 2425,
 /*   290 */  2416, 2386, 2385, 2408, 2383, 2277, 2426, 2277, 2421, 2277,
 /*   300 */  2413, 2277, 2410, 2381, 2443, 2394, 2375, 2440, 2399, 2361,
 /*   310 */  2384, 2358, 2351, 2356, 2277, 2371, 2366, 2339, 2363, 2277,
 /*   320 */  2365, 2355, 2347, 2324, 2348, 2277, 2291, 2280, 2299, 2360,
 /*   330 */  2277, 2330, 2345, 2277, 2311, 2310, 2307, 2306, 2305, 2279,
 /*   340 */  2300, 2304, 2264, 2302, 2269, 2273, 2246, 2118, 2193, 2160,
 /*   350 */  2107, 2084, 2135, 2122, 2131, 2120, 2080, 2048, 2095, 2111,
 /*   360 */  1925, 1925, 2077, 2072, 2071, 2046, 2047, 2011, 2065, 2058,
 /*   370 */  2076, 2067, 2060, 2044, 2035, 2026, 1933, 1932, 1919, 1993,
 /*   380 */  1989, 1948, 1925, 1925, 1925, 1995,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   880, 1201, 1201, 1323, 1201, 1201, 1201, 1201, 1201, 1201,
 /*    10 */  1323, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
 /*    20 */  1201, 1323, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
 /*    30 */  1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
 /*    40 */  1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
 /*    50 */  1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
 /*    60 */  1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
 /*    70 */  1201, 1201, 1064, 1365, 1365, 1365, 1342, 1342, 1365, 1057,
 /*    80 */  1365, 1365,  908, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
 /*    90 */  1365, 1365,  931, 1053,  921, 1064, 1365, 1365, 1365, 1365,
 /*   100 */  1365, 1126, 1141, 1126, 1118, 1107, 1365, 1365, 1365, 1239,
 /*   110 */  1134, 1134, 1134, 1134, 1004, 1134, 1365, 1365, 1365, 1365,
 /*   120 */  1169, 1168, 1365, 1092, 1092, 1203, 1365, 1292, 1297, 1162,
 /*   130 */  1365, 1365, 1365, 1365, 1365, 1127, 1365, 1365, 1365, 1065,
 /*   140 */  1053, 1342, 1162, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
 /*   150 */  1365, 1365, 1365, 1365, 1142, 1119, 1108, 1365, 1365, 1365,
 /*   160 */  1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1053, 1053,
 /*   170 */  1053, 1365, 1365, 1365, 1342, 1342, 1365, 1164, 1365, 1365,
 /*   180 */  1365,  918, 1365, 1365, 1365,  886, 1365, 1365, 1342, 1342,
 /*   190 */   880, 1323, 1086, 1323, 1323,  926, 1323, 1323, 1316, 1043,
 /*   200 */  1043, 1102, 1125, 1124, 1123, 1122, 1070, 1112, 1100, 1104,
 /*   210 */  1216, 1103, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
 /*   220 */  1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
 /*   230 */  1203, 1171, 1185, 1170, 1178, 1190, 1179, 1184, 1183, 1182,
 /*   240 */  1173, 1172, 1174, 1175, 1365, 1365, 1365, 1365, 1365, 1365,
 /*   250 */  1365, 1365, 1056, 1365, 1365, 1026, 1365, 1365, 1266, 1365,
 /*   260 */  1365,  933, 1176, 1365, 1041,  889, 1111, 1205, 1054, 1082,
 /*   270 */  1082,  971,  995,  955, 1092, 1082, 1072, 1086, 1086, 1211,
 /*   280 */  1092, 1365, 1365, 1203, 1054, 1041, 1307, 1307, 1073, 1073,
 /*   290 */  1073, 1291, 1291, 1073, 1239, 1073, 1017, 1073, 1017, 1073,
 /*   300 */  1017, 1073, 1017, 1073,  915, 1111, 1073,  915, 1008, 1114,
 /*   310 */  1111, 1114, 1147, 1130, 1073, 1101, 1086, 1114, 1111, 1073,
 /*   320 */  1008, 1101, 1086, 1114, 1111, 1073, 1273, 1271, 1073,  915,
 /*   330 */  1073, 1224,  915, 1073, 1224, 1006, 1006, 1006, 1006,  987,
 /*   340 */  1224, 1006,  971, 1006,  987, 1006, 1006, 1361, 1365, 1073,
 /*   350 */  1352, 1352, 1095, 1095, 1101, 1086, 1365, 1365, 1230, 1224,
 /*   360 */  1189, 1177, 1101, 1099, 1096, 1111, 1365, 1073,  990,  915,
 /*   370 */   897,  897,  885,  885,  885,  885, 1320, 1320, 1316,  973,
 /*   380 */   973, 1059, 1188, 1187, 1186,  942, 1202, 1365, 1365, 1365,
 /*   390 */  1365, 1365, 1365, 1240, 1365, 1365, 1365, 1365, 1365, 1365,
 /*   400 */  1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1326,
 /*   410 */  1365, 1365, 1365, 1365, 1365,  881, 1365, 1365, 1365, 1365,
 /*   420 */  1365, 1310, 1365, 1365, 1365, 1365, 1365, 1365, 1270, 1269,
 /*   430 */  1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1131,
 /*   440 */  1365, 1365, 1365, 1365, 1365, 1365, 1115, 1365, 1258, 1365,
 /*   450 */  1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
 /*   460 */  1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
 /*   470 */  1365, 1365, 1365, 1365, 1365, 1365, 1029, 1035, 1365, 1365,
 /*   480 */  1365, 1030, 1365, 1365, 1160, 1365, 1365, 1365, 1214, 1365,
 /*   490 */  1365, 1365, 1365, 1097, 1365, 1365, 1365, 1365, 1365, 1365,
 /*   500 */  1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1358, 1087,
 /*   510 */  1365, 1365, 1365, 1204, 1365, 1202, 1365, 1325, 1365, 1365,
 /*   520 */  1365, 1324, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
 /*   530 */  1365, 1365, 1161, 1160, 1204,  924,  904, 1365,  895, 1365,
 /*   540 */   877,  882, 1309, 1306, 1303, 1308, 1302, 1304, 1301, 1305,
 /*   550 */  1300, 1298, 1299, 1296, 1294, 1293, 1295, 1290, 1286, 1246,
 /*   560 */  1244, 1242, 1251, 1250, 1249, 1248, 1247, 1243, 1241, 1245,
 /*   570 */  1237, 1236, 1137, 1116, 1105, 1024, 1285, 1283, 1284, 1235,
 /*   580 */  1233, 1234, 1023, 1022, 1021, 1016, 1015, 1014, 1013, 1313,
 /*   590 */  1322, 1321, 1319, 1318, 1317, 1311, 1312, 1222, 1221, 1219,
 /*   600 */  1218, 1220,  917, 1262, 1265, 1264, 1263, 1268, 1267, 1260,
 /*   610 */  1272, 1277, 1276, 1281, 1280, 1279, 1278, 1275, 1257, 1146,
 /*   620 */  1145, 1143, 1139, 1150, 1149, 1148, 1138, 1140, 1144, 1121,
 /*   630 */  1129, 1128, 1117, 1120, 1009, 1110, 1106, 1109, 1025, 1261,
 /*   640 */  1020, 1019, 1018,  916,  907, 1075,  906,  905,  920,  993,
 /*   650 */   994, 1002, 1005, 1000, 1003,  999,  998,  997, 1001,  996,
 /*   660 */   992,  923,  922,  932,  986,  969,  958,  925,  960,  957,
 /*   670 */   956,  961,  978,  977,  984,  983,  982,  981,  980,  976,
 /*   680 */   979,  975,  974,  962,  954,  953,  972,  952,  989,  988,
 /*   690 */   985,  951, 1012, 1011, 1010, 1007,  950,  949,  948,  947,
 /*   700 */   946,  945, 1200, 1364, 1360, 1363, 1362, 1359, 1199, 1207,
 /*   710 */  1193, 1191, 1027, 1038, 1037, 1036, 1033, 1034, 1048, 1046,
 /*   720 */  1045, 1044, 1081, 1080, 1079, 1078, 1077, 1076, 1069, 1067,
 /*   730 */  1062, 1061, 1068, 1066, 1063, 1084, 1085, 1083, 1060, 1052,
 /*   740 */  1050, 1051, 1049, 1136, 1133, 1135, 1132, 1071, 1058, 1055,
 /*   750 */  1042, 1340, 1338, 1341, 1339, 1337, 1345, 1347, 1346, 1351,
 /*   760 */  1349, 1348, 1344, 1357, 1356, 1355, 1354, 1353, 1343, 1350,
 /*   770 */  1336, 1335, 1334, 1333, 1089, 1094, 1093, 1088, 1032, 1192,
 /*   780 */  1202, 1196, 1331, 1329, 1332, 1328, 1327, 1227, 1229, 1232,
 /*   790 */  1231, 1228, 1091, 1090, 1226, 1225, 1330, 1195, 1167,  938,
 /*   800 */   936,  937, 1254, 1253, 1256, 1255, 1252,  940,  939,  935,
 /*   810 */   934, 1165, 1159, 1158, 1282, 1197, 1198, 1157, 1163, 1155,
 /*   820 */  1154, 1153, 1181, 1180, 1166, 1156,  927, 1031, 1028, 1194,
 /*   830 */  1152, 1074, 1151,  968,  967,  966,  965,  964,  963, 1040,
 /*   840 */  1039,  944,  959,  943,  941,  919,  909,  914,  912,  913,
 /*   850 */   911,  910,  902,  899,  901,  898,  903,  900,  896,  894,
 /*   860 */   893,  892,  891,  890,  930,  929,  928,  924,  888,  887,
 /*   870 */   884,  883,  879,  878,  876,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
**
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
    0,  /*          $ => nothing */
    0,  /*    ILLEGAL => nothing */
    0,  /*    COMMENT => nothing */
    0,  /*      SPACE => nothing */
    0,  /*         ID => nothing */
    4,  /*      ABORT => ID */
    4,  /*     ACTION => ID */
    4,  /*      AFTER => ID */
    4,  /*     ALWAYS => ID */
    4,  /*    ANALYZE => ID */
    4,  /*        ASC => ID */
    4,  /*     ATTACH => ID */
    4,  /*     BEFORE => ID */
    4,  /*      BEGIN => ID */
    4,  /*         BY => ID */
    4,  /*    CASCADE => ID */
    4,  /*       CAST => ID */
    4,  /*   COLUMNKW => ID */
    4,  /*   CONFLICT => ID */
    4,  /*    CURRENT => ID */
    4,  /*   DATABASE => ID */
    4,  /*   DEFERRED => ID */
    4,  /*       DESC => ID */
    4,  /*     DETACH => ID */
    4,  /*         DO => ID */
    4,  /*       EACH => ID */
    4,  /*        END => ID */
    4,  /*    EXCLUDE => ID */
    4,  /*  EXCLUSIVE => ID */
    4,  /*    EXPLAIN => ID */
    4,  /*       FAIL => ID */
    4,  /*      FIRST => ID */
    4,  /*  FOLLOWING => ID */
    4,  /*        FOR => ID */
    4,  /*  GENERATED => ID */
    4,  /*     GROUPS => ID */
    4,  /*     IGNORE => ID */
    4,  /*  IMMEDIATE => ID */
    4,  /*    INDEXED => ID */
    4,  /*  INITIALLY => ID */
    4,  /*    INSTEAD => ID */
    4,  /*       LAST => ID */
    4,  /*    LIKE_KW => ID */
    4,  /*      MATCH => ID */
    4,  /* MATERIALIZED => ID */
    4,  /*         NO => ID */
    4,  /*      NULLS => ID */
    4,  /*     OTHERS => ID */
    4,  /*       PLAN => ID */
    4,  /*      QUERY => ID */
    4,  /*        KEY => ID */
    4,  /*         OF => ID */
    4,  /*     OFFSET => ID */
    4,  /*  PARTITION => ID */
    4,  /*     PRAGMA => ID */
    4,  /*  PRECEDING => ID */
    4,  /*      RAISE => ID */
    4,  /*      RANGE => ID */
    4,  /*  RECURSIVE => ID */
    4,  /*    RELEASE => ID */
    4,  /*    REPLACE => ID */
    4,  /*   RESTRICT => ID */
    4,  /*        ROW => ID */
    4,  /*       ROWS => ID */
    4,  /*   ROLLBACK => ID */
    4,  /*  SAVEPOINT => ID */
    4,  /*       TEMP => ID */
    4,  /*       TIES => ID */
    4,  /*    TRIGGER => ID */
    4,  /*  UNBOUNDED => ID */
    4,  /*     VACUUM => ID */
    4,  /*       VIEW => ID */
    4,  /*    VIRTUAL => ID */
    4,  /*       WITH => ID */
    4,  /*    WITHOUT => ID */
    4,  /*    REINDEX => ID */
    4,  /*     RENAME => ID */
    4,  /*   CTIME_KW => ID */
    4,  /*         IF => ID */
    4,  /*     FILTER => ID */
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
  QList<Token*>* tokens = nullptr;
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  sqlite3_parseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

void *sqlite3_parseCopyParserState(void* other)
{
  yyParser *pParser;
  yyParser *otherParser = (yyParser*)other;

  // Copy parser
  pParser = (yyParser*)malloc((size_t)sizeof(yyParser));
  memcpy(pParser, other, (size_t)sizeof(yyParser));

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = malloc((size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)other)->yystack, (size_t)stackSize);
#endif

  for (int i = 0; i <= pParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(otherParser->yystack[i].tokens);
  }

  return pParser;
}

void sqlite3_parseAddToken(void* other, Token* token)
{
    yyParser *otherParser = (yyParser*)other;
    if (otherParser->yyidx < 0)
        return; // Nothing on stack yet. Might happen when parsing just whitespaces, nothing else.

    otherParser->yystack[otherParser->yyidx].tokens->append(token);
}

void sqlite3_parseRestoreParserState(void* saved, void* target)
{
  yyParser *pParser = (yyParser*)target;
  yyParser *savedParser = (yyParser*)saved;

  for (int i = 0; i <= pParser->yyidx; i++)
      delete pParser->yystack[i].tokens;

  memcpy(pParser, saved, (size_t)sizeof(yyParser));

  for (int i = 0; i <= savedParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(savedParser->yystack[i].tokens);
  }

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = relloc(pParser->yystack, (size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)saved)->yystack, (size_t)stackSize);
#endif
}

void sqlite3_parseFreeSavedState(void* other)
{
    yyParser *pParser = (yyParser*)other;
    for (int i = 0; i <= pParser->yyidx; i++)
        delete pParser->yystack[i].tokens;

#if YYSTACKDEPTH<=0
    free(pParser->yystack);
#endif
    free(other);
}

#ifndef NDEBUG
/*
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = {
  "$",             "ILLEGAL",       "COMMENT",       "SPACE",       
  "ID",            "ABORT",         "ACTION",        "AFTER",       
  "ALWAYS",        "ANALYZE",       "ASC",           "ATTACH",      
  "BEFORE",        "BEGIN",         "BY",            "CASCADE",     
  "CAST",          "COLUMNKW",      "CONFLICT",      "CURRENT",     
  "DATABASE",      "DEFERRED",      "DESC",          "DETACH",      
  "DO",            "EACH",          "END",           "EXCLUDE",     
  "EXCLUSIVE",     "EXPLAIN",       "FAIL",          "FIRST",       
  "FOLLOWING",     "FOR",           "GENERATED",     "GROUPS",      
  "IGNORE",        "IMMEDIATE",     "INDEXED",       "INITIALLY",   
  "INSTEAD",       "LAST",          "LIKE_KW",       "MATCH",       
  "MATERIALIZED",  "NO",            "NULLS",         "OTHERS",      
  "PLAN",          "QUERY",         "KEY",           "OF",          
  "OFFSET",        "PARTITION",     "PRAGMA",        "PRECEDING",   
  "RAISE",         "RANGE",         "RECURSIVE",     "RELEASE",     
  "REPLACE",       "RESTRICT",      "ROW",           "ROWS",        
  "ROLLBACK",      "SAVEPOINT",     "TEMP",          "TIES",        
  "TRIGGER",       "UNBOUNDED",     "VACUUM",        "VIEW",        
  "VIRTUAL",       "WITH",          "WITHOUT",       "REINDEX",     
  "RENAME",        "CTIME_KW",      "IF",            "FILTER",      
  "ANY",           "OR",            "AND",           "NOT",         
  "IS",            "BETWEEN",       "IN",            "ISNULL",      
  "NOTNULL",       "NE",            "EQ",            "GT",          
  "LE",            "LT",            "GE",            "ESCAPE",      
  "BITAND",        "BITOR",         "LSHIFT",        "RSHIFT",      
  "PLUS",          "MINUS",         "STAR",          "SLASH",       
  "REM",           "CONCAT",        "PTR",           "COLLATE",     
  "BITNOT",        "SEMI",          "TRANSACTION",   "ID_TRANS",    
  "COMMIT",        "TO",            "CREATE",        "TABLE",       
  "LP",            "RP",            "AS",            "DOT",         
  "ID_TAB_NEW",    "ID_DB",         "COMMA",         "CTX_ROWID_KW",
  "CTX_STRICT_KW",  "EXISTS",        "ID_COL_NEW",    "STRING",      
  "JOIN_KW",       "ID_COL_TYPE",   "RIGHT_ASSOC",   "CONSTRAINT",  
  "DEFAULT",       "NULL",          "PRIMARY",       "UNIQUE",      
  "CHECK",         "REFERENCES",    "ID_CONSTR",     "ID_COLLATE",  
  "ID_TAB",        "INTEGER",       "FLOAT",         "BLOB",        
  "AUTOINCR",      "ON",            "INSERT",        "DELETE",      
  "UPDATE",        "ID_FK_MATCH",   "SET",           "DEFERRABLE",  
  "FOREIGN",       "DROP",          "ID_VIEW_NEW",   "ID_VIEW",     
  "SELECT",        "VALUES",        "UNION",         "ALL",         
  "EXCEPT",        "INTERSECT",     "DISTINCT",      "ID_ALIAS",    
  "FROM",          "USING",         "JOIN",          "ID_JOIN_OPTS",
  "ID_IDX",        "ORDER",         "GROUP",         "HAVING",      
  "LIMIT",         "WHERE",         "RETURNING",     "ID_COL",      
  "INTO",          "NOTHING",       "ID_FN",         "ID_ERR_MSG",  
  "VARIABLE",      "CASE",          "WHEN",          "THEN",        
  "ELSE",          "INDEX",         "ID_IDX_NEW",    "ID_PRAGMA",   
  "ID_TRIG_NEW",   "ID_TRIG",       "ALTER",         "ADD",         
  "WINDOW",        "OVER",          "error",         "cmd",         
  "input",         "cmdlist",       "ecmd",          "explain",     
  "cmdx",          "transtype",     "trans_opt",     "nm",          
  "savepoint_opt",  "temp",          "ifnotexists",   "fullname",    
  "columnlist",    "conslist_opt",  "table_options",  "select",      
  "table_option",  "column",        "columnid",      "type",        
  "carglist",      "id",            "id_opt",        "ids",         
  "typetoken",     "typename",      "signed",        "plus_num",    
  "minus_num",     "ccons",         "term",          "expr",        
  "onconf",        "sortorder",     "autoinc",       "idxlist_opt", 
  "refargs",       "defer_subclause",  "gen_always",    "tnm",         
  "refarg",        "refact",        "init_deferred_pred_opt",  "conslist",    
  "tconscomma",    "tcons",         "idxlist",       "defer_subclause_opt",
  "resolvetype",   "orconf",        "raisetype",     "ifexists",    
  "select_stmt",   "with",          "selectnowith",  "oneselect",   
  "multiselect_op",  "values",        "distinct",      "selcollist",  
  "from",          "where_opt",     "groupby_opt",   "having_opt",  
  "orderby_opt",   "limit_opt",     "window_clause",  "nexprlist",   
  "exprlist",      "sclp",          "as",            "joinsrc",     
  "singlesrc",     "seltablist",    "joinop",        "joinconstr_opt",
  "dbnm",          "indexed_opt",   "idlist",        "sortlist",    
  "nulls",         "delete_stmt",   "returning",     "update_stmt", 
  "setlist",       "idlist_opt",    "insert_stmt",   "insert_cmd",  
  "upsert",        "rp_opt",        "exprx",         "not_opt",     
  "likeop",        "case_operand",  "case_exprlist",  "case_else",   
  "filter_over",   "uniqueflag",    "idxlist_single",  "collate",     
  "vinto",         "nmnum",         "number",        "trigger_time",
  "trigger_event",  "foreach_clause",  "when_clause",   "trigger_cmd_list",
  "trigger_cmd",   "database_kw_opt",  "key_opt",       "kwcolumn_opt",
  "create_vtab",   "vtabarglist",   "vtabarg",       "vtabargtoken",
  "anylist",       "wqlist",        "wqas",          "wqcte",       
  "windowdefn_list",  "windowdefn",    "window",        "frame_opt",   
  "range_or_rows",  "frame_bound_s",  "frame_exclude_opt",  "frame_bound_e",
  "frame_bound",   "frame_exclude",  "filter_clause",  "over_clause", 
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "input ::= cmdlist",
 /*   1 */ "cmdlist ::= cmdlist ecmd",
 /*   2 */ "cmdlist ::= ecmd",
 /*   3 */ "ecmd ::= SEMI",
 /*   4 */ "ecmd ::= explain cmdx SEMI",
 /*   5 */ "explain ::=",
 /*   6 */ "explain ::= EXPLAIN",
 /*   7 */ "explain ::= EXPLAIN QUERY PLAN",
 /*   8 */ "cmdx ::= cmd",
 /*   9 */ "cmd ::= BEGIN transtype trans_opt",
 /*  10 */ "trans_opt ::=",
 /*  11 */ "trans_opt ::= TRANSACTION",
 /*  12 */ "trans_opt ::= TRANSACTION nm",
 /*  13 */ "trans_opt ::= TRANSACTION ID_TRANS",
 /*  14 */ "transtype ::=",
 /*  15 */ "transtype ::= DEFERRED",
 /*  16 */ "transtype ::= IMMEDIATE",
 /*  17 */ "transtype ::= EXCLUSIVE",
 /*  18 */ "cmd ::= COMMIT trans_opt",
 /*  19 */ "cmd ::= END trans_opt",
 /*  20 */ "cmd ::= ROLLBACK trans_opt",
 /*  21 */ "savepoint_opt ::= SAVEPOINT",
 /*  22 */ "savepoint_opt ::=",
 /*  23 */ "cmd ::= SAVEPOINT nm",
 /*  24 */ "cmd ::= RELEASE savepoint_opt nm",
 /*  25 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt nm",
 /*  26 */ "cmd ::= SAVEPOINT ID_TRANS",
 /*  27 */ "cmd ::= RELEASE savepoint_opt ID_TRANS",
 /*  28 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS",
 /*  29 */ "cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options",
 /*  30 */ "cmd ::= CREATE temp TABLE ifnotexists fullname AS select",
 /*  31 */ "cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW",
 /*  32 */ "cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /*  33 */ "table_options ::=",
 /*  34 */ "table_options ::= table_option",
 /*  35 */ "table_options ::= table_options COMMA table_option",
 /*  36 */ "table_option ::= WITHOUT nm",
 /*  37 */ "table_option ::= nm",
 /*  38 */ "table_option ::= WITHOUT CTX_ROWID_KW",
 /*  39 */ "table_option ::= CTX_STRICT_KW",
 /*  40 */ "ifnotexists ::=",
 /*  41 */ "ifnotexists ::= IF NOT EXISTS",
 /*  42 */ "temp ::= TEMP",
 /*  43 */ "temp ::=",
 /*  44 */ "columnlist ::= columnlist COMMA column",
 /*  45 */ "columnlist ::= column",
 /*  46 */ "column ::= columnid type carglist",
 /*  47 */ "columnid ::= nm",
 /*  48 */ "columnid ::= ID_COL_NEW",
 /*  49 */ "id ::= ID",
 /*  50 */ "id_opt ::= id",
 /*  51 */ "id_opt ::=",
 /*  52 */ "ids ::= ID|STRING",
 /*  53 */ "nm ::= id",
 /*  54 */ "nm ::= STRING",
 /*  55 */ "nm ::= JOIN_KW",
 /*  56 */ "type ::=",
 /*  57 */ "type ::= typetoken",
 /*  58 */ "typetoken ::= typename",
 /*  59 */ "typetoken ::= typename LP signed RP",
 /*  60 */ "typetoken ::= typename LP signed COMMA signed RP",
 /*  61 */ "typename ::= ids",
 /*  62 */ "typename ::= typename ids",
 /*  63 */ "typename ::= ID_COL_TYPE",
 /*  64 */ "signed ::= plus_num",
 /*  65 */ "signed ::= minus_num",
 /*  66 */ "carglist ::= carglist ccons",
 /*  67 */ "carglist ::=",
 /*  68 */ "ccons ::= CONSTRAINT nm",
 /*  69 */ "ccons ::= DEFAULT term",
 /*  70 */ "ccons ::= DEFAULT LP expr RP",
 /*  71 */ "ccons ::= DEFAULT PLUS term",
 /*  72 */ "ccons ::= DEFAULT MINUS term",
 /*  73 */ "ccons ::= DEFAULT id",
 /*  74 */ "ccons ::= DEFAULT CTIME_KW",
 /*  75 */ "ccons ::= NULL onconf",
 /*  76 */ "ccons ::= NOT NULL onconf",
 /*  77 */ "ccons ::= PRIMARY KEY sortorder onconf autoinc",
 /*  78 */ "ccons ::= UNIQUE onconf",
 /*  79 */ "ccons ::= CHECK LP expr RP",
 /*  80 */ "ccons ::= REFERENCES nm idxlist_opt refargs",
 /*  81 */ "ccons ::= defer_subclause",
 /*  82 */ "ccons ::= COLLATE ids",
 /*  83 */ "ccons ::= gen_always AS LP expr RP id_opt",
 /*  84 */ "ccons ::= CONSTRAINT ID_CONSTR",
 /*  85 */ "ccons ::= COLLATE ID_COLLATE",
 /*  86 */ "ccons ::= REFERENCES ID_TAB",
 /*  87 */ "ccons ::= CHECK LP RP",
 /*  88 */ "term ::= NULL",
 /*  89 */ "term ::= INTEGER",
 /*  90 */ "term ::= FLOAT",
 /*  91 */ "term ::= STRING|BLOB",
 /*  92 */ "tnm ::= term",
 /*  93 */ "tnm ::= nm",
 /*  94 */ "gen_always ::= GENERATED ALWAYS",
 /*  95 */ "gen_always ::=",
 /*  96 */ "autoinc ::=",
 /*  97 */ "autoinc ::= AUTOINCR",
 /*  98 */ "refargs ::=",
 /*  99 */ "refargs ::= refargs refarg",
 /* 100 */ "refarg ::= MATCH nm",
 /* 101 */ "refarg ::= ON INSERT refact",
 /* 102 */ "refarg ::= ON DELETE refact",
 /* 103 */ "refarg ::= ON UPDATE refact",
 /* 104 */ "refarg ::= MATCH ID_FK_MATCH",
 /* 105 */ "refact ::= SET NULL",
 /* 106 */ "refact ::= SET DEFAULT",
 /* 107 */ "refact ::= CASCADE",
 /* 108 */ "refact ::= RESTRICT",
 /* 109 */ "refact ::= NO ACTION",
 /* 110 */ "defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt",
 /* 111 */ "defer_subclause ::= DEFERRABLE init_deferred_pred_opt",
 /* 112 */ "init_deferred_pred_opt ::=",
 /* 113 */ "init_deferred_pred_opt ::= INITIALLY DEFERRED",
 /* 114 */ "init_deferred_pred_opt ::= INITIALLY IMMEDIATE",
 /* 115 */ "conslist_opt ::=",
 /* 116 */ "conslist_opt ::= COMMA conslist",
 /* 117 */ "conslist ::= conslist tconscomma tcons",
 /* 118 */ "conslist ::= tcons",
 /* 119 */ "tconscomma ::= COMMA",
 /* 120 */ "tconscomma ::=",
 /* 121 */ "tcons ::= CONSTRAINT nm",
 /* 122 */ "tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf",
 /* 123 */ "tcons ::= UNIQUE LP idxlist RP onconf",
 /* 124 */ "tcons ::= CHECK LP expr RP onconf",
 /* 125 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt",
 /* 126 */ "tcons ::= CONSTRAINT ID_CONSTR",
 /* 127 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB",
 /* 128 */ "tcons ::= CHECK LP RP onconf",
 /* 129 */ "defer_subclause_opt ::=",
 /* 130 */ "defer_subclause_opt ::= defer_subclause",
 /* 131 */ "onconf ::=",
 /* 132 */ "onconf ::= ON CONFLICT resolvetype",
 /* 133 */ "orconf ::=",
 /* 134 */ "orconf ::= OR resolvetype",
 /* 135 */ "resolvetype ::= raisetype",
 /* 136 */ "resolvetype ::= IGNORE",
 /* 137 */ "resolvetype ::= REPLACE",
 /* 138 */ "cmd ::= DROP TABLE ifexists fullname",
 /* 139 */ "cmd ::= DROP TABLE ifexists nm DOT ID_TAB",
 /* 140 */ "cmd ::= DROP TABLE ifexists ID_DB|ID_TAB",
 /* 141 */ "ifexists ::= IF EXISTS",
 /* 142 */ "ifexists ::=",
 /* 143 */ "cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select",
 /* 144 */ "cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW",
 /* 145 */ "cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW",
 /* 146 */ "cmd ::= DROP VIEW ifexists fullname",
 /* 147 */ "cmd ::= DROP VIEW ifexists nm DOT ID_VIEW",
 /* 148 */ "cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW",
 /* 149 */ "cmd ::= select_stmt",
 /* 150 */ "select_stmt ::= select",
 /* 151 */ "select ::= with selectnowith",
 /* 152 */ "selectnowith ::= oneselect",
 /* 153 */ "selectnowith ::= selectnowith multiselect_op oneselect",
 /* 154 */ "selectnowith ::= values",
 /* 155 */ "selectnowith ::= selectnowith COMMA values",
 /* 156 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt",
 /* 157 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt",
 /* 158 */ "values ::= VALUES LP nexprlist RP",
 /* 159 */ "values ::= values COMMA LP exprlist RP",
 /* 160 */ "multiselect_op ::= UNION",
 /* 161 */ "multiselect_op ::= UNION ALL",
 /* 162 */ "multiselect_op ::= EXCEPT",
 /* 163 */ "multiselect_op ::= INTERSECT",
 /* 164 */ "distinct ::= DISTINCT",
 /* 165 */ "distinct ::= ALL",
 /* 166 */ "distinct ::=",
 /* 167 */ "sclp ::= selcollist COMMA",
 /* 168 */ "sclp ::=",
 /* 169 */ "selcollist ::= sclp expr as",
 /* 170 */ "selcollist ::= sclp STAR",
 /* 171 */ "selcollist ::= sclp tnm DOT STAR",
 /* 172 */ "selcollist ::= sclp",
 /* 173 */ "selcollist ::= sclp ID_TAB DOT STAR",
 /* 174 */ "as ::= AS nm",
 /* 175 */ "as ::= ids",
 /* 176 */ "as ::= AS ID_ALIAS",
 /* 177 */ "as ::= ID_ALIAS",
 /* 178 */ "as ::=",
 /* 179 */ "from ::=",
 /* 180 */ "from ::= FROM joinsrc",
 /* 181 */ "joinsrc ::= singlesrc seltablist",
 /* 182 */ "joinsrc ::=",
 /* 183 */ "seltablist ::= seltablist joinop singlesrc joinconstr_opt",
 /* 184 */ "seltablist ::=",
 /* 185 */ "singlesrc ::= nm dbnm as indexed_opt",
 /* 186 */ "singlesrc ::= LP select RP as",
 /* 187 */ "singlesrc ::= LP joinsrc RP as",
 /* 188 */ "singlesrc ::= nm dbnm LP exprlist RP as",
 /* 189 */ "singlesrc ::=",
 /* 190 */ "singlesrc ::= nm DOT",
 /* 191 */ "singlesrc ::= nm DOT ID_TAB",
 /* 192 */ "singlesrc ::= ID_DB|ID_TAB",
 /* 193 */ "singlesrc ::= nm DOT ID_VIEW",
 /* 194 */ "singlesrc ::= ID_DB|ID_VIEW",
 /* 195 */ "joinconstr_opt ::= ON expr",
 /* 196 */ "joinconstr_opt ::= USING LP idlist RP",
 /* 197 */ "joinconstr_opt ::=",
 /* 198 */ "dbnm ::=",
 /* 199 */ "dbnm ::= DOT nm",
 /* 200 */ "fullname ::= nm dbnm",
 /* 201 */ "joinop ::= COMMA",
 /* 202 */ "joinop ::= JOIN",
 /* 203 */ "joinop ::= JOIN_KW JOIN",
 /* 204 */ "joinop ::= JOIN_KW nm JOIN",
 /* 205 */ "joinop ::= JOIN_KW nm nm JOIN",
 /* 206 */ "joinop ::= ID_JOIN_OPTS",
 /* 207 */ "indexed_opt ::=",
 /* 208 */ "indexed_opt ::= INDEXED BY nm",
 /* 209 */ "indexed_opt ::= NOT INDEXED",
 /* 210 */ "indexed_opt ::= INDEXED BY ID_IDX",
 /* 211 */ "orderby_opt ::=",
 /* 212 */ "orderby_opt ::= ORDER BY sortlist",
 /* 213 */ "sortlist ::= sortlist COMMA expr sortorder nulls",
 /* 214 */ "sortlist ::= expr sortorder nulls",
 /* 215 */ "sortorder ::= ASC",
 /* 216 */ "sortorder ::= DESC",
 /* 217 */ "sortorder ::=",
 /* 218 */ "nulls ::= NULLS FIRST",
 /* 219 */ "nulls ::= NULLS LAST",
 /* 220 */ "nulls ::=",
 /* 221 */ "groupby_opt ::=",
 /* 222 */ "groupby_opt ::= GROUP BY nexprlist",
 /* 223 */ "groupby_opt ::= GROUP BY",
 /* 224 */ "having_opt ::=",
 /* 225 */ "having_opt ::= HAVING expr",
 /* 226 */ "limit_opt ::=",
 /* 227 */ "limit_opt ::= LIMIT expr",
 /* 228 */ "limit_opt ::= LIMIT expr OFFSET expr",
 /* 229 */ "limit_opt ::= LIMIT expr COMMA expr",
 /* 230 */ "cmd ::= delete_stmt",
 /* 231 */ "delete_stmt ::= with DELETE FROM fullname indexed_opt where_opt returning orderby_opt limit_opt",
 /* 232 */ "delete_stmt ::= with DELETE FROM",
 /* 233 */ "delete_stmt ::= with DELETE FROM nm DOT",
 /* 234 */ "delete_stmt ::= with DELETE FROM nm DOT ID_TAB",
 /* 235 */ "delete_stmt ::= with DELETE FROM ID_DB|ID_TAB",
 /* 236 */ "where_opt ::=",
 /* 237 */ "where_opt ::= WHERE expr",
 /* 238 */ "where_opt ::= WHERE",
 /* 239 */ "returning ::=",
 /* 240 */ "returning ::= RETURNING selcollist",
 /* 241 */ "cmd ::= update_stmt",
 /* 242 */ "update_stmt ::= with UPDATE orconf fullname indexed_opt SET setlist from where_opt returning orderby_opt limit_opt",
 /* 243 */ "update_stmt ::= with UPDATE orconf",
 /* 244 */ "update_stmt ::= with UPDATE orconf nm DOT",
 /* 245 */ "update_stmt ::= with UPDATE orconf nm DOT ID_TAB",
 /* 246 */ "update_stmt ::= with UPDATE orconf ID_DB|ID_TAB",
 /* 247 */ "setlist ::= setlist COMMA nm EQ expr",
 /* 248 */ "setlist ::= setlist COMMA LP idlist RP EQ expr",
 /* 249 */ "setlist ::= nm EQ expr",
 /* 250 */ "setlist ::= LP idlist RP EQ expr",
 /* 251 */ "setlist ::=",
 /* 252 */ "setlist ::= setlist COMMA",
 /* 253 */ "setlist ::= setlist COMMA ID_COL",
 /* 254 */ "setlist ::= ID_COL",
 /* 255 */ "idlist_opt ::=",
 /* 256 */ "idlist_opt ::= LP idlist RP",
 /* 257 */ "idlist ::= idlist COMMA nm",
 /* 258 */ "idlist ::= nm",
 /* 259 */ "idlist ::=",
 /* 260 */ "idlist ::= idlist COMMA ID_COL",
 /* 261 */ "idlist ::= ID_COL",
 /* 262 */ "cmd ::= insert_stmt",
 /* 263 */ "insert_stmt ::= with insert_cmd INTO fullname idlist_opt select upsert returning",
 /* 264 */ "insert_stmt ::= with insert_cmd INTO fullname idlist_opt DEFAULT VALUES returning",
 /* 265 */ "insert_stmt ::= with insert_cmd INTO fullname LP idlist rp_opt",
 /* 266 */ "insert_stmt ::= with insert_cmd INTO",
 /* 267 */ "insert_stmt ::= with insert_cmd INTO nm DOT",
 /* 268 */ "insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB",
 /* 269 */ "insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB",
 /* 270 */ "insert_cmd ::= INSERT orconf",
 /* 271 */ "insert_cmd ::= REPLACE",
 /* 272 */ "upsert ::=",
 /* 273 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt",
 /* 274 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING",
 /* 275 */ "upsert ::= ON CONFLICT DO NOTHING",
 /* 276 */ "exprx ::= expr not_opt IN ID_DB",
 /* 277 */ "exprx ::= expr not_opt IN nm DOT ID_TAB",
 /* 278 */ "exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN",
 /* 279 */ "exprx ::= tnm DOT ID_TAB|ID_COL",
 /* 280 */ "exprx ::= tnm DOT nm DOT ID_COL",
 /* 281 */ "exprx ::= expr COLLATE ID_COLLATE",
 /* 282 */ "exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP",
 /* 283 */ "exprx ::= CTIME_KW",
 /* 284 */ "exprx ::= LP nexprlist RP",
 /* 285 */ "exprx ::= tnm",
 /* 286 */ "exprx ::= tnm DOT nm",
 /* 287 */ "exprx ::= tnm DOT",
 /* 288 */ "exprx ::= tnm DOT nm DOT nm",
 /* 289 */ "exprx ::= tnm DOT nm DOT",
 /* 290 */ "exprx ::= VARIABLE",
 /* 291 */ "exprx ::= expr COLLATE ids",
 /* 292 */ "exprx ::= CAST LP expr AS typetoken RP",
 /* 293 */ "exprx ::= ID LP distinct exprlist RP",
 /* 294 */ "exprx ::= ID LP STAR RP",
 /* 295 */ "exprx ::= expr AND expr",
 /* 296 */ "exprx ::= expr OR expr",
 /* 297 */ "exprx ::= expr LT|GT|GE|LE expr",
 /* 298 */ "exprx ::= expr EQ|NE expr",
 /* 299 */ "exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr",
 /* 300 */ "exprx ::= expr PLUS|MINUS expr",
 /* 301 */ "exprx ::= expr STAR|SLASH|REM expr",
 /* 302 */ "exprx ::= expr CONCAT expr",
 /* 303 */ "exprx ::= expr not_opt likeop expr",
 /* 304 */ "exprx ::= expr not_opt likeop expr ESCAPE expr",
 /* 305 */ "exprx ::= expr ISNULL|NOTNULL",
 /* 306 */ "exprx ::= expr NOT NULL",
 /* 307 */ "exprx ::= expr IS not_opt expr",
 /* 308 */ "exprx ::= expr IS NOT DISTINCT FROM expr",
 /* 309 */ "exprx ::= expr IS DISTINCT FROM expr",
 /* 310 */ "exprx ::= NOT expr",
 /* 311 */ "exprx ::= BITNOT expr",
 /* 312 */ "exprx ::= MINUS expr",
 /* 313 */ "exprx ::= PLUS expr",
 /* 314 */ "exprx ::= expr PTR expr",
 /* 315 */ "exprx ::= expr not_opt BETWEEN expr AND expr",
 /* 316 */ "exprx ::= expr not_opt IN LP exprlist RP",
 /* 317 */ "exprx ::= LP select RP",
 /* 318 */ "exprx ::= expr not_opt IN LP select RP",
 /* 319 */ "exprx ::= expr not_opt IN nm dbnm",
 /* 320 */ "exprx ::= EXISTS LP select RP",
 /* 321 */ "exprx ::= CASE case_operand case_exprlist case_else END",
 /* 322 */ "exprx ::= RAISE LP IGNORE RP",
 /* 323 */ "exprx ::= RAISE LP raisetype COMMA nm RP",
 /* 324 */ "exprx ::= ID LP distinct exprlist RP filter_over",
 /* 325 */ "exprx ::= ID LP STAR RP filter_over",
 /* 326 */ "expr ::=",
 /* 327 */ "expr ::= exprx",
 /* 328 */ "not_opt ::=",
 /* 329 */ "not_opt ::= NOT",
 /* 330 */ "rp_opt ::=",
 /* 331 */ "rp_opt ::= RP",
 /* 332 */ "likeop ::= LIKE_KW|MATCH",
 /* 333 */ "case_exprlist ::= case_exprlist WHEN expr THEN expr",
 /* 334 */ "case_exprlist ::= WHEN expr THEN expr",
 /* 335 */ "case_else ::= ELSE expr",
 /* 336 */ "case_else ::=",
 /* 337 */ "case_operand ::= exprx",
 /* 338 */ "case_operand ::=",
 /* 339 */ "exprlist ::= nexprlist",
 /* 340 */ "exprlist ::=",
 /* 341 */ "nexprlist ::= nexprlist COMMA expr",
 /* 342 */ "nexprlist ::= exprx",
 /* 343 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt",
 /* 344 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB",
 /* 345 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW",
 /* 346 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW",
 /* 347 */ "uniqueflag ::= UNIQUE",
 /* 348 */ "uniqueflag ::=",
 /* 349 */ "idxlist_opt ::=",
 /* 350 */ "idxlist_opt ::= LP idxlist RP",
 /* 351 */ "idxlist ::= idxlist COMMA idxlist_single",
 /* 352 */ "idxlist ::= idxlist_single",
 /* 353 */ "idxlist_single ::= nm collate sortorder",
 /* 354 */ "idxlist_single ::= ID_COL",
 /* 355 */ "collate ::=",
 /* 356 */ "collate ::= COLLATE ids",
 /* 357 */ "collate ::= COLLATE ID_COLLATE",
 /* 358 */ "cmd ::= DROP INDEX ifexists fullname",
 /* 359 */ "cmd ::= DROP INDEX ifexists nm DOT ID_IDX",
 /* 360 */ "cmd ::= DROP INDEX ifexists ID_DB|ID_IDX",
 /* 361 */ "cmd ::= VACUUM vinto",
 /* 362 */ "cmd ::= VACUUM nm vinto",
 /* 363 */ "vinto ::= INTO expr",
 /* 364 */ "vinto ::=",
 /* 365 */ "cmd ::= PRAGMA nm dbnm",
 /* 366 */ "cmd ::= PRAGMA nm dbnm EQ nmnum",
 /* 367 */ "cmd ::= PRAGMA nm dbnm LP nmnum RP",
 /* 368 */ "cmd ::= PRAGMA nm dbnm EQ minus_num",
 /* 369 */ "cmd ::= PRAGMA nm dbnm LP minus_num RP",
 /* 370 */ "cmd ::= PRAGMA nm DOT ID_PRAGMA",
 /* 371 */ "cmd ::= PRAGMA ID_DB|ID_PRAGMA",
 /* 372 */ "nmnum ::= plus_num",
 /* 373 */ "nmnum ::= nm",
 /* 374 */ "nmnum ::= ON",
 /* 375 */ "nmnum ::= DELETE",
 /* 376 */ "nmnum ::= DEFAULT",
 /* 377 */ "plus_num ::= PLUS number",
 /* 378 */ "plus_num ::= number",
 /* 379 */ "minus_num ::= MINUS number",
 /* 380 */ "number ::= INTEGER",
 /* 381 */ "number ::= FLOAT",
 /* 382 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END",
 /* 383 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause",
 /* 384 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list",
 /* 385 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB",
 /* 386 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW",
 /* 387 */ "cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW",
 /* 388 */ "trigger_time ::= BEFORE",
 /* 389 */ "trigger_time ::= AFTER",
 /* 390 */ "trigger_time ::= INSTEAD OF",
 /* 391 */ "trigger_time ::=",
 /* 392 */ "trigger_event ::= DELETE",
 /* 393 */ "trigger_event ::= INSERT",
 /* 394 */ "trigger_event ::= UPDATE",
 /* 395 */ "trigger_event ::= UPDATE OF idlist",
 /* 396 */ "foreach_clause ::=",
 /* 397 */ "foreach_clause ::= FOR EACH ROW",
 /* 398 */ "when_clause ::=",
 /* 399 */ "when_clause ::= WHEN expr",
 /* 400 */ "trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI",
 /* 401 */ "trigger_cmd_list ::= trigger_cmd SEMI",
 /* 402 */ "trigger_cmd_list ::= SEMI",
 /* 403 */ "trigger_cmd ::= update_stmt",
 /* 404 */ "trigger_cmd ::= insert_stmt",
 /* 405 */ "trigger_cmd ::= delete_stmt",
 /* 406 */ "trigger_cmd ::= select_stmt",
 /* 407 */ "raisetype ::= ROLLBACK|ABORT|FAIL",
 /* 408 */ "cmd ::= DROP TRIGGER ifexists fullname",
 /* 409 */ "cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG",
 /* 410 */ "cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG",
 /* 411 */ "cmd ::= ATTACH database_kw_opt expr AS expr key_opt",
 /* 412 */ "cmd ::= DETACH database_kw_opt expr",
 /* 413 */ "key_opt ::=",
 /* 414 */ "key_opt ::= KEY expr",
 /* 415 */ "database_kw_opt ::= DATABASE",
 /* 416 */ "database_kw_opt ::=",
 /* 417 */ "cmd ::= REINDEX",
 /* 418 */ "cmd ::= REINDEX nm dbnm",
 /* 419 */ "cmd ::= REINDEX ID_COLLATE",
 /* 420 */ "cmd ::= REINDEX nm DOT ID_TAB|ID_IDX",
 /* 421 */ "cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB",
 /* 422 */ "cmd ::= ANALYZE",
 /* 423 */ "cmd ::= ANALYZE nm dbnm",
 /* 424 */ "cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX",
 /* 425 */ "cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB",
 /* 426 */ "cmd ::= ALTER TABLE fullname RENAME TO nm",
 /* 427 */ "cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column",
 /* 428 */ "cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm",
 /* 429 */ "cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW",
 /* 430 */ "cmd ::= ALTER TABLE nm DOT ID_TAB",
 /* 431 */ "cmd ::= ALTER TABLE ID_DB|ID_TAB",
 /* 432 */ "kwcolumn_opt ::=",
 /* 433 */ "kwcolumn_opt ::= COLUMNKW",
 /* 434 */ "cmd ::= create_vtab",
 /* 435 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm",
 /* 436 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP",
 /* 437 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW",
 /* 438 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /* 439 */ "vtabarglist ::= vtabarg",
 /* 440 */ "vtabarglist ::= vtabarglist COMMA vtabarg",
 /* 441 */ "vtabarg ::=",
 /* 442 */ "vtabarg ::= vtabarg vtabargtoken",
 /* 443 */ "vtabargtoken ::= ANY",
 /* 444 */ "vtabargtoken ::= LP anylist RP",
 /* 445 */ "anylist ::=",
 /* 446 */ "anylist ::= anylist LP anylist RP",
 /* 447 */ "anylist ::= anylist ANY",
 /* 448 */ "with ::=",
 /* 449 */ "with ::= WITH wqlist",
 /* 450 */ "with ::= WITH RECURSIVE wqlist",
 /* 451 */ "wqas ::= AS",
 /* 452 */ "wqas ::= AS MATERIALIZED",
 /* 453 */ "wqas ::= AS NOT MATERIALIZED",
 /* 454 */ "wqlist ::= wqcte",
 /* 455 */ "wqlist ::= wqlist COMMA wqcte",
 /* 456 */ "wqlist ::= ID_TAB_NEW",
 /* 457 */ "wqcte ::= nm idxlist_opt wqas LP select RP",
 /* 458 */ "windowdefn_list ::= windowdefn",
 /* 459 */ "windowdefn_list ::= windowdefn_list COMMA windowdefn",
 /* 460 */ "windowdefn ::= nm AS LP window RP",
 /* 461 */ "window ::= PARTITION BY nexprlist orderby_opt frame_opt",
 /* 462 */ "window ::= nm PARTITION BY nexprlist orderby_opt frame_opt",
 /* 463 */ "window ::= ORDER BY sortlist frame_opt",
 /* 464 */ "window ::= nm ORDER BY sortlist frame_opt",
 /* 465 */ "window ::= frame_opt",
 /* 466 */ "window ::= nm frame_opt",
 /* 467 */ "frame_opt ::=",
 /* 468 */ "frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt",
 /* 469 */ "frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt",
 /* 470 */ "range_or_rows ::= RANGE|ROWS|GROUPS",
 /* 471 */ "frame_bound_s ::= frame_bound",
 /* 472 */ "frame_bound_s ::= UNBOUNDED PRECEDING",
 /* 473 */ "frame_bound_e ::= frame_bound",
 /* 474 */ "frame_bound_e ::= UNBOUNDED FOLLOWING",
 /* 475 */ "frame_bound ::= expr PRECEDING|FOLLOWING",
 /* 476 */ "frame_bound ::= CURRENT ROW",
 /* 477 */ "frame_exclude_opt ::=",
 /* 478 */ "frame_exclude_opt ::= EXCLUDE frame_exclude",
 /* 479 */ "frame_exclude ::= NO OTHERS",
 /* 480 */ "frame_exclude ::= CURRENT ROW",
 /* 481 */ "frame_exclude ::= GROUP",
 /* 482 */ "frame_exclude ::= TIES",
 /* 483 */ "window_clause ::= WINDOW windowdefn_list",
 /* 484 */ "filter_over ::= filter_clause over_clause",
 /* 485 */ "filter_over ::= over_clause",
 /* 486 */ "filter_over ::= filter_clause",
 /* 487 */ "over_clause ::= OVER LP window RP",
 /* 488 */ "over_clause ::= OVER nm",
 /* 489 */ "filter_clause ::= FILTER LP WHERE expr RP",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/*
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to sqlite3_parse and sqlite3_parseFree.
*/
void *sqlite3_parseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  sqlite3_parseARG_FETCH;
  if (parserContext->executeRules)
  {
      switch( yymajor ){
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
    case 195: /* cmd */
    case 198: /* ecmd */
    case 200: /* cmdx */
    case 248: /* select_stmt */
    case 277: /* delete_stmt */
    case 279: /* update_stmt */
    case 282: /* insert_stmt */
    case 304: /* trigger_cmd */
    case 308: /* create_vtab */
{
parser_safe_delete((yypminor->yy635));
}
      break;
    case 199: /* explain */
{
parser_safe_delete((yypminor->yy571));
}
      break;
    case 201: /* transtype */
    case 202: /* trans_opt */
{
parser_safe_delete((yypminor->yy100));
}
      break;
    case 203: /* nm */
    case 214: /* columnid */
    case 217: /* id */
    case 218: /* id_opt */
    case 219: /* ids */
    case 221: /* typename */
    case 272: /* dbnm */
    case 295: /* collate */
    case 310: /* vtabarg */
    case 311: /* vtabargtoken */
    case 312: /* anylist */
{
parser_safe_delete((yypminor->yy255));
}
      break;
    case 204: /* savepoint_opt */
    case 206: /* ifnotexists */
    case 230: /* autoinc */
    case 234: /* gen_always */
    case 240: /* tconscomma */
    case 247: /* ifexists */
    case 285: /* rp_opt */
    case 287: /* not_opt */
    case 293: /* uniqueflag */
    case 305: /* database_kw_opt */
    case 307: /* kwcolumn_opt */
{
parser_safe_delete((yypminor->yy35));
}
      break;
    case 205: /* temp */
    case 254: /* distinct */
{
parser_safe_delete((yypminor->yy562));
}
      break;
    case 207: /* fullname */
{
parser_safe_delete((yypminor->yy520));
}
      break;
    case 208: /* columnlist */
{
parser_safe_delete((yypminor->yy234));
}
      break;
    case 209: /* conslist_opt */
    case 239: /* conslist */
{
parser_safe_delete((yypminor->yy445));
}
      break;
    case 210: /* table_options */
{
parser_safe_delete((yypminor->yy217));
}
      break;
    case 211: /* select */
    case 250: /* selectnowith */
{
parser_safe_delete((yypminor->yy73));
}
      break;
    case 212: /* table_option */
{
parser_safe_delete((yypminor->yy607));
}
      break;
    case 213: /* column */
{
parser_safe_delete((yypminor->yy115));
}
      break;
    case 215: /* type */
    case 220: /* typetoken */
{
parser_safe_delete((yypminor->yy601));
}
      break;
    case 216: /* carglist */
{
parser_safe_delete((yypminor->yy259));
}
      break;
    case 222: /* signed */
    case 223: /* plus_num */
    case 224: /* minus_num */
    case 226: /* term */
    case 297: /* nmnum */
    case 298: /* number */
{
parser_safe_delete((yypminor->yy629));
}
      break;
    case 225: /* ccons */
{
parser_safe_delete((yypminor->yy64));
}
      break;
    case 227: /* expr */
    case 257: /* where_opt */
    case 259: /* having_opt */
    case 286: /* exprx */
    case 289: /* case_operand */
    case 291: /* case_else */
    case 296: /* vinto */
    case 302: /* when_clause */
    case 306: /* key_opt */
{
parser_safe_delete((yypminor->yy176));
}
      break;
    case 228: /* onconf */
    case 244: /* resolvetype */
    case 245: /* orconf */
{
parser_safe_delete((yypminor->yy66));
}
      break;
    case 229: /* sortorder */
{
parser_safe_delete((yypminor->yy645));
}
      break;
    case 231: /* idxlist_opt */
    case 242: /* idxlist */
{
parser_safe_delete((yypminor->yy527));
}
      break;
    case 232: /* refargs */
{
parser_safe_delete((yypminor->yy56));
}
      break;
    case 233: /* defer_subclause */
    case 243: /* defer_subclause_opt */
{
parser_safe_delete((yypminor->yy218));
}
      break;
    case 235: /* tnm */
{
parser_safe_delete((yypminor->yy542));
}
      break;
    case 236: /* refarg */
{
parser_safe_delete((yypminor->yy587));
}
      break;
    case 237: /* refact */
{
parser_safe_delete((yypminor->yy488));
}
      break;
    case 238: /* init_deferred_pred_opt */
{
parser_safe_delete((yypminor->yy536));
}
      break;
    case 241: /* tcons */
{
parser_safe_delete((yypminor->yy166));
}
      break;
    case 249: /* with */
{
parser_safe_delete((yypminor->yy321));
}
      break;
    case 251: /* oneselect */
{
parser_safe_delete((yypminor->yy438));
}
      break;
    case 252: /* multiselect_op */
{
parser_safe_delete((yypminor->yy574));
}
      break;
    case 253: /* values */
{
parser_safe_delete((yypminor->yy54));
}
      break;
    case 255: /* selcollist */
    case 265: /* sclp */
    case 278: /* returning */
{
parser_safe_delete((yypminor->yy421));
}
      break;
    case 256: /* from */
    case 267: /* joinsrc */
{
parser_safe_delete((yypminor->yy335));
}
      break;
    case 258: /* groupby_opt */
    case 263: /* nexprlist */
    case 264: /* exprlist */
    case 290: /* case_exprlist */
{
parser_safe_delete((yypminor->yy567));
}
      break;
    case 260: /* orderby_opt */
    case 275: /* sortlist */
{
parser_safe_delete((yypminor->yy499));
}
      break;
    case 261: /* limit_opt */
{
parser_safe_delete((yypminor->yy4));
}
      break;
    case 262: /* window_clause */
    case 316: /* windowdefn_list */
{
parser_safe_delete((yypminor->yy555));
}
      break;
    case 266: /* as */
{
parser_safe_delete((yypminor->yy280));
}
      break;
    case 268: /* singlesrc */
{
parser_safe_delete((yypminor->yy393));
}
      break;
    case 269: /* seltablist */
{
parser_safe_delete((yypminor->yy195));
}
      break;
    case 270: /* joinop */
{
parser_safe_delete((yypminor->yy461));
}
      break;
    case 271: /* joinconstr_opt */
{
parser_safe_delete((yypminor->yy423));
}
      break;
    case 273: /* indexed_opt */
{
parser_safe_delete((yypminor->yy224));
}
      break;
    case 274: /* idlist */
    case 281: /* idlist_opt */
    case 309: /* vtabarglist */
{
parser_safe_delete((yypminor->yy336));
}
      break;
    case 276: /* nulls */
{
parser_safe_delete((yypminor->yy99));
}
      break;
    case 280: /* setlist */
{
parser_safe_delete((yypminor->yy617));
}
      break;
    case 283: /* insert_cmd */
{
parser_safe_delete((yypminor->yy281));
}
      break;
    case 284: /* upsert */
{
parser_safe_delete((yypminor->yy16));
}
      break;
    case 288: /* likeop */
{
parser_safe_delete((yypminor->yy104));
}
      break;
    case 292: /* filter_over */
{
parser_safe_delete((yypminor->yy487));
}
      break;
    case 294: /* idxlist_single */
{
parser_safe_delete((yypminor->yy540));
}
      break;
    case 299: /* trigger_time */
{
parser_safe_delete((yypminor->yy612));
}
      break;
    case 300: /* trigger_event */
{
parser_safe_delete((yypminor->yy407));
}
      break;
    case 301: /* foreach_clause */
{
parser_safe_delete((yypminor->yy403));
}
      break;
    case 303: /* trigger_cmd_list */
{
parser_safe_delete((yypminor->yy575));
}
      break;
    case 313: /* wqlist */
{
parser_safe_delete((yypminor->yy17));
}
      break;
    case 314: /* wqas */
{
parser_safe_delete((yypminor->yy383));
}
      break;
    case 315: /* wqcte */
{
parser_safe_delete((yypminor->yy366));
}
      break;
    case 317: /* windowdefn */
{
parser_safe_delete((yypminor->yy74));
}
      break;
    case 318: /* window */
{
parser_safe_delete((yypminor->yy14));
}
      break;
    case 319: /* frame_opt */
{
parser_safe_delete((yypminor->yy585));
}
      break;
    case 320: /* range_or_rows */
{
parser_safe_delete((yypminor->yy34));
}
      break;
    case 321: /* frame_bound_s */
    case 323: /* frame_bound_e */
{
parser_safe_delete((yypminor->yy394));
}
      break;
    case 324: /* frame_bound */
{
parser_safe_delete((yypminor->yy394));parser_safe_delete((yypminor->yy394));parser_safe_delete((yypminor->yy394));
}
      break;
    case 326: /* filter_clause */
{
parser_safe_delete((yypminor->yy269));
}
      break;
    case 327: /* over_clause */
{
parser_safe_delete((yypminor->yy231));
}
      break;
        default:  break;   /* If no destructor action specified: do nothing */
      }
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  /* There is no mechanism by which the parser stack can be popped below
  ** empty in SQLite.  */
  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  delete yytos->tokens;
  yytos->tokens = nullptr;
  pParser->yyidx--;
  return yymajor;
}

/*
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from sqlite3_parseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void sqlite3_parseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  /* In SQLite, we never try to destroy a parser that was not successfully
  ** created in the first place. */
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int sqlite3_parseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
  GET_CONTEXT;

  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0
             && parserContext->doFallbacks ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if(
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   UNUSED(yypMinor);
   sqlite3_parseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */

    parserContext->error(QObject::tr("Parser stack overflow"));
   sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
  yytos->tokens = new QList<Token*>();
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 196, 1 },
  { 197, 2 },
  { 197, 1 },
  { 198, 1 },
  { 198, 3 },
  { 199, 0 },
  { 199, 1 },
  { 199, 3 },
  { 200, 1 },
  { 195, 3 },
  { 202, 0 },
  { 202, 1 },
  { 202, 2 },
  { 202, 2 },
  { 201, 0 },
  { 201, 1 },
  { 201, 1 },
  { 201, 1 },
  { 195, 2 },
  { 195, 2 },
  { 195, 2 },
  { 204, 1 },
  { 204, 0 },
  { 195, 2 },
  { 195, 3 },
  { 195, 5 },
  { 195, 2 },
  { 195, 3 },
  { 195, 5 },
  { 195, 10 },
  { 195, 7 },
  { 195, 7 },
  { 195, 5 },
  { 210, 0 },
  { 210, 1 },
  { 210, 3 },
  { 212, 2 },
  { 212, 1 },
  { 212, 2 },
  { 212, 1 },
  { 206, 0 },
  { 206, 3 },
  { 205, 1 },
  { 205, 0 },
  { 208, 3 },
  { 208, 1 },
  { 213, 3 },
  { 214, 1 },
  { 214, 1 },
  { 217, 1 },
  { 218, 1 },
  { 218, 0 },
  { 219, 1 },
  { 203, 1 },
  { 203, 1 },
  { 203, 1 },
  { 215, 0 },
  { 215, 1 },
  { 220, 1 },
  { 220, 4 },
  { 220, 6 },
  { 221, 1 },
  { 221, 2 },
  { 221, 1 },
  { 222, 1 },
  { 222, 1 },
  { 216, 2 },
  { 216, 0 },
  { 225, 2 },
  { 225, 2 },
  { 225, 4 },
  { 225, 3 },
  { 225, 3 },
  { 225, 2 },
  { 225, 2 },
  { 225, 2 },
  { 225, 3 },
  { 225, 5 },
  { 225, 2 },
  { 225, 4 },
  { 225, 4 },
  { 225, 1 },
  { 225, 2 },
  { 225, 6 },
  { 225, 2 },
  { 225, 2 },
  { 225, 2 },
  { 225, 3 },
  { 226, 1 },
  { 226, 1 },
  { 226, 1 },
  { 226, 1 },
  { 235, 1 },
  { 235, 1 },
  { 234, 2 },
  { 234, 0 },
  { 230, 0 },
  { 230, 1 },
  { 232, 0 },
  { 232, 2 },
  { 236, 2 },
  { 236, 3 },
  { 236, 3 },
  { 236, 3 },
  { 236, 2 },
  { 237, 2 },
  { 237, 2 },
  { 237, 1 },
  { 237, 1 },
  { 237, 2 },
  { 233, 3 },
  { 233, 2 },
  { 238, 0 },
  { 238, 2 },
  { 238, 2 },
  { 209, 0 },
  { 209, 2 },
  { 239, 3 },
  { 239, 1 },
  { 240, 1 },
  { 240, 0 },
  { 241, 2 },
  { 241, 7 },
  { 241, 5 },
  { 241, 5 },
  { 241, 10 },
  { 241, 2 },
  { 241, 7 },
  { 241, 4 },
  { 243, 0 },
  { 243, 1 },
  { 228, 0 },
  { 228, 3 },
  { 245, 0 },
  { 245, 2 },
  { 244, 1 },
  { 244, 1 },
  { 244, 1 },
  { 195, 4 },
  { 195, 6 },
  { 195, 4 },
  { 247, 2 },
  { 247, 0 },
  { 195, 8 },
  { 195, 7 },
  { 195, 5 },
  { 195, 4 },
  { 195, 6 },
  { 195, 4 },
  { 195, 1 },
  { 248, 1 },
  { 211, 2 },
  { 250, 1 },
  { 250, 3 },
  { 250, 1 },
  { 250, 3 },
  { 251, 9 },
  { 251, 10 },
  { 253, 4 },
  { 253, 5 },
  { 252, 1 },
  { 252, 2 },
  { 252, 1 },
  { 252, 1 },
  { 254, 1 },
  { 254, 1 },
  { 254, 0 },
  { 265, 2 },
  { 265, 0 },
  { 255, 3 },
  { 255, 2 },
  { 255, 4 },
  { 255, 1 },
  { 255, 4 },
  { 266, 2 },
  { 266, 1 },
  { 266, 2 },
  { 266, 1 },
  { 266, 0 },
  { 256, 0 },
  { 256, 2 },
  { 267, 2 },
  { 267, 0 },
  { 269, 4 },
  { 269, 0 },
  { 268, 4 },
  { 268, 4 },
  { 268, 4 },
  { 268, 6 },
  { 268, 0 },
  { 268, 2 },
  { 268, 3 },
  { 268, 1 },
  { 268, 3 },
  { 268, 1 },
  { 271, 2 },
  { 271, 4 },
  { 271, 0 },
  { 272, 0 },
  { 272, 2 },
  { 207, 2 },
  { 270, 1 },
  { 270, 1 },
  { 270, 2 },
  { 270, 3 },
  { 270, 4 },
  { 270, 1 },
  { 273, 0 },
  { 273, 3 },
  { 273, 2 },
  { 273, 3 },
  { 260, 0 },
  { 260, 3 },
  { 275, 5 },
  { 275, 3 },
  { 229, 1 },
  { 229, 1 },
  { 229, 0 },
  { 276, 2 },
  { 276, 2 },
  { 276, 0 },
  { 258, 0 },
  { 258, 3 },
  { 258, 2 },
  { 259, 0 },
  { 259, 2 },
  { 261, 0 },
  { 261, 2 },
  { 261, 4 },
  { 261, 4 },
  { 195, 1 },
  { 277, 9 },
  { 277, 3 },
  { 277, 5 },
  { 277, 6 },
  { 277, 4 },
  { 257, 0 },
  { 257, 2 },
  { 257, 1 },
  { 278, 0 },
  { 278, 2 },
  { 195, 1 },
  { 279, 12 },
  { 279, 3 },
  { 279, 5 },
  { 279, 6 },
  { 279, 4 },
  { 280, 5 },
  { 280, 7 },
  { 280, 3 },
  { 280, 5 },
  { 280, 0 },
  { 280, 2 },
  { 280, 3 },
  { 280, 1 },
  { 281, 0 },
  { 281, 3 },
  { 274, 3 },
  { 274, 1 },
  { 274, 0 },
  { 274, 3 },
  { 274, 1 },
  { 195, 1 },
  { 282, 8 },
  { 282, 8 },
  { 282, 7 },
  { 282, 3 },
  { 282, 5 },
  { 282, 4 },
  { 282, 6 },
  { 283, 2 },
  { 283, 1 },
  { 284, 0 },
  { 284, 11 },
  { 284, 8 },
  { 284, 4 },
  { 286, 4 },
  { 286, 6 },
  { 286, 1 },
  { 286, 3 },
  { 286, 5 },
  { 286, 3 },
  { 286, 6 },
  { 286, 1 },
  { 286, 3 },
  { 286, 1 },
  { 286, 3 },
  { 286, 2 },
  { 286, 5 },
  { 286, 4 },
  { 286, 1 },
  { 286, 3 },
  { 286, 6 },
  { 286, 5 },
  { 286, 4 },
  { 286, 3 },
  { 286, 3 },
  { 286, 3 },
  { 286, 3 },
  { 286, 3 },
  { 286, 3 },
  { 286, 3 },
  { 286, 3 },
  { 286, 4 },
  { 286, 6 },
  { 286, 2 },
  { 286, 3 },
  { 286, 4 },
  { 286, 6 },
  { 286, 5 },
  { 286, 2 },
  { 286, 2 },
  { 286, 2 },
  { 286, 2 },
  { 286, 3 },
  { 286, 6 },
  { 286, 6 },
  { 286, 3 },
  { 286, 6 },
  { 286, 5 },
  { 286, 4 },
  { 286, 5 },
  { 286, 4 },
  { 286, 6 },
  { 286, 6 },
  { 286, 5 },
  { 227, 0 },
  { 227, 1 },
  { 287, 0 },
  { 287, 1 },
  { 285, 0 },
  { 285, 1 },
  { 288, 1 },
  { 290, 5 },
  { 290, 4 },
  { 291, 2 },
  { 291, 0 },
  { 289, 1 },
  { 289, 0 },
  { 264, 1 },
  { 264, 0 },
  { 263, 3 },
  { 263, 1 },
  { 195, 12 },
  { 195, 8 },
  { 195, 7 },
  { 195, 5 },
  { 293, 1 },
  { 293, 0 },
  { 231, 0 },
  { 231, 3 },
  { 242, 3 },
  { 242, 1 },
  { 294, 3 },
  { 294, 1 },
  { 295, 0 },
  { 295, 2 },
  { 295, 2 },
  { 195, 4 },
  { 195, 6 },
  { 195, 4 },
  { 195, 2 },
  { 195, 3 },
  { 296, 2 },
  { 296, 0 },
  { 195, 3 },
  { 195, 5 },
  { 195, 6 },
  { 195, 5 },
  { 195, 6 },
  { 195, 4 },
  { 195, 2 },
  { 297, 1 },
  { 297, 1 },
  { 297, 1 },
  { 297, 1 },
  { 297, 1 },
  { 223, 2 },
  { 223, 1 },
  { 224, 2 },
  { 298, 1 },
  { 298, 1 },
  { 195, 15 },
  { 195, 12 },
  { 195, 14 },
  { 195, 10 },
  { 195, 7 },
  { 195, 5 },
  { 299, 1 },
  { 299, 1 },
  { 299, 2 },
  { 299, 0 },
  { 300, 1 },
  { 300, 1 },
  { 300, 1 },
  { 300, 3 },
  { 301, 0 },
  { 301, 3 },
  { 302, 0 },
  { 302, 2 },
  { 303, 3 },
  { 303, 2 },
  { 303, 1 },
  { 304, 1 },
  { 304, 1 },
  { 304, 1 },
  { 304, 1 },
  { 246, 1 },
  { 195, 4 },
  { 195, 6 },
  { 195, 4 },
  { 195, 6 },
  { 195, 3 },
  { 306, 0 },
  { 306, 2 },
  { 305, 1 },
  { 305, 0 },
  { 195, 1 },
  { 195, 3 },
  { 195, 2 },
  { 195, 4 },
  { 195, 2 },
  { 195, 1 },
  { 195, 3 },
  { 195, 4 },
  { 195, 2 },
  { 195, 6 },
  { 195, 6 },
  { 195, 6 },
  { 195, 6 },
  { 195, 5 },
  { 195, 3 },
  { 307, 0 },
  { 307, 1 },
  { 195, 1 },
  { 308, 8 },
  { 308, 11 },
  { 308, 7 },
  { 308, 5 },
  { 309, 1 },
  { 309, 3 },
  { 310, 0 },
  { 310, 2 },
  { 311, 1 },
  { 311, 3 },
  { 312, 0 },
  { 312, 4 },
  { 312, 2 },
  { 249, 0 },
  { 249, 2 },
  { 249, 3 },
  { 314, 1 },
  { 314, 2 },
  { 314, 3 },
  { 313, 1 },
  { 313, 3 },
  { 313, 1 },
  { 315, 6 },
  { 316, 1 },
  { 316, 3 },
  { 317, 5 },
  { 318, 5 },
  { 318, 6 },
  { 318, 4 },
  { 318, 5 },
  { 318, 1 },
  { 318, 2 },
  { 319, 0 },
  { 319, 3 },
  { 319, 6 },
  { 320, 1 },
  { 321, 1 },
  { 321, 2 },
  { 323, 1 },
  { 323, 2 },
  { 324, 2 },
  { 324, 2 },
  { 322, 0 },
  { 322, 2 },
  { 325, 2 },
  { 325, 2 },
  { 325, 1 },
  { 325, 1 },
  { 262, 2 },
  { 292, 2 },
  { 292, 1 },
  { 292, 1 },
  { 327, 4 },
  { 327, 2 },
  { 326, 5 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  sqlite3_parseARG_FETCH;
  SqliteStatement* objectForTokens = 0;
  QStringList noTokenInheritanceFields;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  if (parserContext->executeRules)
  {
      switch( yyruleno ){
      /* Beginning here are the reduction cases.  A typical example
      ** follows:
      **   case 0:
      **  #line <lineno> <grammarfile>
      **     { ... }           // User supplied code
      **  #line <lineno> <thisfile>
      **     break;
      */
      case 1: /* cmdlist ::= cmdlist ecmd */
{parserContext->addQuery(yymsp[0].minor.yy635); DONT_INHERIT_TOKENS("cmdlist");}
        break;
      case 2: /* cmdlist ::= ecmd */
{parserContext->addQuery(yymsp[0].minor.yy635);}
        break;
      case 3: /* ecmd ::= SEMI */
{yygotominor.yy635 = new SqliteEmptyQuery();}
        break;
      case 4: /* ecmd ::= explain cmdx SEMI */
{
                                                yygotominor.yy635 = yymsp[-1].minor.yy635;
                                                yygotominor.yy635->explain = yymsp[-2].minor.yy571->explain;
                                                yygotominor.yy635->queryPlan = yymsp[-2].minor.yy571->queryPlan;
                                                delete yymsp[-2].minor.yy571;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 5: /* explain ::= */
{yygotominor.yy571 = new ParserStubExplain(false, false);}
        break;
      case 6: /* explain ::= EXPLAIN */
{yygotominor.yy571 = new ParserStubExplain(true, false);}
        break;
      case 7: /* explain ::= EXPLAIN QUERY PLAN */
{yygotominor.yy571 = new ParserStubExplain(true, true);}
        break;
      case 8: /* cmdx ::= cmd */
      case 403: /* trigger_cmd ::= update_stmt */ yytestcase(yyruleno==403);
      case 404: /* trigger_cmd ::= insert_stmt */ yytestcase(yyruleno==404);
      case 405: /* trigger_cmd ::= delete_stmt */ yytestcase(yyruleno==405);
      case 406: /* trigger_cmd ::= select_stmt */ yytestcase(yyruleno==406);
      case 434: /* cmd ::= create_vtab */ yytestcase(yyruleno==434);
{yygotominor.yy635 = yymsp[0].minor.yy635;}
        break;
      case 9: /* cmd ::= BEGIN transtype trans_opt */
{
                                                yygotominor.yy635 = new SqliteBeginTrans(
                                                        yymsp[-1].minor.yy100->type,
                                                        yymsp[0].minor.yy100->transactionKw,
                                                        yymsp[0].minor.yy100->name
                                                    );
                                                delete yymsp[0].minor.yy100;
                                                delete yymsp[-1].minor.yy100;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 10: /* trans_opt ::= */
      case 14: /* transtype ::= */ yytestcase(yyruleno==14);
{yygotominor.yy100 = new ParserStubTransDetails();}
        break;
      case 11: /* trans_opt ::= TRANSACTION */
{
                                                yygotominor.yy100 = new ParserStubTransDetails();
                                                yygotominor.yy100->transactionKw = true;
                                            }
        break;
      case 12: /* trans_opt ::= TRANSACTION nm */
      case 13: /* trans_opt ::= TRANSACTION ID_TRANS */ yytestcase(yyruleno==13);
{
                                                yygotominor.yy100 = new ParserStubTransDetails();
                                                yygotominor.yy100->transactionKw = true;
                                                yygotominor.yy100->name = *(yymsp[0].minor.yy255);
                                                delete yymsp[0].minor.yy255;
                                            }
        break;
      case 15: /* transtype ::= DEFERRED */
{
                                                yygotominor.yy100 = new ParserStubTransDetails();
                                                yygotominor.yy100->type = SqliteBeginTrans::Type::DEFERRED;
                                            }
        break;
      case 16: /* transtype ::= IMMEDIATE */
{
                                                yygotominor.yy100 = new ParserStubTransDetails();
                                                yygotominor.yy100->type = SqliteBeginTrans::Type::IMMEDIATE;
                                            }
        break;
      case 17: /* transtype ::= EXCLUSIVE */
{
                                                yygotominor.yy100 = new ParserStubTransDetails();
                                                yygotominor.yy100->type = SqliteBeginTrans::Type::EXCLUSIVE;
                                            }
        break;
      case 18: /* cmd ::= COMMIT trans_opt */
{
                                                yygotominor.yy635 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy100->transactionKw,
                                                        yymsp[0].minor.yy100->name,
                                                        false
                                                    );
                                                delete yymsp[0].minor.yy100;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 19: /* cmd ::= END trans_opt */
{
                                                yygotominor.yy635 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy100->transactionKw,
                                                        yymsp[0].minor.yy100->name,
                                                        true
                                                    );
                                                delete yymsp[0].minor.yy100;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 20: /* cmd ::= ROLLBACK trans_opt */
{
                                                yygotominor.yy635 = new SqliteRollback(
                                                        yymsp[0].minor.yy100->transactionKw,
                                                        yymsp[0].minor.yy100->name
                                                    );
                                                delete yymsp[0].minor.yy100;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 21: /* savepoint_opt ::= SAVEPOINT */
      case 41: /* ifnotexists ::= IF NOT EXISTS */ yytestcase(yyruleno==41);
      case 94: /* gen_always ::= GENERATED ALWAYS */ yytestcase(yyruleno==94);
      case 97: /* autoinc ::= AUTOINCR */ yytestcase(yyruleno==97);
      case 119: /* tconscomma ::= COMMA */ yytestcase(yyruleno==119);
      case 141: /* ifexists ::= IF EXISTS */ yytestcase(yyruleno==141);
      case 329: /* not_opt ::= NOT */ yytestcase(yyruleno==329);
      case 331: /* rp_opt ::= RP */ yytestcase(yyruleno==331);
      case 347: /* uniqueflag ::= UNIQUE */ yytestcase(yyruleno==347);
      case 415: /* database_kw_opt ::= DATABASE */ yytestcase(yyruleno==415);
      case 432: /* kwcolumn_opt ::= */ yytestcase(yyruleno==432);
{yygotominor.yy35 = new bool(true);}
        break;
      case 22: /* savepoint_opt ::= */
      case 40: /* ifnotexists ::= */ yytestcase(yyruleno==40);
      case 95: /* gen_always ::= */ yytestcase(yyruleno==95);
      case 96: /* autoinc ::= */ yytestcase(yyruleno==96);
      case 120: /* tconscomma ::= */ yytestcase(yyruleno==120);
      case 142: /* ifexists ::= */ yytestcase(yyruleno==142);
      case 328: /* not_opt ::= */ yytestcase(yyruleno==328);
      case 330: /* rp_opt ::= */ yytestcase(yyruleno==330);
      case 348: /* uniqueflag ::= */ yytestcase(yyruleno==348);
      case 416: /* database_kw_opt ::= */ yytestcase(yyruleno==416);
      case 433: /* kwcolumn_opt ::= COLUMNKW */ yytestcase(yyruleno==433);
{yygotominor.yy35 = new bool(false);}
        break;
      case 23: /* cmd ::= SAVEPOINT nm */
{
                                                yygotominor.yy635 = new SqliteSavepoint(*(yymsp[0].minor.yy255));
                                                delete yymsp[0].minor.yy255;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 24: /* cmd ::= RELEASE savepoint_opt nm */
{
                                                yygotominor.yy635 = new SqliteRelease(*(yymsp[-1].minor.yy35), *(yymsp[0].minor.yy255));
                                                delete yymsp[0].minor.yy255;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 25: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt nm */
      case 26: /* cmd ::= SAVEPOINT ID_TRANS */ yytestcase(yyruleno==26);
{
                                                yygotominor.yy635 = new SqliteRollback(
                                                        yymsp[-3].minor.yy100->transactionKw,
                                                        *(yymsp[-1].minor.yy35),
                                                        *(yymsp[0].minor.yy255)
                                                    );
                                                delete yymsp[-1].minor.yy35;
                                                delete yymsp[-3].minor.yy100;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 27: /* cmd ::= RELEASE savepoint_opt ID_TRANS */
      case 28: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS */ yytestcase(yyruleno==28);
{  yy_destructor(yypParser,204,&yymsp[-1].minor);
}
        break;
      case 29: /* cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options */
{
                                                yygotominor.yy635 = new SqliteCreateTable(
                                                        *(yymsp[-6].minor.yy35),
                                                        *(yymsp[-8].minor.yy562),
                                                        yymsp[-5].minor.yy520->name1,
                                                        yymsp[-5].minor.yy520->name2,
                                                        *(yymsp[-3].minor.yy234),
                                                        *(yymsp[-2].minor.yy445),
                                                        *(yymsp[0].minor.yy217)
                                                    );
                                                delete yymsp[-6].minor.yy35;
                                                delete yymsp[-8].minor.yy562;
                                                delete yymsp[-3].minor.yy234;
                                                delete yymsp[-2].minor.yy445;
                                                delete yymsp[-5].minor.yy520;
                                                delete yymsp[0].minor.yy217;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 30: /* cmd ::= CREATE temp TABLE ifnotexists fullname AS select */
{
                                                yygotominor.yy635 = new SqliteCreateTable(
                                                        *(yymsp[-3].minor.yy35),
                                                        *(yymsp[-5].minor.yy562),
                                                        yymsp[-2].minor.yy520->name1,
                                                        yymsp[-2].minor.yy520->name2,
                                                        yymsp[0].minor.yy73
                                                    );
                                                delete yymsp[-3].minor.yy35;
                                                delete yymsp[-5].minor.yy562;
                                                delete yymsp[-2].minor.yy520;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 31: /* cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW */
      case 144: /* cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW */ yytestcase(yyruleno==144);
      case 386: /* cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW */ yytestcase(yyruleno==386);
{  yy_destructor(yypParser,205,&yymsp[-5].minor);
  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 32: /* cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW */
      case 145: /* cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW */ yytestcase(yyruleno==145);
      case 387: /* cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW */ yytestcase(yyruleno==387);
{  yy_destructor(yypParser,205,&yymsp[-3].minor);
}
        break;
      case 33: /* table_options ::= */
{yygotominor.yy217 = new ParserCreateTableOptionList();}
        break;
      case 34: /* table_options ::= table_option */
{
                                                yygotominor.yy217 = new ParserCreateTableOptionList();
                                                yygotominor.yy217->append(yymsp[0].minor.yy607);
                                            }
        break;
      case 35: /* table_options ::= table_options COMMA table_option */
{
                                                yymsp[-2].minor.yy217->append(yymsp[0].minor.yy607);
                                                yygotominor.yy217 = yymsp[-2].minor.yy217;
                                                DONT_INHERIT_TOKENS("table_options");
                                            }
        break;
      case 36: /* table_option ::= WITHOUT nm */
{
                                                if (yymsp[0].minor.yy255->toLower() != "rowid")
                                                    parserContext->errorAtToken(QString("Invalid table option: %1").arg(*(yymsp[0].minor.yy255)));

                                                yygotominor.yy607 = new ParserStubCreateTableOption(ParserStubCreateTableOption::WITHOUT_ROWID);
                                                delete yymsp[0].minor.yy255;
                                            }
        break;
      case 37: /* table_option ::= nm */
      case 38: /* table_option ::= WITHOUT CTX_ROWID_KW */ yytestcase(yyruleno==38);
      case 39: /* table_option ::= CTX_STRICT_KW */ yytestcase(yyruleno==39);
{
                                                if (yymsp[0].minor.yy255->toLower() != "strict")
                                                    parserContext->errorAtToken(QString("Invalid table option: %1").arg(*(yymsp[0].minor.yy255)));

                                                yygotominor.yy607 = new ParserStubCreateTableOption(ParserStubCreateTableOption::STRICT);
                                                delete yymsp[0].minor.yy255;
                                            }
        break;
      case 42: /* temp ::= TEMP */
{yygotominor.yy562 = new int( (yymsp[0].minor.yy0->value.length() > 4) ? 2 : 1 );}
        break;
      case 43: /* temp ::= */
      case 166: /* distinct ::= */ yytestcase(yyruleno==166);
{yygotominor.yy562 = new int(0);}
        break;
      case 44: /* columnlist ::= columnlist COMMA column */
{
                                                yymsp[-2].minor.yy234->append(yymsp[0].minor.yy115);
                                                yygotominor.yy234 = yymsp[-2].minor.yy234;
                                                DONT_INHERIT_TOKENS("columnlist");
                                            }
        break;
      case 45: /* columnlist ::= column */
{
                                                yygotominor.yy234 = new ParserCreateTableColumnList();
                                                yygotominor.yy234->append(yymsp[0].minor.yy115);
                                            }
        break;
      case 46: /* column ::= columnid type carglist */
{
                                                yygotominor.yy115 = new SqliteCreateTable::Column(*(yymsp[-2].minor.yy255), yymsp[-1].minor.yy601, *(yymsp[0].minor.yy259));
                                                delete yymsp[-2].minor.yy255;
                                                delete yymsp[0].minor.yy259;
                                                objectForTokens = yygotominor.yy115;
                                            }
        break;
      case 47: /* columnid ::= nm */
      case 48: /* columnid ::= ID_COL_NEW */ yytestcase(yyruleno==48);
      case 53: /* nm ::= id */ yytestcase(yyruleno==53);
      case 61: /* typename ::= ids */ yytestcase(yyruleno==61);
      case 199: /* dbnm ::= DOT nm */ yytestcase(yyruleno==199);
      case 356: /* collate ::= COLLATE ids */ yytestcase(yyruleno==356);
      case 357: /* collate ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==357);
{yygotominor.yy255 = yymsp[0].minor.yy255;}
        break;
      case 49: /* id ::= ID */
{
                                                yygotominor.yy255 = new QString(
                                                    stripObjName(
                                                        yymsp[0].minor.yy0->value
                                                    )
                                                );
                                            }
        break;
      case 50: /* id_opt ::= id */
{
                                                yygotominor.yy255 = yymsp[0].minor.yy255;
                                            }
        break;
      case 51: /* id_opt ::= */
{
                                                yygotominor.yy255 = new QString();
                                            }
        break;
      case 52: /* ids ::= ID|STRING */
      case 55: /* nm ::= JOIN_KW */ yytestcase(yyruleno==55);
{yygotominor.yy255 = new QString(yymsp[0].minor.yy0->value);}
        break;
      case 54: /* nm ::= STRING */
{yygotominor.yy255 = new QString(stripString(yymsp[0].minor.yy0->value));}
        break;
      case 56: /* type ::= */
{yygotominor.yy601 = nullptr;}
        break;
      case 57: /* type ::= typetoken */
{yygotominor.yy601 = yymsp[0].minor.yy601;}
        break;
      case 58: /* typetoken ::= typename */
{
                                                yygotominor.yy601 = new SqliteColumnType(*(yymsp[0].minor.yy255));
                                                delete yymsp[0].minor.yy255;
                                                objectForTokens = yygotominor.yy601;
                                            }
        break;
      case 59: /* typetoken ::= typename LP signed RP */
{
                                                yygotominor.yy601 = new SqliteColumnType(*(yymsp[-3].minor.yy255), *(yymsp[-1].minor.yy629));
                                                delete yymsp[-3].minor.yy255;
                                                delete yymsp[-1].minor.yy629;
                                                objectForTokens = yygotominor.yy601;
                                            }
        break;
      case 60: /* typetoken ::= typename LP signed COMMA signed RP */
{
                                                yygotominor.yy601 = new SqliteColumnType(*(yymsp[-5].minor.yy255), *(yymsp[-3].minor.yy629), *(yymsp[-1].minor.yy629));
                                                delete yymsp[-5].minor.yy255;
                                                delete yymsp[-3].minor.yy629;
                                                delete yymsp[-1].minor.yy629;
                                                objectForTokens = yygotominor.yy601;
                                            }
        break;
      case 62: /* typename ::= typename ids */
      case 63: /* typename ::= ID_COL_TYPE */ yytestcase(yyruleno==63);
{
                                                yymsp[-1].minor.yy255->append(" " + *(yymsp[0].minor.yy255));
                                                delete yymsp[0].minor.yy255;
                                                yygotominor.yy255 = yymsp[-1].minor.yy255;
                                            }
        break;
      case 64: /* signed ::= plus_num */
      case 65: /* signed ::= minus_num */ yytestcase(yyruleno==65);
      case 372: /* nmnum ::= plus_num */ yytestcase(yyruleno==372);
      case 377: /* plus_num ::= PLUS number */ yytestcase(yyruleno==377);
      case 378: /* plus_num ::= number */ yytestcase(yyruleno==378);
{yygotominor.yy629 = yymsp[0].minor.yy629;}
        break;
      case 66: /* carglist ::= carglist ccons */
{
                                                yymsp[-1].minor.yy259->append(yymsp[0].minor.yy64);
                                                yygotominor.yy259 = yymsp[-1].minor.yy259;
                                                DONT_INHERIT_TOKENS("carglist");
                                            }
        break;
      case 67: /* carglist ::= */
{yygotominor.yy259 = new ParserCreateTableColumnConstraintList();}
        break;
      case 68: /* ccons ::= CONSTRAINT nm */
{
                                                yygotominor.yy64 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy64->initDefNameOnly(*(yymsp[0].minor.yy255));
                                                delete yymsp[0].minor.yy255;
                                                objectForTokens = yygotominor.yy64;
                                            }
        break;
      case 69: /* ccons ::= DEFAULT term */
{
                                                yygotominor.yy64 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy64->initDefTerm(*(yymsp[0].minor.yy629));
                                                delete yymsp[0].minor.yy629;
                                                objectForTokens = yygotominor.yy64;
                                            }
        break;
      case 70: /* ccons ::= DEFAULT LP expr RP */
{
                                                yygotominor.yy64 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy64->initDefExpr(yymsp[-1].minor.yy176);
                                                objectForTokens = yygotominor.yy64;
                                            }
        break;
      case 71: /* ccons ::= DEFAULT PLUS term */
{
                                                yygotominor.yy64 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy64->initDefTerm(*(yymsp[0].minor.yy629), false);
                                                delete yymsp[0].minor.yy629;
                                                objectForTokens = yygotominor.yy64;
                                            }
        break;
      case 72: /* ccons ::= DEFAULT MINUS term */
{
                                                yygotominor.yy64 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy64->initDefTerm(*(yymsp[0].minor.yy629), true);
                                                delete yymsp[0].minor.yy629;
                                                objectForTokens = yygotominor.yy64;
                                            }
        break;
      case 73: /* ccons ::= DEFAULT id */
{
                                                yygotominor.yy64 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy64->initDefId(*(yymsp[0].minor.yy255));
                                                delete yymsp[0].minor.yy255;
                                                objectForTokens = yygotominor.yy64;
                                            }
        break;
      case 74: /* ccons ::= DEFAULT CTIME_KW */
{
                                                yygotominor.yy64 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy64->initDefCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy64;
                                            }
        break;
      case 75: /* ccons ::= NULL onconf */
{
                                                yygotominor.yy64 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy64->initNull(*(yymsp[0].minor.yy66));
                                                delete yymsp[0].minor.yy66;
                                                objectForTokens = yygotominor.yy64;
                                            }
        break;
      case 76: /* ccons ::= NOT NULL onconf */
{
                                                yygotominor.yy64 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy64->initNotNull(*(yymsp[0].minor.yy66));
                                                delete yymsp[0].minor.yy66;
                                                objectForTokens = yygotominor.yy64;
                                            }
        break;
      case 77: /* ccons ::= PRIMARY KEY sortorder onconf autoinc */
{
                                                yygotominor.yy64 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy64->initPk(*(yymsp[-2].minor.yy645), *(yymsp[-1].minor.yy66), *(yymsp[0].minor.yy35));
                                                delete yymsp[-2].minor.yy645;
                                                delete yymsp[0].minor.yy35;
                                                delete yymsp[-1].minor.yy66;
                                                objectForTokens = yygotominor.yy64;
                                            }
        break;
      case 78: /* ccons ::= UNIQUE onconf */
{
                                                yygotominor.yy64 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy64->initUnique(*(yymsp[0].minor.yy66));
                                                delete yymsp[0].minor.yy66;
                                                objectForTokens = yygotominor.yy64;
                                            }
        break;
      case 79: /* ccons ::= CHECK LP expr RP */
{
                                                yygotominor.yy64 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy64->initCheck(yymsp[-1].minor.yy176);
                                                objectForTokens = yygotominor.yy64;
                                            }
        break;
      case 80: /* ccons ::= REFERENCES nm idxlist_opt refargs */
{
                                                yygotominor.yy64 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy64->initFk(*(yymsp[-2].minor.yy255), *(yymsp[-1].minor.yy527), *(yymsp[0].minor.yy56));
                                                delete yymsp[-2].minor.yy255;
                                                delete yymsp[0].minor.yy56;
                                                delete yymsp[-1].minor.yy527;
                                                objectForTokens = yygotominor.yy64;
                                            }
        break;
      case 81: /* ccons ::= defer_subclause */
{
                                                yygotominor.yy64 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy64->initDefer(yymsp[0].minor.yy218->initially, yymsp[0].minor.yy218->deferrable);
                                                delete yymsp[0].minor.yy218;
                                                objectForTokens = yygotominor.yy64;
                                            }
        break;
      case 82: /* ccons ::= COLLATE ids */
{
                                                yygotominor.yy64 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy64->initColl(*(yymsp[0].minor.yy255));
                                                delete yymsp[0].minor.yy255;
                                                objectForTokens = yygotominor.yy64;
                                            }
        break;
      case 83: /* ccons ::= gen_always AS LP expr RP id_opt */
      case 84: /* ccons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==84);
      case 85: /* ccons ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==85);
      case 86: /* ccons ::= REFERENCES ID_TAB */ yytestcase(yyruleno==86);
{
                                                if (!yymsp[0].minor.yy255->isNull() && yymsp[0].minor.yy255->toLower() != "stored" && yymsp[0].minor.yy255->toLower() != "virtual")
                                                    parserContext->errorAtToken(QString("Invalid generated column type: %1").arg(*(yymsp[0].minor.yy255)));

                                                yygotominor.yy64 = new SqliteCreateTable::Column::Constraint();
												yygotominor.yy64->initGeneratedAs(yymsp[-2].minor.yy176, *(yymsp[-5].minor.yy35), *(yymsp[0].minor.yy255));
												delete yymsp[-5].minor.yy35;
												delete yymsp[0].minor.yy255;
												objectForTokens = yygotominor.yy64;
											}
        break;
      case 87: /* ccons ::= CHECK LP RP */
{
                                                yygotominor.yy64 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy64->initCheck();
                                                objectForTokens = yygotominor.yy64;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 88: /* term ::= NULL */
{yygotominor.yy629 = new QVariant();}
        break;
      case 89: /* term ::= INTEGER */
      case 380: /* number ::= INTEGER */ yytestcase(yyruleno==380);
{yygotominor.yy629 = parserContext->handleNumberToken(yymsp[0].minor.yy0->value);}
        break;
      case 90: /* term ::= FLOAT */
      case 381: /* number ::= FLOAT */ yytestcase(yyruleno==381);
{yygotominor.yy629 = new QVariant(QVariant(yymsp[0].minor.yy0->value).toDouble());}
        break;
      case 91: /* term ::= STRING|BLOB */
{
                                                if (yymsp[0].minor.yy0->value.length() >= 3 && yymsp[0].minor.yy0->value.startsWith("x'", Qt::CaseInsensitive))
                                                    yygotominor.yy629 = new QVariant(blobFromLiteral(yymsp[0].minor.yy0->value));
                                                else
                                                    yygotominor.yy629 = new QVariant(stripString(yymsp[0].minor.yy0->value));
                                            }
        break;
      case 92: /* tnm ::= term */
{
												yygotominor.yy542 = new ParserTermOrLiteral(*(yymsp[0].minor.yy629));
												delete yymsp[0].minor.yy629;
											}
        break;
      case 93: /* tnm ::= nm */
{
												yygotominor.yy542 = new ParserTermOrLiteral(*(yymsp[0].minor.yy255));
												delete yymsp[0].minor.yy255;
											}
        break;
      case 98: /* refargs ::= */
{yygotominor.yy56 = new ParserFkConditionList();}
        break;
      case 99: /* refargs ::= refargs refarg */
{
                                                yymsp[-1].minor.yy56->append(yymsp[0].minor.yy587);
                                                yygotominor.yy56 = yymsp[-1].minor.yy56;
                                                DONT_INHERIT_TOKENS("refargs");
                                            }
        break;
      case 100: /* refarg ::= MATCH nm */
{
                                                yygotominor.yy587 = new SqliteForeignKey::Condition(*(yymsp[0].minor.yy255));
                                                delete yymsp[0].minor.yy255;
                                            }
        break;
      case 101: /* refarg ::= ON INSERT refact */
{yygotominor.yy587 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::INSERT, *(yymsp[0].minor.yy488)); delete yymsp[0].minor.yy488;}
        break;
      case 102: /* refarg ::= ON DELETE refact */
{yygotominor.yy587 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::DELETE, *(yymsp[0].minor.yy488)); delete yymsp[0].minor.yy488;}
        break;
      case 103: /* refarg ::= ON UPDATE refact */
      case 104: /* refarg ::= MATCH ID_FK_MATCH */ yytestcase(yyruleno==104);
{yygotominor.yy587 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::UPDATE, *(yymsp[0].minor.yy488)); delete yymsp[0].minor.yy488;}
        break;
      case 105: /* refact ::= SET NULL */
{yygotominor.yy488 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_NULL);}
        break;
      case 106: /* refact ::= SET DEFAULT */
{yygotominor.yy488 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_DEFAULT);}
        break;
      case 107: /* refact ::= CASCADE */
{yygotominor.yy488 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::CASCADE);}
        break;
      case 108: /* refact ::= RESTRICT */
{yygotominor.yy488 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::RESTRICT);}
        break;
      case 109: /* refact ::= NO ACTION */
{yygotominor.yy488 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::NO_ACTION);}
        break;
      case 110: /* defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy218 = new ParserDeferSubClause(SqliteDeferrable::NOT_DEFERRABLE, *(yymsp[0].minor.yy536));
                                                delete yymsp[0].minor.yy536;
                                            }
        break;
      case 111: /* defer_subclause ::= DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy218 = new ParserDeferSubClause(SqliteDeferrable::DEFERRABLE, *(yymsp[0].minor.yy536));
                                                delete yymsp[0].minor.yy536;
                                            }
        break;
      case 112: /* init_deferred_pred_opt ::= */
{yygotominor.yy536 = new SqliteInitially(SqliteInitially::null);}
        break;
      case 113: /* init_deferred_pred_opt ::= INITIALLY DEFERRED */
{yygotominor.yy536 = new SqliteInitially(SqliteInitially::DEFERRED);}
        break;
      case 114: /* init_deferred_pred_opt ::= INITIALLY IMMEDIATE */
{yygotominor.yy536 = new SqliteInitially(SqliteInitially::IMMEDIATE);}
        break;
      case 115: /* conslist_opt ::= */
{yygotominor.yy445 = new ParserCreateTableConstraintList();}
        break;
      case 116: /* conslist_opt ::= COMMA conslist */
{yygotominor.yy445 = yymsp[0].minor.yy445;}
        break;
      case 117: /* conslist ::= conslist tconscomma tcons */
{
                                                yymsp[0].minor.yy166->afterComma = *(yymsp[-1].minor.yy35);
                                                yymsp[-2].minor.yy445->append(yymsp[0].minor.yy166);
                                                yygotominor.yy445 = yymsp[-2].minor.yy445;
                                                delete yymsp[-1].minor.yy35;
                                                DONT_INHERIT_TOKENS("conslist");
                                            }
        break;
      case 118: /* conslist ::= tcons */
{
                                                yygotominor.yy445 = new ParserCreateTableConstraintList();
                                                yygotominor.yy445->append(yymsp[0].minor.yy166);
                                            }
        break;
      case 121: /* tcons ::= CONSTRAINT nm */
{
                                                yygotominor.yy166 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy166->initNameOnly(*(yymsp[0].minor.yy255));
                                                delete yymsp[0].minor.yy255;
                                                objectForTokens = yygotominor.yy166;
                                            }
        break;
      case 122: /* tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf */
{
                                                yygotominor.yy166 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy166->initPk(*(yymsp[-3].minor.yy527), *(yymsp[-2].minor.yy35), *(yymsp[0].minor.yy66));
                                                delete yymsp[-2].minor.yy35;
                                                delete yymsp[0].minor.yy66;
                                                delete yymsp[-3].minor.yy527;
                                                objectForTokens = yygotominor.yy166;
                                            }
        break;
      case 123: /* tcons ::= UNIQUE LP idxlist RP onconf */
{
                                                yygotominor.yy166 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy166->initUnique(*(yymsp[-2].minor.yy527), *(yymsp[0].minor.yy66));
                                                delete yymsp[0].minor.yy66;
                                                delete yymsp[-2].minor.yy527;
                                                objectForTokens = yygotominor.yy166;
                                            }
        break;
      case 124: /* tcons ::= CHECK LP expr RP onconf */
{
                                                yygotominor.yy166 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy166->initCheck(yymsp[-2].minor.yy176, *(yymsp[0].minor.yy66));
                                                objectForTokens = yygotominor.yy166;
                                            }
        break;
      case 125: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt */
      case 126: /* tcons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==126);
      case 127: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB */ yytestcase(yyruleno==127);
{
                                                yygotominor.yy166 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy166->initFk(
                                                    *(yymsp[-6].minor.yy527),
                                                    *(yymsp[-3].minor.yy255),
                                                    *(yymsp[-2].minor.yy527),
                                                    *(yymsp[-1].minor.yy56),
                                                    yymsp[0].minor.yy218->initially,
                                                    yymsp[0].minor.yy218->deferrable
                                                );
                                                delete yymsp[-3].minor.yy255;
                                                delete yymsp[-1].minor.yy56;
                                                delete yymsp[0].minor.yy218;
                                                delete yymsp[-2].minor.yy527;
                                                delete yymsp[-6].minor.yy527;
                                                objectForTokens = yygotominor.yy166;
                                            }
        break;
      case 128: /* tcons ::= CHECK LP RP onconf */
{
                                                yygotominor.yy166 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy166->initCheck();
                                                objectForTokens = yygotominor.yy166;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                              yy_destructor(yypParser,228,&yymsp[0].minor);
}
        break;
      case 129: /* defer_subclause_opt ::= */
{yygotominor.yy218 = new ParserDeferSubClause(SqliteDeferrable::null, SqliteInitially::null);}
        break;
      case 130: /* defer_subclause_opt ::= defer_subclause */
{yygotominor.yy218 = yymsp[0].minor.yy218;}
        break;
      case 131: /* onconf ::= */
      case 133: /* orconf ::= */ yytestcase(yyruleno==133);
{yygotominor.yy66 = new SqliteConflictAlgo(SqliteConflictAlgo::null);}
        break;
      case 132: /* onconf ::= ON CONFLICT resolvetype */
      case 134: /* orconf ::= OR resolvetype */ yytestcase(yyruleno==134);
{yygotominor.yy66 = yymsp[0].minor.yy66;}
        break;
      case 135: /* resolvetype ::= raisetype */
      case 136: /* resolvetype ::= IGNORE */ yytestcase(yyruleno==136);
      case 137: /* resolvetype ::= REPLACE */ yytestcase(yyruleno==137);
{yygotominor.yy66 = new SqliteConflictAlgo(sqliteConflictAlgo(yymsp[0].minor.yy0->value));}
        break;
      case 138: /* cmd ::= DROP TABLE ifexists fullname */
{
                                                yygotominor.yy635 = new SqliteDropTable(*(yymsp[-1].minor.yy35), yymsp[0].minor.yy520->name1, yymsp[0].minor.yy520->name2);
                                                delete yymsp[-1].minor.yy35;
                                                delete yymsp[0].minor.yy520;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 139: /* cmd ::= DROP TABLE ifexists nm DOT ID_TAB */
      case 140: /* cmd ::= DROP TABLE ifexists ID_DB|ID_TAB */ yytestcase(yyruleno==140);
      case 147: /* cmd ::= DROP VIEW ifexists nm DOT ID_VIEW */ yytestcase(yyruleno==147);
      case 148: /* cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW */ yytestcase(yyruleno==148);
      case 191: /* singlesrc ::= nm DOT ID_TAB */ yytestcase(yyruleno==191);
      case 192: /* singlesrc ::= ID_DB|ID_TAB */ yytestcase(yyruleno==192);
      case 193: /* singlesrc ::= nm DOT ID_VIEW */ yytestcase(yyruleno==193);
      case 194: /* singlesrc ::= ID_DB|ID_VIEW */ yytestcase(yyruleno==194);
      case 345: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW */ yytestcase(yyruleno==345);
      case 346: /* cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW */ yytestcase(yyruleno==346);
      case 359: /* cmd ::= DROP INDEX ifexists nm DOT ID_IDX */ yytestcase(yyruleno==359);
      case 360: /* cmd ::= DROP INDEX ifexists ID_DB|ID_IDX */ yytestcase(yyruleno==360);
      case 370: /* cmd ::= PRAGMA nm DOT ID_PRAGMA */ yytestcase(yyruleno==370);
      case 371: /* cmd ::= PRAGMA ID_DB|ID_PRAGMA */ yytestcase(yyruleno==371);
      case 409: /* cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG */ yytestcase(yyruleno==409);
      case 410: /* cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG */ yytestcase(yyruleno==410);
      case 420: /* cmd ::= REINDEX nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==420);
      case 421: /* cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==421);
      case 424: /* cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==424);
      case 425: /* cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==425);
      case 430: /* cmd ::= ALTER TABLE nm DOT ID_TAB */ yytestcase(yyruleno==430);
      case 431: /* cmd ::= ALTER TABLE ID_DB|ID_TAB */ yytestcase(yyruleno==431);
      case 437: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW */ yytestcase(yyruleno==437);
      case 438: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW */ yytestcase(yyruleno==438);
{  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 143: /* cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select */
{
                                                yygotominor.yy635 = new SqliteCreateView(*(yymsp[-6].minor.yy562), *(yymsp[-4].minor.yy35), yymsp[-3].minor.yy520->name1, yymsp[-3].minor.yy520->name2, yymsp[0].minor.yy73, *(yymsp[-2].minor.yy527));
                                                delete yymsp[-6].minor.yy562;
                                                delete yymsp[-4].minor.yy35;
                                                delete yymsp[-3].minor.yy520;
                                                delete yymsp[-2].minor.yy527;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 146: /* cmd ::= DROP VIEW ifexists fullname */
{
                                                yygotominor.yy635 = new SqliteDropView(*(yymsp[-1].minor.yy35), yymsp[0].minor.yy520->name1, yymsp[0].minor.yy520->name2);
                                                delete yymsp[-1].minor.yy35;
                                                delete yymsp[0].minor.yy520;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 149: /* cmd ::= select_stmt */
      case 230: /* cmd ::= delete_stmt */ yytestcase(yyruleno==230);
      case 241: /* cmd ::= update_stmt */ yytestcase(yyruleno==241);
      case 262: /* cmd ::= insert_stmt */ yytestcase(yyruleno==262);
{
                                                yygotominor.yy635 = yymsp[0].minor.yy635;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 150: /* select_stmt ::= select */
{
                                                yygotominor.yy635 = yymsp[0].minor.yy73;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 151: /* select ::= with selectnowith */
{
                                                yygotominor.yy73 = yymsp[0].minor.yy73;
                                                yymsp[0].minor.yy73->setWith(yymsp[-1].minor.yy321);
                                                objectForTokens = yygotominor.yy73;
                                            }
        break;
      case 152: /* selectnowith ::= oneselect */
{
                                                yygotominor.yy73 = SqliteSelect::append(yymsp[0].minor.yy438);
                                                objectForTokens = yygotominor.yy73;
                                            }
        break;
      case 153: /* selectnowith ::= selectnowith multiselect_op oneselect */
{
                                                yygotominor.yy73 = SqliteSelect::append(yymsp[-2].minor.yy73, *(yymsp[-1].minor.yy574), yymsp[0].minor.yy438);
                                                delete yymsp[-1].minor.yy574;
                                                objectForTokens = yygotominor.yy73;
                                            }
        break;
      case 154: /* selectnowith ::= values */
{
                                                yygotominor.yy73 = SqliteSelect::append(*(yymsp[0].minor.yy54));
                                                delete yymsp[0].minor.yy54;
                                                objectForTokens = yygotominor.yy73;
                                            }
        break;
      case 155: /* selectnowith ::= selectnowith COMMA values */
{
                                                yygotominor.yy73 = SqliteSelect::append(yymsp[-2].minor.yy73, SqliteSelect::CompoundOperator::UNION_ALL, *(yymsp[0].minor.yy54));
                                                delete yymsp[0].minor.yy54;
                                                objectForTokens = yygotominor.yy73;
                                            }
        break;
      case 156: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt */
{
                                                yygotominor.yy438 = new SqliteSelect::Core(
                                                        *(yymsp[-7].minor.yy562),
                                                        *(yymsp[-6].minor.yy421),
                                                        yymsp[-5].minor.yy335,
                                                        yymsp[-4].minor.yy176,
                                                        *(yymsp[-3].minor.yy567),
                                                        yymsp[-2].minor.yy176,
                                                        *(yymsp[-1].minor.yy499),
                                                        yymsp[0].minor.yy4
                                                    );
                                                delete yymsp[-6].minor.yy421;
                                                delete yymsp[-7].minor.yy562;
                                                delete yymsp[-3].minor.yy567;
                                                delete yymsp[-1].minor.yy499;
                                                objectForTokens = yygotominor.yy438;
                                            }
        break;
      case 157: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt */
{
                                                yygotominor.yy438 = new SqliteSelect::Core(
                                                        *(yymsp[-8].minor.yy562),
                                                        *(yymsp[-7].minor.yy421),
                                                        yymsp[-6].minor.yy335,
                                                        yymsp[-5].minor.yy176,
                                                        *(yymsp[-4].minor.yy567),
                                                        yymsp[-3].minor.yy176,
                                                        *(yymsp[-2].minor.yy555),
                                                        *(yymsp[-1].minor.yy499),
                                                        yymsp[0].minor.yy4
                                                    );
                                                delete yymsp[-7].minor.yy421;
                                                delete yymsp[-8].minor.yy562;
                                                delete yymsp[-4].minor.yy567;
                                                delete yymsp[-1].minor.yy499;
                                                delete yymsp[-2].minor.yy555;
                                                objectForTokens = yygotominor.yy438;
                                            }
        break;
      case 158: /* values ::= VALUES LP nexprlist RP */
{
                                                yygotominor.yy54 = new ParserExprNestedList();
                                                yygotominor.yy54->append(*(yymsp[-1].minor.yy567));
                                                delete yymsp[-1].minor.yy567;
                                            }
        break;
      case 159: /* values ::= values COMMA LP exprlist RP */
{
                                                yymsp[-4].minor.yy54->append(*(yymsp[-1].minor.yy567));
                                                yygotominor.yy54 = yymsp[-4].minor.yy54;
                                                delete yymsp[-1].minor.yy567;
                                                DONT_INHERIT_TOKENS("values");
                                            }
        break;
      case 160: /* multiselect_op ::= UNION */
{yygotominor.yy574 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION);}
        break;
      case 161: /* multiselect_op ::= UNION ALL */
{yygotominor.yy574 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION_ALL);}
        break;
      case 162: /* multiselect_op ::= EXCEPT */
{yygotominor.yy574 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::EXCEPT);}
        break;
      case 163: /* multiselect_op ::= INTERSECT */
{yygotominor.yy574 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::INTERSECT);}
        break;
      case 164: /* distinct ::= DISTINCT */
{yygotominor.yy562 = new int(1);}
        break;
      case 165: /* distinct ::= ALL */
{yygotominor.yy562 = new int(2);}
        break;
      case 167: /* sclp ::= selcollist COMMA */
{yygotominor.yy421 = yymsp[-1].minor.yy421;}
        break;
      case 168: /* sclp ::= */
      case 239: /* returning ::= */ yytestcase(yyruleno==239);
{yygotominor.yy421 = new ParserResultColumnList();}
        break;
      case 169: /* selcollist ::= sclp expr as */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        yymsp[-1].minor.yy176,
                                                        yymsp[0].minor.yy280 ? yymsp[0].minor.yy280->asKw : false,
                                                        yymsp[0].minor.yy280 ? yymsp[0].minor.yy280->name : QString()
                                                    );

                                                yymsp[-2].minor.yy421->append(obj);
                                                yygotominor.yy421 = yymsp[-2].minor.yy421;
                                                delete yymsp[0].minor.yy280;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 170: /* selcollist ::= sclp STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(true);

                                                yymsp[-1].minor.yy421->append(obj);
                                                yygotominor.yy421 = yymsp[-1].minor.yy421;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 171: /* selcollist ::= sclp tnm DOT STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        true,
                                                        yymsp[-2].minor.yy542->toName()
                                                    );
													
												if (!yymsp[-2].minor.yy542->isName())
													parserContext->errorAtToken("Syntax error <expected name, not literal value>", -3);
													
                                                yymsp[-3].minor.yy421->append(obj);
                                                yygotominor.yy421 = yymsp[-3].minor.yy421;
                                                delete yymsp[-2].minor.yy542;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 172: /* selcollist ::= sclp */
      case 173: /* selcollist ::= sclp ID_TAB DOT STAR */ yytestcase(yyruleno==173);
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy421 = yymsp[0].minor.yy421;
                                            }
        break;
      case 174: /* as ::= AS nm */
{
                                                yygotominor.yy280 = new ParserStubAlias(*(yymsp[0].minor.yy255), true);
                                                delete yymsp[0].minor.yy255;
                                            }
        break;
      case 175: /* as ::= ids */
      case 176: /* as ::= AS ID_ALIAS */ yytestcase(yyruleno==176);
      case 177: /* as ::= ID_ALIAS */ yytestcase(yyruleno==177);
{
                                                yygotominor.yy280 = new ParserStubAlias(*(yymsp[0].minor.yy255), false);
                                                delete yymsp[0].minor.yy255;
                                            }
        break;
      case 178: /* as ::= */
{yygotominor.yy280 = nullptr;}
        break;
      case 179: /* from ::= */
{yygotominor.yy335 = nullptr;}
        break;
      case 180: /* from ::= FROM joinsrc */
{yygotominor.yy335 = yymsp[0].minor.yy335;}
        break;
      case 181: /* joinsrc ::= singlesrc seltablist */
{
                                                yygotominor.yy335 = new SqliteSelect::Core::JoinSource(
                                                        yymsp[-1].minor.yy393,
                                                        *(yymsp[0].minor.yy195)
                                                    );
                                                delete yymsp[0].minor.yy195;
                                                objectForTokens = yygotominor.yy335;
                                            }
        break;
      case 182: /* joinsrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy335 = new SqliteSelect::Core::JoinSource();
                                                objectForTokens = yygotominor.yy335;
                                            }
        break;
      case 183: /* seltablist ::= seltablist joinop singlesrc joinconstr_opt */
{
                                                SqliteSelect::Core::JoinSourceOther* src =
                                                    new SqliteSelect::Core::JoinSourceOther(yymsp[-2].minor.yy461, yymsp[-1].minor.yy393, yymsp[0].minor.yy423);

                                                yymsp[-3].minor.yy195->append(src);
                                                yygotominor.yy195 = yymsp[-3].minor.yy195;
                                                objectForTokens = src;
                                                DONT_INHERIT_TOKENS("seltablist");
                                            }
        break;
      case 184: /* seltablist ::= */
{
                                                yygotominor.yy195 = new ParserOtherSourceList();
                                            }
        break;
      case 185: /* singlesrc ::= nm dbnm as indexed_opt */
{
                                                yygotominor.yy393 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-3].minor.yy255),
                                                        *(yymsp[-2].minor.yy255),
                                                        yymsp[-1].minor.yy280 ? yymsp[-1].minor.yy280->asKw : false,
                                                        yymsp[-1].minor.yy280 ? yymsp[-1].minor.yy280->name : QString(),
                                                        yymsp[0].minor.yy224 ? yymsp[0].minor.yy224->notIndexedKw : false,
                                                        yymsp[0].minor.yy224 ? yymsp[0].minor.yy224->indexedBy : QString()
                                                    );
                                                delete yymsp[-3].minor.yy255;
                                                delete yymsp[-2].minor.yy255;
                                                delete yymsp[-1].minor.yy280;
                                                if (yymsp[0].minor.yy224)
                                                    delete yymsp[0].minor.yy224;
                                                objectForTokens = yygotominor.yy393;
                                            }
        break;
      case 186: /* singlesrc ::= LP select RP as */
{
                                                yygotominor.yy393 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy73,
                                                        yymsp[0].minor.yy280 ? yymsp[0].minor.yy280->asKw : false,
                                                        yymsp[0].minor.yy280 ? yymsp[0].minor.yy280->name : QString()
                                                    );
                                                delete yymsp[0].minor.yy280;
                                                objectForTokens = yygotominor.yy393;
                                            }
        break;
      case 187: /* singlesrc ::= LP joinsrc RP as */
{
                                                yygotominor.yy393 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy335,
                                                        yymsp[0].minor.yy280 ? yymsp[0].minor.yy280->asKw : false,
                                                        yymsp[0].minor.yy280 ? yymsp[0].minor.yy280->name : QString()
                                                    );
                                                delete yymsp[0].minor.yy280;
                                                objectForTokens = yygotominor.yy393;
                                            }
        break;
      case 188: /* singlesrc ::= nm dbnm LP exprlist RP as */
{
                                                yygotominor.yy393 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-5].minor.yy255),
                                                        *(yymsp[-4].minor.yy255),
                                                        yymsp[0].minor.yy280 ? yymsp[0].minor.yy280->asKw : false,
                                                        yymsp[0].minor.yy280 ? yymsp[0].minor.yy280->name : QString(),
                                                        *(yymsp[-2].minor.yy567)
                                                    );
                                                delete yymsp[-5].minor.yy255;
                                                delete yymsp[-4].minor.yy255;
                                                delete yymsp[0].minor.yy280;
                                                if (yymsp[-2].minor.yy567)
                                                    delete yymsp[-2].minor.yy567;

                                                objectForTokens = yygotominor.yy393;
                                            }
        break;
      case 189: /* singlesrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy393 = new SqliteSelect::Core::SingleSource();
                                                objectForTokens = yygotominor.yy393;
                                            }
        break;
      case 190: /* singlesrc ::= nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy393 = new SqliteSelect::Core::SingleSource();
                                                yygotominor.yy393->database = *(yymsp[-1].minor.yy255);
                                                delete yymsp[-1].minor.yy255;
                                                objectForTokens = yygotominor.yy393;
                                            }
        break;
      case 195: /* joinconstr_opt ::= ON expr */
{
                                                yygotominor.yy423 = new SqliteSelect::Core::JoinConstraint(yymsp[0].minor.yy176);
                                                objectForTokens = yygotominor.yy423;
                                            }
        break;
      case 196: /* joinconstr_opt ::= USING LP idlist RP */
{
                                                yygotominor.yy423 = new SqliteSelect::Core::JoinConstraint(*(yymsp[-1].minor.yy336));
                                                delete yymsp[-1].minor.yy336;
                                                objectForTokens = yygotominor.yy423;
                                            }
        break;
      case 197: /* joinconstr_opt ::= */
{yygotominor.yy423 = nullptr;}
        break;
      case 198: /* dbnm ::= */
      case 355: /* collate ::= */ yytestcase(yyruleno==355);
      case 441: /* vtabarg ::= */ yytestcase(yyruleno==441);
      case 445: /* anylist ::= */ yytestcase(yyruleno==445);
{yygotominor.yy255 = new QString();}
        break;
      case 200: /* fullname ::= nm dbnm */
{
                                                yygotominor.yy520 = new ParserFullName();
                                                yygotominor.yy520->name1 = *(yymsp[-1].minor.yy255);
                                                yygotominor.yy520->name2 = *(yymsp[0].minor.yy255);
                                                delete yymsp[-1].minor.yy255;
                                                delete yymsp[0].minor.yy255;
                                            }
        break;
      case 201: /* joinop ::= COMMA */
{
                                                yygotominor.yy461 = new SqliteSelect::Core::JoinOp(true);
                                                objectForTokens = yygotominor.yy461;
                                            }
        break;
      case 202: /* joinop ::= JOIN */
{
                                                yygotominor.yy461 = new SqliteSelect::Core::JoinOp(false);
                                                objectForTokens = yygotominor.yy461;
                                            }
        break;
      case 203: /* joinop ::= JOIN_KW JOIN */
{
                                                yygotominor.yy461 = new SqliteSelect::Core::JoinOp(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy461;
                                            }
        break;
      case 204: /* joinop ::= JOIN_KW nm JOIN */
{
                                                yygotominor.yy461 = new SqliteSelect::Core::JoinOp(yymsp[-2].minor.yy0->value, *(yymsp[-1].minor.yy255));
                                                delete yymsp[-1].minor.yy255;
                                                objectForTokens = yygotominor.yy461;
                                            }
        break;
      case 205: /* joinop ::= JOIN_KW nm nm JOIN */
      case 206: /* joinop ::= ID_JOIN_OPTS */ yytestcase(yyruleno==206);
{
                                                yygotominor.yy461 = new SqliteSelect::Core::JoinOp(yymsp[-3].minor.yy0->value, *(yymsp[-2].minor.yy255), *(yymsp[-1].minor.yy255));
                                                delete yymsp[-2].minor.yy255;
                                                objectForTokens = yygotominor.yy461;
                                            }
        break;
      case 207: /* indexed_opt ::= */
{yygotominor.yy224 = nullptr;}
        break;
      case 208: /* indexed_opt ::= INDEXED BY nm */
{
                                                yygotominor.yy224 = new ParserIndexedBy(*(yymsp[0].minor.yy255));
                                                delete yymsp[0].minor.yy255;
                                            }
        break;
      case 209: /* indexed_opt ::= NOT INDEXED */
      case 210: /* indexed_opt ::= INDEXED BY ID_IDX */ yytestcase(yyruleno==210);
{yygotominor.yy224 = new ParserIndexedBy(true);}
        break;
      case 211: /* orderby_opt ::= */
{yygotominor.yy499 = new ParserOrderByList();}
        break;
      case 212: /* orderby_opt ::= ORDER BY sortlist */
{yygotominor.yy499 = yymsp[0].minor.yy499;}
        break;
      case 213: /* sortlist ::= sortlist COMMA expr sortorder nulls */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-2].minor.yy176, *(yymsp[-1].minor.yy645), *(yymsp[0].minor.yy99));
                                                yymsp[-4].minor.yy499->append(obj);
                                                yygotominor.yy499 = yymsp[-4].minor.yy499;
                                                delete yymsp[-1].minor.yy645;
												delete yymsp[0].minor.yy99;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sortlist");
                                            }
        break;
      case 214: /* sortlist ::= expr sortorder nulls */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-2].minor.yy176, *(yymsp[-1].minor.yy645), *(yymsp[0].minor.yy99));
                                                yygotominor.yy499 = new ParserOrderByList();
                                                yygotominor.yy499->append(obj);
                                                delete yymsp[-1].minor.yy645;
												delete yymsp[0].minor.yy99;
                                                objectForTokens = obj;
                                            }
        break;
      case 215: /* sortorder ::= ASC */
{yygotominor.yy645 = new SqliteSortOrder(SqliteSortOrder::ASC);}
        break;
      case 216: /* sortorder ::= DESC */
{yygotominor.yy645 = new SqliteSortOrder(SqliteSortOrder::DESC);}
        break;
      case 217: /* sortorder ::= */
{yygotominor.yy645 = new SqliteSortOrder(SqliteSortOrder::null);}
        break;
      case 218: /* nulls ::= NULLS FIRST */
{yygotominor.yy99 = new SqliteNulls(SqliteNulls::FIRST);}
        break;
      case 219: /* nulls ::= NULLS LAST */
{yygotominor.yy99 = new SqliteNulls(SqliteNulls::LAST);}
        break;
      case 220: /* nulls ::= */
{yygotominor.yy99 = new SqliteNulls(SqliteNulls::null);}
        break;
      case 221: /* groupby_opt ::= */
      case 340: /* exprlist ::= */ yytestcase(yyruleno==340);
{yygotominor.yy567 = new ParserExprList();}
        break;
      case 222: /* groupby_opt ::= GROUP BY nexprlist */
      case 339: /* exprlist ::= nexprlist */ yytestcase(yyruleno==339);
{yygotominor.yy567 = yymsp[0].minor.yy567;}
        break;
      case 223: /* groupby_opt ::= GROUP BY */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy567 = new ParserExprList();
                                            }
        break;
      case 224: /* having_opt ::= */
      case 236: /* where_opt ::= */ yytestcase(yyruleno==236);
      case 336: /* case_else ::= */ yytestcase(yyruleno==336);
      case 338: /* case_operand ::= */ yytestcase(yyruleno==338);
      case 364: /* vinto ::= */ yytestcase(yyruleno==364);
      case 398: /* when_clause ::= */ yytestcase(yyruleno==398);
      case 413: /* key_opt ::= */ yytestcase(yyruleno==413);
{yygotominor.yy176 = nullptr;}
        break;
      case 225: /* having_opt ::= HAVING expr */
      case 237: /* where_opt ::= WHERE expr */ yytestcase(yyruleno==237);
      case 327: /* expr ::= exprx */ yytestcase(yyruleno==327);
      case 335: /* case_else ::= ELSE expr */ yytestcase(yyruleno==335);
      case 337: /* case_operand ::= exprx */ yytestcase(yyruleno==337);
      case 363: /* vinto ::= INTO expr */ yytestcase(yyruleno==363);
      case 399: /* when_clause ::= WHEN expr */ yytestcase(yyruleno==399);
      case 414: /* key_opt ::= KEY expr */ yytestcase(yyruleno==414);
{yygotominor.yy176 = yymsp[0].minor.yy176;}
        break;
      case 226: /* limit_opt ::= */
{yygotominor.yy4 = nullptr;}
        break;
      case 227: /* limit_opt ::= LIMIT expr */
{
                                                yygotominor.yy4 = new SqliteLimit(yymsp[0].minor.yy176);
                                                objectForTokens = yygotominor.yy4;
                                            }
        break;
      case 228: /* limit_opt ::= LIMIT expr OFFSET expr */
{
                                                yygotominor.yy4 = new SqliteLimit(yymsp[-2].minor.yy176, yymsp[0].minor.yy176, true);
                                                objectForTokens = yygotominor.yy4;
                                            }
        break;
      case 229: /* limit_opt ::= LIMIT expr COMMA expr */
{
                                                yygotominor.yy4 = new SqliteLimit(yymsp[-2].minor.yy176, yymsp[0].minor.yy176, false);
                                                objectForTokens = yygotominor.yy4;
                                            }
        break;
      case 231: /* delete_stmt ::= with DELETE FROM fullname indexed_opt where_opt returning orderby_opt limit_opt */
{
                                                if (yymsp[-4].minor.yy224)
                                                {
                                                    if (!yymsp[-4].minor.yy224->indexedBy.isNull())
                                                    {
                                                        yygotominor.yy635 = new SqliteDelete(
                                                                yymsp[-5].minor.yy520->name1,
                                                                yymsp[-5].minor.yy520->name2,
                                                                yymsp[-4].minor.yy224->indexedBy,
                                                                yymsp[-3].minor.yy176,
                                                                yymsp[-8].minor.yy321,
                                                                *(yymsp[-2].minor.yy421),
                                                                *(yymsp[-1].minor.yy499),
                                                                yymsp[0].minor.yy4
                                                            );
                                                    }
                                                    else
                                                    {
                                                        yygotominor.yy635 = new SqliteDelete(
                                                                yymsp[-5].minor.yy520->name1,
                                                                yymsp[-5].minor.yy520->name2,
                                                                yymsp[-4].minor.yy224->notIndexedKw,
                                                                yymsp[-3].minor.yy176,
                                                                yymsp[-8].minor.yy321,
                                                                *(yymsp[-2].minor.yy421),
                                                                *(yymsp[-1].minor.yy499),
                                                                yymsp[0].minor.yy4
                                                            );
                                                    }
                                                    delete yymsp[-4].minor.yy224;
                                                }
                                                else
                                                {
                                                    yygotominor.yy635 = new SqliteDelete(
                                                            yymsp[-5].minor.yy520->name1,
                                                            yymsp[-5].minor.yy520->name2,
                                                            false,
                                                            yymsp[-3].minor.yy176,
                                                            yymsp[-8].minor.yy321,
                                                            *(yymsp[-2].minor.yy421),
                                                            *(yymsp[-1].minor.yy499),
                                                            yymsp[0].minor.yy4
                                                        );
                                                }
                                                delete yymsp[-5].minor.yy520;
                                                delete yymsp[-2].minor.yy421;
                                                delete yymsp[-1].minor.yy499;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 232: /* delete_stmt ::= with DELETE FROM */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-2].minor.yy321;
                                                yygotominor.yy635 = q;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 233: /* delete_stmt ::= with DELETE FROM nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-4].minor.yy321;
                                                q->database = *(yymsp[-1].minor.yy255);
                                                yygotominor.yy635 = q;
                                                objectForTokens = yygotominor.yy635;
                                                delete yymsp[-1].minor.yy255;
                                            }
        break;
      case 234: /* delete_stmt ::= with DELETE FROM nm DOT ID_TAB */
      case 245: /* update_stmt ::= with UPDATE orconf nm DOT ID_TAB */ yytestcase(yyruleno==245);
{  yy_destructor(yypParser,249,&yymsp[-5].minor);
  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 235: /* delete_stmt ::= with DELETE FROM ID_DB|ID_TAB */
      case 246: /* update_stmt ::= with UPDATE orconf ID_DB|ID_TAB */ yytestcase(yyruleno==246);
{  yy_destructor(yypParser,249,&yymsp[-3].minor);
}
        break;
      case 238: /* where_opt ::= WHERE */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy176 = new SqliteExpr();
                                            }
        break;
      case 240: /* returning ::= RETURNING selcollist */
{yygotominor.yy421 = yymsp[0].minor.yy421;}
        break;
      case 242: /* update_stmt ::= with UPDATE orconf fullname indexed_opt SET setlist from where_opt returning orderby_opt limit_opt */
{
                                                yygotominor.yy635 = new SqliteUpdate(
                                                        *(yymsp[-9].minor.yy66),
                                                        yymsp[-8].minor.yy520->name1,
                                                        yymsp[-8].minor.yy520->name2,
                                                        yymsp[-7].minor.yy224 ? yymsp[-7].minor.yy224->notIndexedKw : false,
                                                        yymsp[-7].minor.yy224 ? yymsp[-7].minor.yy224->indexedBy : QString(),
                                                        *(yymsp[-5].minor.yy617),
														yymsp[-4].minor.yy335,
                                                        yymsp[-3].minor.yy176,
                                                        yymsp[-11].minor.yy321,
                                                        *(yymsp[-2].minor.yy421),
                                                        *(yymsp[-1].minor.yy499),
                                                        yymsp[0].minor.yy4
                                                    );
                                                delete yymsp[-9].minor.yy66;
                                                delete yymsp[-8].minor.yy520;
                                                delete yymsp[-5].minor.yy617;
                                                delete yymsp[-2].minor.yy421;
                                                delete yymsp[-1].minor.yy499;
                                                if (yymsp[-7].minor.yy224)
                                                    delete yymsp[-7].minor.yy224;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 243: /* update_stmt ::= with UPDATE orconf */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-2].minor.yy321;
                                                yygotominor.yy635 = q;
                                                objectForTokens = yygotominor.yy635;
                                                delete yymsp[0].minor.yy66;
                                            }
        break;
      case 244: /* update_stmt ::= with UPDATE orconf nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-4].minor.yy321;
                                                q->database = *(yymsp[-1].minor.yy255);
                                                yygotominor.yy635 = q;
                                                objectForTokens = yygotominor.yy635;
                                                delete yymsp[-2].minor.yy66;
                                                delete yymsp[-1].minor.yy255;
                                            }
        break;
      case 247: /* setlist ::= setlist COMMA nm EQ expr */
{
                                                yymsp[-4].minor.yy617->append(ParserSetValue(*(yymsp[-2].minor.yy255), yymsp[0].minor.yy176));
                                                yygotominor.yy617 = yymsp[-4].minor.yy617;
                                                delete yymsp[-2].minor.yy255;
                                            }
        break;
      case 248: /* setlist ::= setlist COMMA LP idlist RP EQ expr */
{
                                                yymsp[-6].minor.yy617->append(ParserSetValue(*(yymsp[-3].minor.yy336), yymsp[0].minor.yy176));
                                                yygotominor.yy617 = yymsp[-6].minor.yy617;
                                                delete yymsp[-3].minor.yy336;
                                            }
        break;
      case 249: /* setlist ::= nm EQ expr */
{
                                                yygotominor.yy617 = new ParserSetValueList();
                                                yygotominor.yy617->append(ParserSetValue(*(yymsp[-2].minor.yy255), yymsp[0].minor.yy176));
                                                delete yymsp[-2].minor.yy255;
                                            }
        break;
      case 250: /* setlist ::= LP idlist RP EQ expr */
{
                                                yygotominor.yy617 = new ParserSetValueList();
                                                yygotominor.yy617->append(ParserSetValue(*(yymsp[-3].minor.yy336), yymsp[0].minor.yy176));
                                                delete yymsp[-3].minor.yy336;
                                            }
        break;
      case 251: /* setlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy617 = new ParserSetValueList();
                                            }
        break;
      case 252: /* setlist ::= setlist COMMA */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy617 = yymsp[-1].minor.yy617;
                                            }
        break;
      case 253: /* setlist ::= setlist COMMA ID_COL */
      case 254: /* setlist ::= ID_COL */ yytestcase(yyruleno==254);
{  yy_destructor(yypParser,280,&yymsp[-2].minor);
}
        break;
      case 255: /* idlist_opt ::= */
{yygotominor.yy336 = new QStringList();}
        break;
      case 256: /* idlist_opt ::= LP idlist RP */
{yygotominor.yy336 = yymsp[-1].minor.yy336;}
        break;
      case 257: /* idlist ::= idlist COMMA nm */
{
                                                yygotominor.yy336 = yymsp[-2].minor.yy336;
                                                *(yygotominor.yy336) << *(yymsp[0].minor.yy255);
                                                delete yymsp[0].minor.yy255;
                                            }
        break;
      case 258: /* idlist ::= nm */
{
                                                yygotominor.yy336 = new QStringList();
                                                *(yygotominor.yy336) << *(yymsp[0].minor.yy255);
                                                delete yymsp[0].minor.yy255;
                                            }
        break;
      case 259: /* idlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy336 = new QStringList();
                                            }
        break;
      case 260: /* idlist ::= idlist COMMA ID_COL */
      case 261: /* idlist ::= ID_COL */ yytestcase(yyruleno==261);
{  yy_destructor(yypParser,274,&yymsp[-2].minor);
}
        break;
      case 263: /* insert_stmt ::= with insert_cmd INTO fullname idlist_opt select upsert returning */
{
                                                yygotominor.yy635 = new SqliteInsert(
                                                        yymsp[-6].minor.yy281->replace,
                                                        yymsp[-6].minor.yy281->orConflict,
                                                        yymsp[-4].minor.yy520->name1,
                                                        yymsp[-4].minor.yy520->name2,
                                                        *(yymsp[-3].minor.yy336),
                                                        yymsp[-2].minor.yy73,
                                                        yymsp[-7].minor.yy321,
                                                        yymsp[-1].minor.yy16,
                                                        *(yymsp[0].minor.yy421)
                                                    );
                                                delete yymsp[-4].minor.yy520;
                                                delete yymsp[-6].minor.yy281;
                                                delete yymsp[-3].minor.yy336;
                                                delete yymsp[0].minor.yy421;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 264: /* insert_stmt ::= with insert_cmd INTO fullname idlist_opt DEFAULT VALUES returning */
{
                                                yygotominor.yy635 = new SqliteInsert(
                                                        yymsp[-6].minor.yy281->replace,
                                                        yymsp[-6].minor.yy281->orConflict,
                                                        yymsp[-4].minor.yy520->name1,
                                                        yymsp[-4].minor.yy520->name2,
                                                        *(yymsp[-3].minor.yy336),
                                                        yymsp[-7].minor.yy321,
                                                        *(yymsp[0].minor.yy421)
                                                    );
                                                delete yymsp[-4].minor.yy520;
                                                delete yymsp[-6].minor.yy281;
                                                delete yymsp[-3].minor.yy336;
                                                delete yymsp[0].minor.yy421;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 265: /* insert_stmt ::= with insert_cmd INTO fullname LP idlist rp_opt */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy635 = new SqliteInsert(
                                                        yymsp[-5].minor.yy281->replace,
                                                        yymsp[-5].minor.yy281->orConflict,
                                                        yymsp[-3].minor.yy520->name1,
                                                        yymsp[-3].minor.yy520->name2,
                                                        *(yymsp[-1].minor.yy336),
                                                        yymsp[-6].minor.yy321,
                                                        QList<SqliteResultColumn*>()
                                                    );
                                                objectForTokens = yygotominor.yy635;
                                                delete yymsp[-3].minor.yy520;
                                                delete yymsp[-1].minor.yy336;
                                                delete yymsp[-5].minor.yy281;
                                                delete yymsp[0].minor.yy35;
                                            }
        break;
      case 266: /* insert_stmt ::= with insert_cmd INTO */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-1].minor.yy281->replace;
                                                q->onConflict = yymsp[-1].minor.yy281->orConflict;
                                                q->with = yymsp[-2].minor.yy321;
                                                yygotominor.yy635 = q;
                                                objectForTokens = yygotominor.yy635;
                                                delete yymsp[-1].minor.yy281;
                                            }
        break;
      case 267: /* insert_stmt ::= with insert_cmd INTO nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-3].minor.yy281->replace;
                                                q->onConflict = yymsp[-3].minor.yy281->orConflict;
                                                q->with = yymsp[-4].minor.yy321;
                                                q->database = *(yymsp[-1].minor.yy255);
                                                yygotominor.yy635 = q;
                                                objectForTokens = yygotominor.yy635;
                                                delete yymsp[-3].minor.yy281;
                                                delete yymsp[-1].minor.yy255;
                                            }
        break;
      case 268: /* insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB */
{  yy_destructor(yypParser,249,&yymsp[-3].minor);
  yy_destructor(yypParser,283,&yymsp[-2].minor);
}
        break;
      case 269: /* insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB */
{  yy_destructor(yypParser,249,&yymsp[-5].minor);
  yy_destructor(yypParser,283,&yymsp[-4].minor);
  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 270: /* insert_cmd ::= INSERT orconf */
{
                                                yygotominor.yy281 = new ParserStubInsertOrReplace(false, *(yymsp[0].minor.yy66));
                                                delete yymsp[0].minor.yy66;
                                            }
        break;
      case 271: /* insert_cmd ::= REPLACE */
{yygotominor.yy281 = new ParserStubInsertOrReplace(true);}
        break;
      case 272: /* upsert ::= */
{
                                                yygotominor.yy16 = nullptr;
                                            }
        break;
      case 273: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt */
{
                                                yygotominor.yy16 = new SqliteUpsert(*(yymsp[-7].minor.yy499), yymsp[-5].minor.yy176, *(yymsp[-1].minor.yy617), yymsp[0].minor.yy176);
                                                delete yymsp[-7].minor.yy499;
                                                delete yymsp[-1].minor.yy617;
                                                objectForTokens = yygotominor.yy16;
                                            }
        break;
      case 274: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING */
{
                                                yygotominor.yy16 = new SqliteUpsert(*(yymsp[-4].minor.yy499), yymsp[-2].minor.yy176);
                                                delete yymsp[-4].minor.yy499;
                                                objectForTokens = yygotominor.yy16;
                                            }
        break;
      case 275: /* upsert ::= ON CONFLICT DO NOTHING */
{
                                                yygotominor.yy16 = new SqliteUpsert();
                                                objectForTokens = yygotominor.yy16;
                                            }
        break;
      case 276: /* exprx ::= expr not_opt IN ID_DB */
{  yy_destructor(yypParser,227,&yymsp[-3].minor);
}
        break;
      case 277: /* exprx ::= expr not_opt IN nm DOT ID_TAB */
      case 278: /* exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN */ yytestcase(yyruleno==278);
{  yy_destructor(yypParser,227,&yymsp[-5].minor);
  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 279: /* exprx ::= tnm DOT ID_TAB|ID_COL */
{  yy_destructor(yypParser,235,&yymsp[-2].minor);
}
        break;
      case 280: /* exprx ::= tnm DOT nm DOT ID_COL */
{  yy_destructor(yypParser,235,&yymsp[-4].minor);
  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 281: /* exprx ::= expr COLLATE ID_COLLATE */
      case 282: /* exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP */ yytestcase(yyruleno==282);
{  yy_destructor(yypParser,227,&yymsp[-2].minor);
}
        break;
      case 283: /* exprx ::= CTIME_KW */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 284: /* exprx ::= LP nexprlist RP */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initRowValue(*(yymsp[-1].minor.yy567));
                                                delete yymsp[-1].minor.yy567;
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 285: /* exprx ::= tnm */
{
                                                yygotominor.yy176 = new SqliteExpr();
												if (yymsp[0].minor.yy542->isLiteral())
													yygotominor.yy176->initLiteral(yymsp[0].minor.yy542->toLiteral());
												else
													yygotominor.yy176->initId(yymsp[0].minor.yy542->toName());
													//parserContext->errorBeforeLastToken("Syntax error <expected literal value>");

                                                delete yymsp[0].minor.yy542;
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 286: /* exprx ::= tnm DOT nm */
{
                                                yygotominor.yy176 = new SqliteExpr();
												if (yymsp[-2].minor.yy542->isName())
													yygotominor.yy176->initId(yymsp[-2].minor.yy542->toName(), *(yymsp[0].minor.yy255));
												else
													parserContext->errorAtToken("Syntax error <expected name>", -3);

                                                delete yymsp[-2].minor.yy542;
                                                delete yymsp[0].minor.yy255;
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 287: /* exprx ::= tnm DOT */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                objectForTokens = yygotominor.yy176;
                                                if (yymsp[-1].minor.yy542->isName())
                                                {
                                                    yygotominor.yy176->initId(yymsp[-1].minor.yy542->toName(), QString());
                                                    parserContext->minorErrorAfterLastToken("Syntax error <expr>");
                                                }
                                                else
                                                    parserContext->errorAtToken("Syntax error <expected name>", -3);

                                                delete yymsp[-1].minor.yy542;
                                            }
        break;
      case 288: /* exprx ::= tnm DOT nm DOT nm */
{
                                                yygotominor.yy176 = new SqliteExpr();
												if (yymsp[-4].minor.yy542->isName())
													yygotominor.yy176->initId(yymsp[-4].minor.yy542->toName(), *(yymsp[-2].minor.yy255), *(yymsp[0].minor.yy255));
												else
													parserContext->errorAtToken("Syntax error <expected name>", -5);

                                                delete yymsp[-4].minor.yy542;
                                                delete yymsp[-2].minor.yy255;
                                                delete yymsp[0].minor.yy255;
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 289: /* exprx ::= tnm DOT nm DOT */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                objectForTokens = yygotominor.yy176;
                                                if (yymsp[-3].minor.yy542->isName())
                                                {
                                                    yygotominor.yy176->initId(yymsp[-3].minor.yy542->toName(), *(yymsp[-1].minor.yy255), QString());
                                                    parserContext->minorErrorAfterLastToken("Syntax error <expr>");
                                                }
                                                else
                                                    parserContext->errorAtToken("Syntax error <expected name>", -5);

                                                delete yymsp[-3].minor.yy542;
                                                delete yymsp[-1].minor.yy255;
                                            }
        break;
      case 290: /* exprx ::= VARIABLE */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initBindParam(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 291: /* exprx ::= expr COLLATE ids */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initCollate(yymsp[-2].minor.yy176, *(yymsp[0].minor.yy255));
                                                delete yymsp[0].minor.yy255;
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 292: /* exprx ::= CAST LP expr AS typetoken RP */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initCast(yymsp[-3].minor.yy176, yymsp[-1].minor.yy601);
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 293: /* exprx ::= ID LP distinct exprlist RP */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initFunction(stripObjName(yymsp[-4].minor.yy0->value), *(yymsp[-2].minor.yy562), *(yymsp[-1].minor.yy567));
                                                delete yymsp[-2].minor.yy562;
                                                delete yymsp[-1].minor.yy567;
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 294: /* exprx ::= ID LP STAR RP */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initFunction(stripObjName(yymsp[-3].minor.yy0->value), true);
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 295: /* exprx ::= expr AND expr */
      case 296: /* exprx ::= expr OR expr */ yytestcase(yyruleno==296);
      case 297: /* exprx ::= expr LT|GT|GE|LE expr */ yytestcase(yyruleno==297);
      case 298: /* exprx ::= expr EQ|NE expr */ yytestcase(yyruleno==298);
      case 299: /* exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */ yytestcase(yyruleno==299);
      case 300: /* exprx ::= expr PLUS|MINUS expr */ yytestcase(yyruleno==300);
      case 301: /* exprx ::= expr STAR|SLASH|REM expr */ yytestcase(yyruleno==301);
      case 302: /* exprx ::= expr CONCAT expr */ yytestcase(yyruleno==302);
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initBinOp(yymsp[-2].minor.yy176, yymsp[-1].minor.yy0->value, yymsp[0].minor.yy176);
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 303: /* exprx ::= expr not_opt likeop expr */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initLike(yymsp[-3].minor.yy176, *(yymsp[-2].minor.yy35), *(yymsp[-1].minor.yy104), yymsp[0].minor.yy176);
                                                delete yymsp[-2].minor.yy35;
                                                delete yymsp[-1].minor.yy104;
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 304: /* exprx ::= expr not_opt likeop expr ESCAPE expr */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initLike(yymsp[-5].minor.yy176, *(yymsp[-4].minor.yy35), *(yymsp[-3].minor.yy104), yymsp[-2].minor.yy176, yymsp[0].minor.yy176);
                                                delete yymsp[-4].minor.yy35;
                                                delete yymsp[-3].minor.yy104;
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 305: /* exprx ::= expr ISNULL|NOTNULL */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initNull(yymsp[-1].minor.yy176, yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 306: /* exprx ::= expr NOT NULL */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initNull(yymsp[-2].minor.yy176, "NOT NULL");
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 307: /* exprx ::= expr IS not_opt expr */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initIs(yymsp[-3].minor.yy176, *(yymsp[-1].minor.yy35), yymsp[0].minor.yy176);
                                                delete yymsp[-1].minor.yy35;
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 308: /* exprx ::= expr IS NOT DISTINCT FROM expr */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initDistinct(yymsp[-5].minor.yy176, true, yymsp[0].minor.yy176);
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 309: /* exprx ::= expr IS DISTINCT FROM expr */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initDistinct(yymsp[-4].minor.yy176, false, yymsp[0].minor.yy176);
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 310: /* exprx ::= NOT expr */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initUnaryOp(yymsp[0].minor.yy176, yymsp[-1].minor.yy0->value);
                                            }
        break;
      case 311: /* exprx ::= BITNOT expr */
      case 313: /* exprx ::= PLUS expr */ yytestcase(yyruleno==313);
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initUnaryOp(yymsp[0].minor.yy176, yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 312: /* exprx ::= MINUS expr */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                if (yymsp[0].minor.yy176->mode == SqliteExpr::Mode::LITERAL_VALUE &&
                                                    parserContext->isCandidateForMaxNegativeNumber() &&
                                                    yymsp[0].minor.yy176->literalValue == static_cast<qint64>(0L))
                                                {
                                                    yygotominor.yy176->initLiteral(std::numeric_limits<qint64>::min());
                                                    delete yymsp[0].minor.yy176;
                                                }
                                                else
                                                {
                                                    yygotominor.yy176->initUnaryOp(yymsp[0].minor.yy176, yymsp[-1].minor.yy0->value);
                                                }
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 314: /* exprx ::= expr PTR expr */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initPtrOp(yymsp[-2].minor.yy176, yymsp[-1].minor.yy0->value, yymsp[0].minor.yy176);
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 315: /* exprx ::= expr not_opt BETWEEN expr AND expr */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initBetween(yymsp[-5].minor.yy176, *(yymsp[-4].minor.yy35), yymsp[-2].minor.yy176, yymsp[0].minor.yy176);
                                                delete yymsp[-4].minor.yy35;
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 316: /* exprx ::= expr not_opt IN LP exprlist RP */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initIn(yymsp[-5].minor.yy176, *(yymsp[-4].minor.yy35), *(yymsp[-1].minor.yy567));
                                                delete yymsp[-4].minor.yy35;
                                                delete yymsp[-1].minor.yy567;
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 317: /* exprx ::= LP select RP */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initSubSelect(yymsp[-1].minor.yy73);
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 318: /* exprx ::= expr not_opt IN LP select RP */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initIn(yymsp[-5].minor.yy176, *(yymsp[-4].minor.yy35), yymsp[-1].minor.yy73);
                                                delete yymsp[-4].minor.yy35;
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 319: /* exprx ::= expr not_opt IN nm dbnm */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initIn(yymsp[-4].minor.yy176, *(yymsp[-3].minor.yy35), *(yymsp[-1].minor.yy255), *(yymsp[0].minor.yy255));
                                                delete yymsp[-3].minor.yy35;
                                                delete yymsp[-1].minor.yy255;
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 320: /* exprx ::= EXISTS LP select RP */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initExists(yymsp[-1].minor.yy73);
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 321: /* exprx ::= CASE case_operand case_exprlist case_else END */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initCase(yymsp[-3].minor.yy176, *(yymsp[-2].minor.yy567), yymsp[-1].minor.yy176);
                                                delete yymsp[-2].minor.yy567;
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 322: /* exprx ::= RAISE LP IGNORE RP */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initRaise(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 323: /* exprx ::= RAISE LP raisetype COMMA nm RP */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initRaise(yymsp[-3].minor.yy0->value, *(yymsp[-1].minor.yy255));
                                                delete yymsp[-1].minor.yy255;
                                                objectForTokens = yygotominor.yy176;
                                            }
        break;
      case 324: /* exprx ::= ID LP distinct exprlist RP filter_over */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initWindowFunction(stripObjName(yymsp[-5].minor.yy0->value), *(yymsp[-3].minor.yy562), *(yymsp[-2].minor.yy567), yymsp[0].minor.yy487);
                                                delete yymsp[-3].minor.yy562;
                                                delete yymsp[-2].minor.yy567;
                                                objectForTokens = yygotominor.yy176;
											}
        break;
      case 325: /* exprx ::= ID LP STAR RP filter_over */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                yygotominor.yy176->initWindowFunction(stripObjName(yymsp[-4].minor.yy0->value), yymsp[0].minor.yy487);
                                                objectForTokens = yygotominor.yy176;
											}
        break;
      case 326: /* expr ::= */
{
                                                yygotominor.yy176 = new SqliteExpr();
                                                objectForTokens = yygotominor.yy176;
                                                parserContext->minorErrorAfterLastToken("Syntax error <expr>");
                                            }
        break;
      case 332: /* likeop ::= LIKE_KW|MATCH */
{yygotominor.yy104 = new SqliteExpr::LikeOp(SqliteExpr::likeOp(yymsp[0].minor.yy0->value));}
        break;
      case 333: /* case_exprlist ::= case_exprlist WHEN expr THEN expr */
{
                                                yymsp[-4].minor.yy567->append(yymsp[-2].minor.yy176);
                                                yymsp[-4].minor.yy567->append(yymsp[0].minor.yy176);
                                                yygotominor.yy567 = yymsp[-4].minor.yy567;
                                            }
        break;
      case 334: /* case_exprlist ::= WHEN expr THEN expr */
{
                                                yygotominor.yy567 = new ParserExprList();
                                                yygotominor.yy567->append(yymsp[-2].minor.yy176);
                                                yygotominor.yy567->append(yymsp[0].minor.yy176);
                                            }
        break;
      case 341: /* nexprlist ::= nexprlist COMMA expr */
{
                                                yymsp[-2].minor.yy567->append(yymsp[0].minor.yy176);
                                                yygotominor.yy567 = yymsp[-2].minor.yy567;
                                                DONT_INHERIT_TOKENS("nexprlist");
                                            }
        break;
      case 342: /* nexprlist ::= exprx */
{
                                                yygotominor.yy567 = new ParserExprList();
                                                yygotominor.yy567->append(yymsp[0].minor.yy176);
                                            }
        break;
      case 343: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt */
{
                                                yygotominor.yy635 = new SqliteCreateIndex(
                                                        *(yymsp[-10].minor.yy35),
                                                        *(yymsp[-8].minor.yy35),
                                                        *(yymsp[-7].minor.yy255),
                                                        *(yymsp[-6].minor.yy255),
                                                        *(yymsp[-4].minor.yy255),
                                                        *(yymsp[-2].minor.yy499),
                                                        yymsp[0].minor.yy176
                                                    );
                                                delete yymsp[-8].minor.yy35;
                                                delete yymsp[-10].minor.yy35;
                                                delete yymsp[-7].minor.yy255;
                                                delete yymsp[-6].minor.yy255;
                                                delete yymsp[-4].minor.yy255;
                                                delete yymsp[-2].minor.yy499;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 344: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB */
{  yy_destructor(yypParser,203,&yymsp[-3].minor);
}
        break;
      case 349: /* idxlist_opt ::= */
{yygotominor.yy527 = new ParserIndexedColumnList();}
        break;
      case 350: /* idxlist_opt ::= LP idxlist RP */
{yygotominor.yy527 = yymsp[-1].minor.yy527;}
        break;
      case 351: /* idxlist ::= idxlist COMMA idxlist_single */
{
                                                yymsp[-2].minor.yy527->append(yymsp[0].minor.yy540);
                                                yygotominor.yy527 = yymsp[-2].minor.yy527;
                                                DONT_INHERIT_TOKENS("idxlist");
                                            }
        break;
      case 352: /* idxlist ::= idxlist_single */
{
                                                yygotominor.yy527 = new ParserIndexedColumnList();
                                                yygotominor.yy527->append(yymsp[0].minor.yy540);
                                            }
        break;
      case 353: /* idxlist_single ::= nm collate sortorder */
      case 354: /* idxlist_single ::= ID_COL */ yytestcase(yyruleno==354);
{
                                                SqliteIndexedColumn* obj =
                                                    new SqliteIndexedColumn(
                                                        *(yymsp[-2].minor.yy255),
                                                        *(yymsp[-1].minor.yy255),
                                                        *(yymsp[0].minor.yy645)
                                                    );
                                                yygotominor.yy540 = obj;
                                                delete yymsp[0].minor.yy645;
                                                delete yymsp[-2].minor.yy255;
                                                delete yymsp[-1].minor.yy255;
                                                objectForTokens = yygotominor.yy540;
                                            }
        break;
      case 358: /* cmd ::= DROP INDEX ifexists fullname */
{
                                                yygotominor.yy635 = new SqliteDropIndex(*(yymsp[-1].minor.yy35), yymsp[0].minor.yy520->name1, yymsp[0].minor.yy520->name2);
                                                delete yymsp[-1].minor.yy35;
                                                delete yymsp[0].minor.yy520;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 361: /* cmd ::= VACUUM vinto */
{
                                                yygotominor.yy635 = new SqliteVacuum(yymsp[0].minor.yy176);
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 362: /* cmd ::= VACUUM nm vinto */
{
                                                yygotominor.yy635 = new SqliteVacuum(*(yymsp[-1].minor.yy255), yymsp[0].minor.yy176);
                                                delete yymsp[-1].minor.yy255;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 365: /* cmd ::= PRAGMA nm dbnm */
{
                                                yygotominor.yy635 = new SqlitePragma(*(yymsp[-1].minor.yy255), *(yymsp[0].minor.yy255));
                                                delete yymsp[-1].minor.yy255;
                                                delete yymsp[0].minor.yy255;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 366: /* cmd ::= PRAGMA nm dbnm EQ nmnum */
      case 368: /* cmd ::= PRAGMA nm dbnm EQ minus_num */ yytestcase(yyruleno==368);
{
                                                yygotominor.yy635 = new SqlitePragma(*(yymsp[-3].minor.yy255), *(yymsp[-2].minor.yy255), *(yymsp[0].minor.yy629), true);
                                                delete yymsp[-3].minor.yy255;
                                                delete yymsp[-2].minor.yy255;
                                                delete yymsp[0].minor.yy629;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 367: /* cmd ::= PRAGMA nm dbnm LP nmnum RP */
      case 369: /* cmd ::= PRAGMA nm dbnm LP minus_num RP */ yytestcase(yyruleno==369);
{
                                                yygotominor.yy635 = new SqlitePragma(*(yymsp[-4].minor.yy255), *(yymsp[-3].minor.yy255), *(yymsp[-1].minor.yy629), false);
                                                delete yymsp[-4].minor.yy255;
                                                delete yymsp[-3].minor.yy255;
                                                delete yymsp[-1].minor.yy629;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 373: /* nmnum ::= nm */
{
                                                yygotominor.yy629 = new QVariant(*(yymsp[0].minor.yy255));
                                                delete yymsp[0].minor.yy255;
                                            }
        break;
      case 374: /* nmnum ::= ON */
      case 375: /* nmnum ::= DELETE */ yytestcase(yyruleno==375);
      case 376: /* nmnum ::= DEFAULT */ yytestcase(yyruleno==376);
{yygotominor.yy629 = new QVariant(yymsp[0].minor.yy0->value);}
        break;
      case 379: /* minus_num ::= MINUS number */
{
                                                if (yymsp[0].minor.yy629->type() == QVariant::Double)
                                                    *(yymsp[0].minor.yy629) = -(yymsp[0].minor.yy629->toDouble());
                                                else if (yymsp[0].minor.yy629->type() == QVariant::LongLong)
                                                {
                                                    if (parserContext->isCandidateForMaxNegativeNumber())
                                                        *(yymsp[0].minor.yy629) = std::numeric_limits<qint64>::min();
                                                    else
                                                        *(yymsp[0].minor.yy629) = -(yymsp[0].minor.yy629->toLongLong());
                                                }
                                                else
                                                    Q_ASSERT_X(true, "producing minus number", "QVariant is neither of Double or LongLong.");

                                                yygotominor.yy629 = yymsp[0].minor.yy629;
                                            }
        break;
      case 382: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END */
{
                                                yygotominor.yy635 = new SqliteCreateTrigger(
                                                        *(yymsp[-13].minor.yy562),
                                                        *(yymsp[-11].minor.yy35),
                                                        *(yymsp[-10].minor.yy255),
                                                        *(yymsp[-9].minor.yy255),
                                                        *(yymsp[-5].minor.yy255),
                                                        *(yymsp[-8].minor.yy612),
                                                        yymsp[-7].minor.yy407,
                                                        *(yymsp[-4].minor.yy403),
                                                        yymsp[-3].minor.yy176,
                                                        *(yymsp[-1].minor.yy575),
                                                        3
                                                    );
                                                delete yymsp[-11].minor.yy35;
                                                delete yymsp[-13].minor.yy562;
                                                delete yymsp[-8].minor.yy612;
                                                delete yymsp[-4].minor.yy403;
                                                delete yymsp[-10].minor.yy255;
                                                delete yymsp[-5].minor.yy255;
                                                delete yymsp[-9].minor.yy255;
                                                delete yymsp[-1].minor.yy575;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 383: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause */
{
                                                QList<SqliteQuery *> CL;

                                                yygotominor.yy635 = new SqliteCreateTrigger(
                                                        *(yymsp[-10].minor.yy562),
                                                        *(yymsp[-8].minor.yy35),
                                                        *(yymsp[-7].minor.yy255),
                                                        *(yymsp[-6].minor.yy255),
                                                        *(yymsp[-2].minor.yy255),
                                                        *(yymsp[-5].minor.yy612),
                                                        yymsp[-4].minor.yy407,
                                                        *(yymsp[-1].minor.yy403),
                                                        yymsp[0].minor.yy176,
                                                        CL,
                                                        3
                                                    );
                                                delete yymsp[-8].minor.yy35;
                                                delete yymsp[-10].minor.yy562;
                                                delete yymsp[-5].minor.yy612;
                                                delete yymsp[-1].minor.yy403;
                                                delete yymsp[-7].minor.yy255;
                                                delete yymsp[-2].minor.yy255;
                                                delete yymsp[-6].minor.yy255;
                                                objectForTokens = yygotominor.yy635;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 384: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list */
{
                                                yygotominor.yy635 = new SqliteCreateTrigger(
													*(yymsp[-12].minor.yy562),
													*(yymsp[-10].minor.yy35),
													*(yymsp[-9].minor.yy255),
													*(yymsp[-8].minor.yy255),
													*(yymsp[-4].minor.yy255),
													*(yymsp[-7].minor.yy612),
													yymsp[-6].minor.yy407,
													*(yymsp[-3].minor.yy403),
													yymsp[-2].minor.yy176,
													*(yymsp[0].minor.yy575),
													3
                                                );
                                                delete yymsp[-10].minor.yy35;
                                                delete yymsp[-12].minor.yy562;
                                                delete yymsp[-7].minor.yy612;
                                                delete yymsp[-3].minor.yy403;
                                                delete yymsp[-9].minor.yy255;
                                                delete yymsp[-4].minor.yy255;
                                                delete yymsp[-8].minor.yy255;
                                                delete yymsp[0].minor.yy575;
                                                objectForTokens = yygotominor.yy635;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 385: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB */
{  yy_destructor(yypParser,205,&yymsp[-8].minor);
  yy_destructor(yypParser,203,&yymsp[-5].minor);
  yy_destructor(yypParser,299,&yymsp[-3].minor);
  yy_destructor(yypParser,300,&yymsp[-2].minor);
}
        break;
      case 388: /* trigger_time ::= BEFORE */
{yygotominor.yy612 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::BEFORE);}
        break;
      case 389: /* trigger_time ::= AFTER */
{yygotominor.yy612 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::AFTER);}
        break;
      case 390: /* trigger_time ::= INSTEAD OF */
{yygotominor.yy612 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::INSTEAD_OF);}
        break;
      case 391: /* trigger_time ::= */
{yygotominor.yy612 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::null);}
        break;
      case 392: /* trigger_event ::= DELETE */
{
                                                yygotominor.yy407 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::DELETE);
                                                objectForTokens = yygotominor.yy407;
                                            }
        break;
      case 393: /* trigger_event ::= INSERT */
{
                                                yygotominor.yy407 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::INSERT);
                                                objectForTokens = yygotominor.yy407;
                                            }
        break;
      case 394: /* trigger_event ::= UPDATE */
{
                                                yygotominor.yy407 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::UPDATE);
                                                objectForTokens = yygotominor.yy407;
                                            }
        break;
      case 395: /* trigger_event ::= UPDATE OF idlist */
{
                                                yygotominor.yy407 = new SqliteCreateTrigger::Event(*(yymsp[0].minor.yy336));
                                                delete yymsp[0].minor.yy336;
                                                objectForTokens = yygotominor.yy407;
                                            }
        break;
      case 396: /* foreach_clause ::= */
{yygotominor.yy403 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::null);}
        break;
      case 397: /* foreach_clause ::= FOR EACH ROW */
{yygotominor.yy403 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::FOR_EACH_ROW);}
        break;
      case 400: /* trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI */
{
                                                yymsp[-2].minor.yy575->append(yymsp[-1].minor.yy635);
                                                yygotominor.yy575 = yymsp[-2].minor.yy575;
                                                DONT_INHERIT_TOKENS("trigger_cmd_list");
                                            }
        break;
      case 401: /* trigger_cmd_list ::= trigger_cmd SEMI */
{
                                                yygotominor.yy575 = new ParserQueryList();
                                                yygotominor.yy575->append(yymsp[-1].minor.yy635);
                                            }
        break;
      case 402: /* trigger_cmd_list ::= SEMI */
{
                                                yygotominor.yy575 = new ParserQueryList();
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 407: /* raisetype ::= ROLLBACK|ABORT|FAIL */
{yygotominor.yy0 = yymsp[0].minor.yy0;}
        break;
      case 408: /* cmd ::= DROP TRIGGER ifexists fullname */
{
                                                yygotominor.yy635 = new SqliteDropTrigger(*(yymsp[-1].minor.yy35), yymsp[0].minor.yy520->name1, yymsp[0].minor.yy520->name2);
                                                delete yymsp[-1].minor.yy35;
                                                delete yymsp[0].minor.yy520;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 411: /* cmd ::= ATTACH database_kw_opt expr AS expr key_opt */
{
                                                yygotominor.yy635 = new SqliteAttach(*(yymsp[-4].minor.yy35), yymsp[-3].minor.yy176, yymsp[-1].minor.yy176, yymsp[0].minor.yy176);
                                                delete yymsp[-4].minor.yy35;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 412: /* cmd ::= DETACH database_kw_opt expr */
{
                                                yygotominor.yy635 = new SqliteDetach(*(yymsp[-1].minor.yy35), yymsp[0].minor.yy176);
                                                delete yymsp[-1].minor.yy35;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 417: /* cmd ::= REINDEX */
{yygotominor.yy635 = new SqliteReindex();}
        break;
      case 418: /* cmd ::= REINDEX nm dbnm */
      case 419: /* cmd ::= REINDEX ID_COLLATE */ yytestcase(yyruleno==419);
{
                                                yygotominor.yy635 = new SqliteReindex(*(yymsp[-1].minor.yy255), *(yymsp[0].minor.yy255));
                                                delete yymsp[-1].minor.yy255;
                                                delete yymsp[0].minor.yy255;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 422: /* cmd ::= ANALYZE */
{
                                                yygotominor.yy635 = new SqliteAnalyze();
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 423: /* cmd ::= ANALYZE nm dbnm */
{
                                                yygotominor.yy635 = new SqliteAnalyze(*(yymsp[-1].minor.yy255), *(yymsp[0].minor.yy255));
                                                delete yymsp[-1].minor.yy255;
                                                delete yymsp[0].minor.yy255;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 426: /* cmd ::= ALTER TABLE fullname RENAME TO nm */
{
                                                yygotominor.yy635 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy520->name1,
                                                        yymsp[-3].minor.yy520->name2,
                                                        *(yymsp[0].minor.yy255)
                                                    );
                                                delete yymsp[0].minor.yy255;
                                                delete yymsp[-3].minor.yy520;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 427: /* cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column */
{
                                                yygotominor.yy635 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy520->name1,
                                                        yymsp[-3].minor.yy520->name2,
                                                        *(yymsp[-1].minor.yy35),
                                                        yymsp[0].minor.yy115
                                                    );
                                                delete yymsp[-1].minor.yy35;
                                                delete yymsp[-3].minor.yy520;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 428: /* cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm */
{
                                                yygotominor.yy635 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy520->name1,
                                                        yymsp[-3].minor.yy520->name2,
                                                        *(yymsp[-1].minor.yy35),
                                                        *(yymsp[0].minor.yy255)
                                                    );
                                                delete yymsp[-1].minor.yy35;
                                                delete yymsp[-3].minor.yy520;
                                                delete yymsp[0].minor.yy255;
                                            }
        break;
      case 429: /* cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW */
{  yy_destructor(yypParser,207,&yymsp[-3].minor);
}
        break;
      case 435: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm */
{
                                                yygotominor.yy635 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-4].minor.yy35),
                                                        *(yymsp[-3].minor.yy255),
                                                        *(yymsp[-2].minor.yy255),
                                                        *(yymsp[0].minor.yy255)
                                                    );
                                                delete yymsp[-4].minor.yy35;
                                                delete yymsp[-3].minor.yy255;
                                                delete yymsp[-2].minor.yy255;
                                                delete yymsp[0].minor.yy255;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 436: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP */
{
                                                yygotominor.yy635 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-7].minor.yy35),
                                                        *(yymsp[-6].minor.yy255),
                                                        *(yymsp[-5].minor.yy255),
                                                        *(yymsp[-3].minor.yy255),
                                                        *(yymsp[-1].minor.yy336)
                                                    );
                                                delete yymsp[-6].minor.yy255;
                                                delete yymsp[-5].minor.yy255;
                                                delete yymsp[-3].minor.yy255;
                                                delete yymsp[-7].minor.yy35;
                                                delete yymsp[-1].minor.yy336;
                                                objectForTokens = yygotominor.yy635;
                                            }
        break;
      case 439: /* vtabarglist ::= vtabarg */
{
                                                yygotominor.yy336 = new QStringList();
                                                yygotominor.yy336->append((yymsp[0].minor.yy255)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                delete yymsp[0].minor.yy255;
                                            }
        break;
      case 440: /* vtabarglist ::= vtabarglist COMMA vtabarg */
{
                                                yymsp[-2].minor.yy336->append((yymsp[0].minor.yy255)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                yygotominor.yy336 = yymsp[-2].minor.yy336;
                                                delete yymsp[0].minor.yy255;
                                                DONT_INHERIT_TOKENS("vtabarglist");
                                            }
        break;
      case 442: /* vtabarg ::= vtabarg vtabargtoken */
{
                                                yymsp[-1].minor.yy255->append(" "+ *(yymsp[0].minor.yy255));
                                                yygotominor.yy255 = yymsp[-1].minor.yy255;
                                                delete yymsp[0].minor.yy255;
                                            }
        break;
      case 443: /* vtabargtoken ::= ANY */
{
                                                yygotominor.yy255 = new QString(yymsp[0].minor.yy0->value);
                                            }
        break;
      case 444: /* vtabargtoken ::= LP anylist RP */
{
                                                yygotominor.yy255 = new QString("(");
                                                yygotominor.yy255->append(*(yymsp[-1].minor.yy255));
                                                yygotominor.yy255->append(")");
                                                delete yymsp[-1].minor.yy255;
                                            }
        break;
      case 446: /* anylist ::= anylist LP anylist RP */
{
                                                yygotominor.yy255 = yymsp[-3].minor.yy255;
                                                yygotominor.yy255->append("(");
                                                yygotominor.yy255->append(*(yymsp[-1].minor.yy255));
                                                yygotominor.yy255->append(")");
                                                delete yymsp[-1].minor.yy255;
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 447: /* anylist ::= anylist ANY */
{
                                                yygotominor.yy255 = yymsp[-1].minor.yy255;
                                                yygotominor.yy255->append(yymsp[0].minor.yy0->value);
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 448: /* with ::= */
{yygotominor.yy321 = nullptr;}
        break;
      case 449: /* with ::= WITH wqlist */
{
                                                yygotominor.yy321 = new SqliteWith();
												yygotominor.yy321->cteList = *(yymsp[0].minor.yy17);
												delete yymsp[0].minor.yy17;
                                                objectForTokens = yygotominor.yy321;
                                            }
        break;
      case 450: /* with ::= WITH RECURSIVE wqlist */
{
                                                yygotominor.yy321 = new SqliteWith();
												yygotominor.yy321->cteList = *(yymsp[0].minor.yy17);
                                                yygotominor.yy321->recursive = true;
												delete yymsp[0].minor.yy17;
                                                objectForTokens = yygotominor.yy321;
                                            }
        break;
      case 451: /* wqas ::= AS */
{yygotominor.yy383 = new SqliteWith::CommonTableExpression::AsMode(SqliteWith::CommonTableExpression::ANY);}
        break;
      case 452: /* wqas ::= AS MATERIALIZED */
{yygotominor.yy383 = new SqliteWith::CommonTableExpression::AsMode(SqliteWith::CommonTableExpression::MATERIALIZED);}
        break;
      case 453: /* wqas ::= AS NOT MATERIALIZED */
{yygotominor.yy383 = new SqliteWith::CommonTableExpression::AsMode(SqliteWith::CommonTableExpression::NOT_MATERIALIZED);}
        break;
      case 454: /* wqlist ::= wqcte */
{
												yygotominor.yy17 = new ParserCteList();
                                                yygotominor.yy17->append(yymsp[0].minor.yy366);
                                            }
        break;
      case 455: /* wqlist ::= wqlist COMMA wqcte */
{
                                                yygotominor.yy17 = yymsp[-2].minor.yy17;
                                                yygotominor.yy17->append(yymsp[0].minor.yy366);
                                                DONT_INHERIT_TOKENS("wqlist");
                                            }
        break;
      case 456: /* wqlist ::= ID_TAB_NEW */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                            }
        break;
      case 457: /* wqcte ::= nm idxlist_opt wqas LP select RP */
{
                                                yygotominor.yy366 = new SqliteWith::CommonTableExpression(*(yymsp[-5].minor.yy255), *(yymsp[-4].minor.yy527), yymsp[-1].minor.yy73, *(yymsp[-3].minor.yy383));
                                                delete yymsp[-5].minor.yy255;
                                                delete yymsp[-4].minor.yy527;
                                                delete yymsp[-3].minor.yy383;
												objectForTokens = yygotominor.yy366;
											}
        break;
      case 458: /* windowdefn_list ::= windowdefn */
{
												yygotominor.yy555 = new ParserWindowDefList();
												yygotominor.yy555->append(yymsp[0].minor.yy74);
											}
        break;
      case 459: /* windowdefn_list ::= windowdefn_list COMMA windowdefn */
{
												yymsp[-2].minor.yy555->append(yymsp[0].minor.yy74);
												yygotominor.yy555 = yymsp[-2].minor.yy555;
												DONT_INHERIT_TOKENS("windowdefn_list");
											}
        break;
      case 460: /* windowdefn ::= nm AS LP window RP */
{
												yygotominor.yy74 = new SqliteWindowDefinition(*(yymsp[-4].minor.yy255), yymsp[-1].minor.yy14);
												delete yymsp[-4].minor.yy255;
												objectForTokens = yygotominor.yy74;
											}
        break;
      case 461: /* window ::= PARTITION BY nexprlist orderby_opt frame_opt */
{
												yygotominor.yy14 = new SqliteWindowDefinition::Window();
												yygotominor.yy14->initPartitionBy(QString(), *(yymsp[-2].minor.yy567), *(yymsp[-1].minor.yy499), yymsp[0].minor.yy585);
												delete yymsp[-2].minor.yy567;
												delete yymsp[-1].minor.yy499;
												objectForTokens = yygotominor.yy14;
											}
        break;
      case 462: /* window ::= nm PARTITION BY nexprlist orderby_opt frame_opt */
{
												yygotominor.yy14 = new SqliteWindowDefinition::Window();
												yygotominor.yy14->initPartitionBy(*(yymsp[-5].minor.yy255), *(yymsp[-2].minor.yy567), *(yymsp[-1].minor.yy499), yymsp[0].minor.yy585);
												delete yymsp[-2].minor.yy567;
												delete yymsp[-5].minor.yy255;
												delete yymsp[-1].minor.yy499;
												objectForTokens = yygotominor.yy14;
											}
        break;
      case 463: /* window ::= ORDER BY sortlist frame_opt */
{
												yygotominor.yy14 = new SqliteWindowDefinition::Window();
												yygotominor.yy14->initOrderBy(QString(), *(yymsp[-1].minor.yy499), yymsp[0].minor.yy585);
												delete yymsp[-1].minor.yy499;
												objectForTokens = yygotominor.yy14;
											}
        break;
      case 464: /* window ::= nm ORDER BY sortlist frame_opt */
{
												yygotominor.yy14 = new SqliteWindowDefinition::Window();
												yygotominor.yy14->initOrderBy(*(yymsp[-4].minor.yy255), *(yymsp[-1].minor.yy499), yymsp[0].minor.yy585);
												delete yymsp[-1].minor.yy499;
												delete yymsp[-4].minor.yy255;
												objectForTokens = yygotominor.yy14;
											}
        break;
      case 465: /* window ::= frame_opt */
{
												yygotominor.yy14 = new SqliteWindowDefinition::Window();
												yygotominor.yy14->init(QString(), yymsp[0].minor.yy585);
												objectForTokens = yygotominor.yy14;
											}
        break;
      case 466: /* window ::= nm frame_opt */
{
												yygotominor.yy14 = new SqliteWindowDefinition::Window();
												yygotominor.yy14->init(QString(), yymsp[0].minor.yy585);
												delete yymsp[-1].minor.yy255;
												objectForTokens = yygotominor.yy14;
											}
        break;
      case 467: /* frame_opt ::= */
{yygotominor.yy585 = nullptr;}
        break;
      case 468: /* frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt */
{
												yygotominor.yy585 = new SqliteWindowDefinition::Window::Frame(*(yymsp[-2].minor.yy34), yymsp[-1].minor.yy394, nullptr, *(yymsp[0].minor.yy337));
												delete yymsp[-2].minor.yy34;
												delete yymsp[0].minor.yy337;
												objectForTokens = yygotominor.yy585;
											}
        break;
      case 469: /* frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt */
{
												yygotominor.yy585 = new SqliteWindowDefinition::Window::Frame(*(yymsp[-5].minor.yy34), yymsp[-3].minor.yy394, yymsp[-1].minor.yy394, *(yymsp[0].minor.yy337));
												delete yymsp[-5].minor.yy34;
												delete yymsp[0].minor.yy337;
												objectForTokens = yygotominor.yy585;
											}
        break;
      case 470: /* range_or_rows ::= RANGE|ROWS|GROUPS */
{
												yygotominor.yy34 = new SqliteWindowDefinition::Window::Frame::RangeOrRows(
													SqliteWindowDefinition::Window::Frame::toRangeOrRows(yymsp[0].minor.yy0->value)
													);
											}
        break;
      case 471: /* frame_bound_s ::= frame_bound */
      case 473: /* frame_bound_e ::= frame_bound */ yytestcase(yyruleno==473);
{
												yygotominor.yy394 = yymsp[0].minor.yy394;
												objectForTokens = yygotominor.yy394;
											}
        break;
      case 472: /* frame_bound_s ::= UNBOUNDED PRECEDING */
      case 474: /* frame_bound_e ::= UNBOUNDED FOLLOWING */ yytestcase(yyruleno==474);
      case 476: /* frame_bound ::= CURRENT ROW */ yytestcase(yyruleno==476);
{
												yygotominor.yy394 = new SqliteWindowDefinition::Window::Frame::Bound(nullptr, yymsp[-1].minor.yy0->value + " " + yymsp[0].minor.yy0->value);
												objectForTokens = yygotominor.yy394;
											}
        break;
      case 475: /* frame_bound ::= expr PRECEDING|FOLLOWING */
{
												yygotominor.yy394 = new SqliteWindowDefinition::Window::Frame::Bound(yymsp[-1].minor.yy176, yymsp[0].minor.yy0->value);
												objectForTokens = yygotominor.yy394;
											}
        break;
      case 477: /* frame_exclude_opt ::= */
{
												yygotominor.yy337 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::null
													);
											}
        break;
      case 478: /* frame_exclude_opt ::= EXCLUDE frame_exclude */
{
												yygotominor.yy337 = yymsp[0].minor.yy337;
											}
        break;
      case 479: /* frame_exclude ::= NO OTHERS */
{
												yygotominor.yy337 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::NO_OTHERS
													);
											}
        break;
      case 480: /* frame_exclude ::= CURRENT ROW */
{
												yygotominor.yy337 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::CURRENT_ROW
													);
											}
        break;
      case 481: /* frame_exclude ::= GROUP */
{
												yygotominor.yy337 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::GROUP
													);
											}
        break;
      case 482: /* frame_exclude ::= TIES */
{
												yygotominor.yy337 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::TIES
													);
											}
        break;
      case 483: /* window_clause ::= WINDOW windowdefn_list */
{
												yygotominor.yy555 = yymsp[0].minor.yy555;
											}
        break;
      case 484: /* filter_over ::= filter_clause over_clause */
{
												yygotominor.yy487 = new SqliteFilterOver(yymsp[-1].minor.yy269, yymsp[0].minor.yy231);
												objectForTokens = yygotominor.yy487;
											}
        break;
      case 485: /* filter_over ::= over_clause */
{
												yygotominor.yy487 = new SqliteFilterOver(nullptr, yymsp[0].minor.yy231);
												objectForTokens = yygotominor.yy487;
											}
        break;
      case 486: /* filter_over ::= filter_clause */
{
												yygotominor.yy487 = new SqliteFilterOver(yymsp[0].minor.yy269, nullptr);
												objectForTokens = yygotominor.yy487;
											}
        break;
      case 487: /* over_clause ::= OVER LP window RP */
{
												yygotominor.yy231 = new SqliteFilterOver::Over(yymsp[-1].minor.yy14);
												objectForTokens = yygotominor.yy231;
											}
        break;
      case 488: /* over_clause ::= OVER nm */
{
												yygotominor.yy231 = new SqliteFilterOver::Over(*(yymsp[0].minor.yy255));
												delete yymsp[0].minor.yy255;
												objectForTokens = yygotominor.yy231;
											}
        break;
      case 489: /* filter_clause ::= FILTER LP WHERE expr RP */
{
												yygotominor.yy269 = new SqliteFilterOver::Filter(yymsp[-1].minor.yy176);
												objectForTokens = yygotominor.yy269;
                                            }
        break;
      default:
      /* (0) input ::= cmdlist */ yytestcase(yyruleno==0);
        break;
      };
  }
  assert( yyruleno>=0 && yyruleno<(int)(sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0])) );
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;

  // Store tokens for the rule in parser context
  QList<Token*> allTokens;
  QList<Token*> allTokensWithAllInherited;
  QString keyForTokensMap;
  int tokensMapKeyCnt;
  if (parserContext->setupTokens)
  {
      if (objectForTokens)
      {
          // In case this is a list with recurrent references we need
          // to clear tokens before adding the new and extended list.
          objectForTokens->tokens.clear();
      }

      QList<Token*> tokens;
      for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
      {
          tokens.clear();
          const char* fieldName = yyTokenName[yypParser->yystack[i].major];

          // Adding token being subject of this reduction. It's usually not includes in the inherited tokens,
          // although if inheriting from simple statements, like "FAIL" or "ROLLBACK", this tends to be redundant with the inherited tokens.
          // That's why we're checking if it's not contained in the inherited tokens and add it only then.
          if (parserContext->isManagedToken(yypParser->yystack[i].minor.yy0) && !yypParser->yystack[i].tokens->contains(yypParser->yystack[i].minor.yy0))
              tokens += yypParser->yystack[i].minor.yy0;

          tokens += *(yypParser->yystack[i].tokens);

          if (!noTokenInheritanceFields.contains(fieldName))
          {
              if (objectForTokens)
              {
                  keyForTokensMap = fieldName;
                  tokensMapKeyCnt = 2;
                  while (objectForTokens->tokensMap.contains(keyForTokensMap))
                      keyForTokensMap = fieldName + QString::number(tokensMapKeyCnt++);

                  objectForTokens->tokensMap[keyForTokensMap] = parserContext->getTokenPtrList(tokens);
              }

              allTokens += tokens;
          }
          else
          {
              // If field is mentioned only once, then only one occurance of it will be ignored.
              // Second one should be inherited. See "anylist" definition for explanation why.
              noTokenInheritanceFields.removeOne(fieldName);
          }
          allTokensWithAllInherited += tokens;
      }
      if (objectForTokens)
      {
          objectForTokens->tokens += parserContext->getTokenPtrList(allTokens);
      }
  }

  // Clear token lists
  for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
  {
      delete yypParser->yystack[i].tokens;
      yypParser->yystack[i].tokens = nullptr;
  }

  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
      if (parserContext->setupTokens)
          *(yypParser->yystack[yypParser->yyidx].tokens) = allTokens;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
      if (parserContext->setupTokens && yypParser->yyidx >= 0)
      {
          QList<Token*>* tokensPtr = yypParser->yystack[yypParser->yyidx].tokens;
          *tokensPtr = allTokensWithAllInherited + *tokensPtr;
      }
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  sqlite3_parseARG_FETCH;
#define TOKEN (yyminor.yy0)

    UNUSED_PARAMETER(yymajor);
    parserContext->error(TOKEN, QObject::tr("Syntax error"));
    //qDebug() << "near " << TOKEN->toString() << ": syntax error";
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "sqlite3_parseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  sqlite3_parseTOKENTYPE yyminor       /* The value for the token */
  sqlite3_parseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
    yypParser->yystack[0].tokens = new QList<Token*>();
  }
  yyminorunion.yy0 = yyminor;
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif
  sqlite3_parseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s [%s] (lemon type: %s)\n",
            yyTracePrompt,
            yyminor->value.toLatin1().data(),
            yyminor->typeString().toLatin1().data(),
            yyTokenName[yymajor]);  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;

#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}

int sqlite3ParserFallback(int iToken) {
    return yyFallback[iToken];
}
