/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
**
** This version of "lempar.c" is modified, slightly, for use by SQLite.
** The only modifications are the addition of a couple of NEVER()
** macros to disable tests that are needed in the case of a general
** LALR(1) grammar but which are always false in the
** specific grammar used by SQLite.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>

#include "token.h"
#include "parsercontext.h"
#include "parser_helper_stubs.h"
#include "common/utils_sql.h"
#include "common/global.h"
#include "common/unused.h"
#include "parser/ast/sqlitealtertable.h"
#include "parser/ast/sqliteanalyze.h"
#include "parser/ast/sqliteattach.h"
#include "parser/ast/sqlitebegintrans.h"
#include "parser/ast/sqlitecommittrans.h"
#include "parser/ast/sqlitecreateindex.h"
#include "parser/ast/sqlitecreatetable.h"
#include "parser/ast/sqlitecreatetrigger.h"
#include "parser/ast/sqlitecreateview.h"
#include "parser/ast/sqlitecreatevirtualtable.h"
#include "parser/ast/sqlitedelete.h"
#include "parser/ast/sqlitedetach.h"
#include "parser/ast/sqlitedropindex.h"
#include "parser/ast/sqlitedroptable.h"
#include "parser/ast/sqlitedroptrigger.h"
#include "parser/ast/sqlitedropview.h"
#include "parser/ast/sqliteemptyquery.h"
#include "parser/ast/sqliteinsert.h"
#include "parser/ast/sqlitepragma.h"
#include "parser/ast/sqlitereindex.h"
#include "parser/ast/sqliterelease.h"
#include "parser/ast/sqliterollback.h"
#include "parser/ast/sqlitesavepoint.h"
#include "parser/ast/sqliteselect.h"
#include "parser/ast/sqliteupdate.h"
#include "parser/ast/sqlitevacuum.h"
#include "parser/ast/sqliteexpr.h"
#include "parser/ast/sqlitecolumntype.h"
#include "parser/ast/sqliteconflictalgo.h"
#include "parser/ast/sqlitesortorder.h"
#include "parser/ast/sqliteindexedcolumn.h"
#include "parser/ast/sqliteforeignkey.h"
#include "parser/ast/sqlitewith.h"
#include "parser/ast/sqliteupsert.h"
#include "parser/ast/sqlitewindowdefinition.h"
#include "parser/ast/sqlitefilterover.h"
#include "parser/ast/sqlitenulls.h"
#include <QObject>
#include <QDebug>
#include <limits.h>

#define assert(X) Q_ASSERT(X)
#define UNUSED_PARAMETER(X) (void)(X)
#define DONT_INHERIT_TOKENS(X) noTokenInheritanceFields << X

/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/*
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands.
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    sqlite3_parseTOKENTYPE     is the data type used for minor tokens given
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is sqlite3_parseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    sqlite3_parseARG_SDECL     A static variable declaration for the %extra_argument
**    sqlite3_parseARG_PDECL     A parameter declaration for the %extra_argument
**    sqlite3_parseARG_STORE     Code to store %extra_argument into yypParser
**    sqlite3_parseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned short int
#define YYNOCODE 331
#define YYACTIONTYPE unsigned short int
#define YYWILDCARD 79
#define sqlite3_parseTOKENTYPE Token*
typedef union {
  int yyinit;
  sqlite3_parseTOKENTYPE yy0;
  ParserOtherSourceList* yy11;
  SqliteWindowDefinition::Window::Frame* yy41;
  ParserCreateTableColumnList* yy42;
  ParserFullName* yy60;
  SqliteWindowDefinition::Window::Frame::Bound* yy81;
  SqliteSelect::Core::JoinSource* yy91;
  SqliteNulls* yy99;
  SqliteExpr::LikeOp* yy100;
  SqliteCreateTable::Constraint* yy106;
  ParserXFullName* yy116;
  ParserIndexedColumnList* yy123;
  SqliteForeignKey::Condition::Reaction* yy124;
  ParserCreateTableColumnConstraintList* yy131;
  SqliteInitially* yy192;
  QStringList* yy215;
  SqliteWindowDefinition::Window* yy234;
  SqliteFilterOver* yy247;
  QVariant* yy249;
  SqliteExpr* yy252;
  QString* yy259;
  ParserStubCreateTableOption* yy287;
  SqliteFilterOver::Over* yy288;
  bool* yy291;
  ParserIndexedBy* yy312;
  ParserSetValueList* yy321;
  SqliteCreateTrigger::Scope* yy323;
  ParserFkConditionList* yy324;
  ParserQueryList* yy330;
  SqliteCreateTrigger::Event* yy331;
  ParserCteList* yy332;
  SqliteSelect::Core::JoinConstraint* yy335;
  int* yy346;
  ParserTermOrLiteral* yy350;
  ParserExprList* yy351;
  SqliteWindowDefinition::Window::Frame::RangeOrRows* yy358;
  SqliteSelect::Core::SingleSource* yy361;
  SqliteCreateTrigger::Time* yy372;
  ParserCreateTableConstraintList* yy373;
  SqliteSelect::CompoundOperator* yy382;
  SqliteSortOrder* yy389;
  SqliteQuery* yy443;
  SqliteLimit* yy444;
  SqliteWith::CommonTableExpression* yy446;
  ParserDeferSubClause* yy449;
  SqliteSelect::Core* yy450;
  SqliteSelect* yy453;
  ParserStubAlias* yy460;
  ParserStubTransDetails* yy464;
  SqliteColumnType* yy477;
  SqliteConflictAlgo* yy478;
  SqliteUpsert* yy500;
  ParserStubExplain* yy511;
  SqliteSelect::Core::JoinOp* yy521;
  ParserCreateTableOptionList* yy533;
  ParserOrderByList* yy543;
  ParserExprNestedList* yy546;
  SqliteCreateTable::Column* yy567;
  ParserStubInsertOrReplace* yy584;
  SqliteWindowDefinition::Window::Frame::Exclude* yy603;
  SqliteCreateTable::Column::Constraint* yy604;
  SqliteForeignKey::Condition* yy607;
  SqliteIndexedColumn* yy608;
  ParserResultColumnList* yy633;
  ParserWindowDefList* yy639;
  SqliteWith::CommonTableExpression::AsMode* yy640;
  SqliteWith* yy641;
  SqliteWindowDefinition* yy646;
  SqliteFilterOver::Filter* yy657;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define sqlite3_parseARG_SDECL ParserContext* parserContext;
#define sqlite3_parseARG_PDECL ,ParserContext* parserContext
#define sqlite3_parseARG_FETCH ParserContext* parserContext = yypParser->parserContext
#define sqlite3_parseARG_STORE yypParser->parserContext = parserContext
#define YYNSTATE 884
#define YYNRULE 499
#define YYFALLBACK 1
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

#define GET_CONTEXT yyParser* yypParser = pParser; sqlite3_parseARG_FETCH

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (2990)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   876,  260,  719,  876,  479,  593,   27,   67,   68,  537,
 /*    10 */   285,  876,  529,  831,  831,   65,   65,   66,   66,   66,
 /*    20 */    66,  395,   64,   64,   64,   64,   63,   63,   62,   62,
 /*    30 */    62,   61,   59,  268,  363,  875,  440,   67,   68,  537,
 /*    40 */   285,  368,  595,  831,  831,   65,   65,   66,   66,   66,
 /*    50 */    66,  534,   64,   64,   64,   64,   63,   63,   62,   62,
 /*    60 */    62,   61,   59,  268,  411, 1306,   62,   62,   62,   61,
 /*    70 */    59,  268,  821,  764,   66,   66,   66,   66,   56,   64,
 /*    80 */    64,   64,   64,   63,   63,   62,   62,   62,   61,   59,
 /*    90 */   268,  340,  465,  195,  764,   53,   54,  727,   42,  696,
 /*   100 */   764,  876,  377,   55, 1057,  621,  808,  670,  266,  876,
 /*   110 */    51,    2, 1057,  529,    1,  695,  829, 1057,  495,  841,
 /*   120 */   526, 1131,  876,  844,  873,  876,  874,  873,  480,  847,
 /*   130 */   721,  720,  881,  876,  874,  873,  829,  846,  845,  844,
 /*   140 */   400, 1057,  288,   63,   63,   62,   62,   62,   61,   59,
 /*   150 */   268,   81,  534,  822, 1057,  734, 1057, 1057,  820,   44,
 /*   160 */  1057,  648,  167,   58,  264, 1057, 1057, 1057, 1057, 1057,
 /*   170 */  1057,  829,  669,  821,  829,  980,  819,   12,  822,   56,
 /*   180 */   289,   82,  854,   92,  700,  351,  875, 1277, 1057,  176,
 /*   190 */   126,  338,  470,  333,  469,  163,   53,   54,  876,  875,
 /*   200 */   733,  729,  876,  505,   55, 1131,  107,  699,  275,  331,
 /*   210 */   656,  822,    2, 1131,  529,  350,  296,  829, 1131,  298,
 /*   220 */   844,  526,  876,  876,  844,  873,  847,  835,  506,  875,
 /*   230 */   847,  876,  874,  873,  846,  845,  844,  829,  846,  845,
 /*   240 */   844,  323, 1131,  784,  325,  740,   78,  128,  200,  293,
 /*   250 */   771,  270,  783,  534,  405, 1131,  269, 1131, 1131,  510,
 /*   260 */   739,  292,  876,  299,  365,  876, 1131, 1131, 1131, 1131,
 /*   270 */   704, 1131,  829,  875,  821,  829,  872,  819,   12,  880,
 /*   280 */    56,  261,  161,  870,  542,  464,  461,  460,  361, 1131,
 /*   290 */   350,  132,  871,  251,  250,  645,  362,   53,   54,  804,
 /*   300 */   561,  364,  179,  459,  875,   55, 1116,  109,  795,   71,
 /*   310 */    81,  596,  127,    2, 1116,  876,  510,  138,  829, 1116,
 /*   320 */   876,  844,  526,  835,  876,  844,  873,  847,  877,  274,
 /*   330 */   875,  847,  578,   80,  297,  846,  845,  844,  829,  846,
 /*   340 */   845,  844,  876, 1116,  876,  874,  873,  369, 1333,  366,
 /*   350 */   834,  189,  848, 1333,  772,  849, 1116,  857, 1116, 1116,
 /*   360 */  1221, 1221,  833,  577,  539,  576,  855, 1116,  575, 1116,
 /*   370 */  1116,  875, 1116,  829,  511,  781,  829,  746,  819,   12,
 /*   380 */   745,  606,  472,  795,  876,  874,  873,  876,  874,  873,
 /*   390 */  1116,  379,  876,  593,  545,  876, 1226,  683,  828,   67,
 /*   400 */    68,  537,  285, 1221, 1221,  831,  831,   65,   65,   66,
 /*   410 */    66,   66,   66,  876,   64,   64,   64,   64,   63,   63,
 /*   420 */    62,   62,   62,   61,   59,  268,  468,  830,  413,  368,
 /*   430 */   594,  601,  780,  828,  716,  716,  169,  876,  874,  873,
 /*   440 */   848,  516,  682,  849, 1221, 1221,  834,  684,  685,  606,
 /*   450 */    67,   68,  537,  285,   69,  174,  831,  831,   65,   65,
 /*   460 */    66,   66,   66,   66,  876,   64,   64,   64,   64,   63,
 /*   470 */    63,   62,   62,   62,   61,   59,  268,   39,  139,  256,
 /*   480 */   255,  254,  747,   67,   68,  537,  285, 1221, 1221,  831,
 /*   490 */   831,   65,   65,   66,   66,   66,   66,  601,   64,   64,
 /*   500 */    64,   64,   63,   63,   62,   62,   62,   61,   59,  268,
 /*   510 */   801,  562,  259,  172,  876,  874,  873,  876,  874,  873,
 /*   520 */   622,  514,  800,  608,   45,  337,  851,  875,  609,  556,
 /*   530 */   568,  173,  398,  284,  283,  876,  874,  873,  406,  816,
 /*   540 */   815, 1221, 1221,  336,  875,   61,   59,  268,  557,  556,
 /*   550 */   569,  570, 1226,  825, 1226,  427,   66,   66,   66,   66,
 /*   560 */    40,   64,   64,   64,   64,   63,   63,   62,   62,   62,
 /*   570 */    61,   59,  268,  135,  876,  813,  812,  556,  562, 1227,
 /*   580 */    67,   68,  537,  285, 1221, 1221,  831,  831,   65,   65,
 /*   590 */    66,   66,   66,   66,  493,   64,   64,   64,   64,   63,
 /*   600 */    63,   62,   62,   62,   61,   59,  268,  305,  448,  315,
 /*   610 */   669, 1384,  192,  543,    3,  360,  811,  287,  481,  824,
 /*   620 */   655,   92, 1221, 1221,  875,   23,  571,  811,  153,  155,
 /*   630 */   508,  759,    4,   67,   68,  537,  285, 1292,  494,  831,
 /*   640 */   831,   65,   65,   66,   66,   66,   66,  876,   64,   64,
 /*   650 */    64,   64,   63,   63,   62,   62,   62,   61,   59,  268,
 /*   660 */   794,   67,   68,  537,  285, 1221, 1221,  831,  831,   65,
 /*   670 */    65,   66,   66,   66,   66,  823,   64,   64,   64,   64,
 /*   680 */    63,   63,   62,   62,   62,   61,   59,  268,  876,  592,
 /*   690 */   592,  748,  876,  610,  611,  429,  876,  874,  873,  523,
 /*   700 */   529,  153,  151,  605,   67,   68,  537,  285,   74,  423,
 /*   710 */   831,  831,   65,   65,   66,   66,   66,   66,   57,   64,
 /*   720 */    64,   64,   64,   63,   63,   62,   62,   62,   61,   59,
 /*   730 */   268,  115, 1292,  876,   73, 1227,  764, 1227,  728,  534,
 /*   740 */    64,   64,   64,   64,   63,   63,   62,   62,   62,   61,
 /*   750 */    59,  268,  876,  500,  693,  876,   81,  764,  842, 1230,
 /*   760 */   821,  261,  835,  764,  884,   52,   56,   50,  668,  876,
 /*   770 */   874,  873,  538,  600,  161,  764,  817,  464,  461,  460,
 /*   780 */   818,  843,  235,   53,   54,   90,  764,  284,  283,  876,
 /*   790 */   536,   55,  876,  410,  474,  459,  764,  853,  319,    2,
 /*   800 */  1233,  745,  764,  507,  829,  677,  467,  764,  526,  596,
 /*   810 */   876,  844,  873,  764,  876,  874,  873,  847,  491,  476,
 /*   820 */   565,  153,  150, 1241,  829,  846,  845,  844,  350,  813,
 /*   830 */   812,  806,  777,  567,  835,  566,  260,  719,  876,  479,
 /*   840 */  1341, 1341,  875,  378,   72,  369, 1332,  172,  439,  735,
 /*   850 */   162, 1332,  835,  171,  777,  876,  874,  873,  177,  829,
 /*   860 */   835,  875,  829,  805,  819,   12,  803,  651,  651,  736,
 /*   870 */   499,  115,  882,   91,  876,  874,  873,  876,  874,  873,
 /*   880 */    67,   68,  537,  285,  735,  834,  831,  831,   65,   65,
 /*   890 */    66,   66,   66,   66,  835,   64,   64,   64,   64,   63,
 /*   900 */    63,   62,   62,   62,   61,   59,  268,  876,  856,  165,
 /*   910 */   858,  876,  874,  873,  876,  874,  873,  876,  645,  529,
 /*   920 */   498,  802,  502,   68,  537,  285,  286,  876,  831,  831,
 /*   930 */    65,   65,   66,   66,   66,   66,   22,   64,   64,   64,
 /*   940 */    64,   63,   63,   62,   62,   62,   61,   59,  268,   72,
 /*   950 */   705,  822,  876,  383,  735,  616,   80,  834,  534,  850,
 /*   960 */   876,  874,  873,  715,  475,  759,    4,  876,  446,  797,
 /*   970 */   876,  501,  202,  169,  736,  834,  822,  807,   22,  821,
 /*   980 */   813,  812,  530,  834,  876,   56,  617,    6,  619,  735,
 /*   990 */   341,  618,  842,  528,  816,  815,  529,  339,  711,  758,
 /*  1000 */  1074, 1074,   53,   54,  875,    8,  538,  169,  876,  822,
 /*  1010 */    55,  876,   21,  432,  351,  843,  220,  834,    2,  747,
 /*  1020 */   808,  527,  266,  829,  536,  709,  435,  526,  875,  876,
 /*  1030 */   844,  873,  755,  647,  842,  534,  847,  171,  113,  876,
 /*  1040 */   874,  873,   79,  829,  846,  845,  844,  752,  538,  876,
 /*  1050 */   874,  873,   81,  747,  757,  373,  821,  843,  220,  339,
 /*  1060 */   711,  875,   56,  410,  726,  723,  536,  647,  553,  876,
 /*  1070 */    58,  811,  295,  801,  876,  874,  873,  788,  829,   53,
 /*  1080 */    54,  829,  752,  819,   12,  800,  875,   55,  553,  876,
 /*  1090 */   874,  873,  876,  874,  873,    2,  875,  455,  634,  659,
 /*  1100 */   829,  408,  689,  828,  526,  329,  876,  844,  873,  660,
 /*  1110 */   115,  875,  504,  847,  118,  766,  553,   14,  402,  788,
 /*  1120 */   829,  846,  845,  844,  638,  341,  520,  632,  791,  568,
 /*  1130 */   876,  874,  873,  876,  874,  873, 1341, 1341,  828,  875,
 /*  1140 */  1228,  457,  882,  875,  638,  445,  115,  632,  745,  569,
 /*  1150 */   414,  386,  252,  393,  876,  829,  342,  769,  829,  793,
 /*  1160 */   819,   12,   67,   68,  537,  285,  201,  574,  831,  831,
 /*  1170 */    65,   65,   66,   66,   66,   66,  792,   64,   64,   64,
 /*  1180 */    64,   63,   63,   62,   62,   62,   61,   59,  268,  876,
 /*  1190 */   278,  876,  874,  873,   67,   68,  537,  285,  789,  119,
 /*  1200 */   831,  831,   65,   65,   66,   66,   66,   66,  787,   64,
 /*  1210 */    64,   64,   64,   63,   63,   62,   62,   62,   61,   59,
 /*  1220 */   268,   67,   68,  537,  285,  415,  811,  831,  831,   65,
 /*  1230 */    65,   66,   66,   66,   66,  515,   64,   64,   64,   64,
 /*  1240 */    63,   63,   62,   62,   62,   61,   59,  268,   47,   67,
 /*  1250 */    68,  537,  285,  646,   46,  831,  831,   65,   65,   66,
 /*  1260 */    66,   66,   66,   81,   64,   64,   64,   64,   63,   63,
 /*  1270 */    62,   62,   62,   61,   59,  268,  876,  874,  873,  443,
 /*  1280 */    67,   68,  537,  285,  171,  710,  831,  831,   65,   65,
 /*  1290 */    66,   66,   66,   66,  513,   64,   64,   64,   64,   63,
 /*  1300 */    63,   62,   62,   62,   61,   59,  268,  748,  525,  441,
 /*  1310 */   307,  876,  874,  873,  171,   44,  708,   89,  743,   67,
 /*  1320 */    68,  537,  285,  434,   48,  831,  831,   65,   65,   66,
 /*  1330 */    66,   66,   66,   20,   64,   64,   64,   64,   63,   63,
 /*  1340 */    62,   62,   62,   61,   59,  268,  122,  876,  748,  436,
 /*  1350 */    67,   68,  537,  285,  741,  691,  831,  831,   65,   65,
 /*  1360 */    66,   66,   66,   66,  532,   64,   64,   64,   64,   63,
 /*  1370 */    63,   62,   62,   62,   61,   59,  268,  354,  627,  347,
 /*  1380 */    81,   67,   68,  537,  285,   44,  196,  831,  831,   65,
 /*  1390 */    65,   66,   66,   66,   66,  738,   64,   64,   64,   64,
 /*  1400 */    63,   63,   62,   62,   62,   61,   59,  268,  835,  702,
 /*  1410 */   876,  701,   67,   68,  537,  285,  614,  328,  831,  831,
 /*  1420 */    65,   65,   66,   66,   66,   66,  117,   64,   64,   64,
 /*  1430 */    64,   63,   63,   62,   62,   62,   61,   59,  268,  521,
 /*  1440 */  1256,   67,   68,  537,  285,  883,    3,  831,  831,   65,
 /*  1450 */    65,   66,   66,   66,   66,  876,   64,   64,   64,   64,
 /*  1460 */    63,   63,   62,   62,   62,   61,   59,  268,  509,  876,
 /*  1470 */   874,  873,   77,   67,   68,  537,  285,  122,   28,  831,
 /*  1480 */   831,   65,   65,   66,   66,   66,   66,   58,   64,   64,
 /*  1490 */    64,   64,   63,   63,   62,   62,   62,   61,   59,  268,
 /*  1500 */   654, 1307,   67,   68,  537,  285,  749,  876,  831,  831,
 /*  1510 */    65,   65,   66,   66,   66,   66,  865,   64,   64,   64,
 /*  1520 */    64,   63,   63,   62,   62,   62,   61,   59,  268,  876,
 /*  1530 */  1305,  834,  876,  874,  873,  513,  451,  302,  122,  779,
 /*  1540 */   324,  529,   44,  675,  502,   67,   68,  537,  285,   19,
 /*  1550 */   875,  831,  831,   65,   65,   66,   66,   66,   66,  842,
 /*  1560 */    64,   64,   64,   64,   63,   63,   62,   62,   62,   61,
 /*  1570 */    59,  268,  162,  538,  876,  649,  842,  876,  874,  873,
 /*  1580 */   534,  773,  843,  235,  477,  674,  673,  598,  774,  665,
 /*  1590 */   538,  536,  370,  501,    5,  309,  876,  442,  768,  843,
 /*  1600 */   235,  821,  350,  842,  767, 1001,  876,   56,  536,  645,
 /*  1610 */   657,  875,  456,  122,  778,    4,  875,  538,  529,  491,
 /*  1620 */   492,  502,  122,  624,   53,   54,  843,  235,  669,  876,
 /*  1630 */   874,  873,   55,  122,  384,  536,  491,  478,  549,   92,
 /*  1640 */     2,  397,  875,  624,  378,  829,  616,   80,  842,  526,
 /*  1650 */   135,  876,  844,  873,  287,  481,  517,  534,  847,  765,
 /*  1660 */   752,  378,  538,  491,  482,  829,  846,  845,  844,  876,
 /*  1670 */   503,  843,  235,  876,  875,  383,  273,  617,  821,  619,
 /*  1680 */   536,  331,  618,   58,   56,  420,  763,    4,  378,  591,
 /*  1690 */   762,    4,   18,   79,  122,  795,  876,  874,  873,  875,
 /*  1700 */   829,   53,   54,  829,  433,  819,   12,  857,  407,   55,
 /*  1710 */   559,  418,  760,    4,   17,  587,  860,    2,  876,  874,
 /*  1720 */   873,  875,  829,   16,  426,  875,  526,  876,  876,  844,
 /*  1730 */   873,  392,  555,  378,  748,  847,  752,  876,  559,  529,
 /*  1740 */    11,   81,  829,  846,  845,  844,   67,   38,  537,  285,
 /*  1750 */   875,  748,  831,  831,   65,   65,   66,   66,   66,   66,
 /*  1760 */   555,   64,   64,   64,   64,   63,   63,   62,   62,   62,
 /*  1770 */    61,   59,  268,  761,    4,  863,  345,  829,  534,  114,
 /*  1780 */   829,  737,  819,   12,   72, 1067,  344,  752,  842,  735,
 /*  1790 */    87,  876,  874,  873,  350,  876,  874,  873,  197,  821,
 /*  1800 */   351,  875,  538,  394,  876,   56,  168,  272,  875,  736,
 /*  1810 */   742,  843,  220,  391,  875,  442,  529,  875,  186,  185,
 /*  1820 */   536,  842,   53,   54,  735, 1341, 1341,  875,  417,  875,
 /*  1830 */    55,  184,  583,  396,  421,  538,  261,  730,    2,  690,
 /*  1840 */   547,  725,  875,  829,  843,  123,  261,  526,  875,  876,
 /*  1850 */   844,  873,  790,  536,  875,  534,  847,  129,  428,  876,
 /*  1860 */   874,  873,  485,  829,  846,  845,  844,  637,    7,  701,
 /*  1870 */   416,  876,  483,  788,  580,  194,  821,  724,   15,  722,
 /*  1880 */   718,  876,   56,  341,  875,  310,   37,  795,  412,  717,
 /*  1890 */   121,  490,  380,  529,  271,  512,  713,  875,  829,   53,
 /*  1900 */    54,  829,  875,  819,   12,  876,  788,   55,  343,  878,
 /*  1910 */   120,  766,  524,  473,  791,    2,  327,  164,  277,   25,
 /*  1920 */   829,  876,  866,  875,  526,  864,  876,  844,  873,  122,
 /*  1930 */   862,  842,  534,  847,  681,  859,  875,  842,  852,  875,
 /*  1940 */   829,  846,  845,  844,  875,  538,  466,  489,  373,  875,
 /*  1950 */   840,  538,  875,  821,  843,  235,   36,  826,  876,   56,
 /*  1960 */   843,  123,  463,  536,  875,  531,  876,  672,   86,  536,
 /*  1970 */   529,  875,  754,  750,  744,  829,   53,   54,  829,  875,
 /*  1980 */   819,   12,  112,   85,   55,   24,  875,  875,  875,  330,
 /*  1990 */   458,  280,    2,  876,  874,  873,  876,  829,  166,  876,
 /*  2000 */   842,  526,  876,  876,  844,  873,   84,  336,  160,  534,
 /*  2010 */   847,  188,  875,  159,  538,  199,  378,  829,  846,  845,
 /*  2020 */   844,  589,  788,  843,  235,  488,  712,  876,  874,  873,
 /*  2030 */   821,  650,  536,  453,  332,  876,   56,  585,  158,  875,
 /*  2040 */   875,  589,  633,  876,  874,  873,   10,  529,  875,  688,
 /*  2050 */   156,  666,  829,   53,   54,  829,  105,  819,   12, 1231,
 /*  2060 */   279,   55,  326,  875,  154,  875,  758,   35,  103,    2,
 /*  2070 */  1233,   34,  585,   33,  829,   32,  875,  842,  526,  652,
 /*  2080 */   876,  844,  873, 1224,  102,  378,  534,  847,  876,  874,
 /*  2090 */   873,  538,  876,  875,  829,  846,  845,  844,  390,  388,
 /*  2100 */   843,  235,  839,  321,  626,  861,  101,  821,  430,  536,
 /*  2110 */   306,  620,  582,   56,  615,  613,  110,  875,  876,  874,
 /*  2120 */   873,  876,  874,  873,  876,  874,  873,  447,  171,  829,
 /*  2130 */    53,   54,  829,  304,  819,   12,  644,  401,   55,  641,
 /*  2140 */   424,  875,  876,  301,  607,   13,    2,  687,  183, 1235,
 /*  2150 */   875,  829,  551,  875,  875,  526,  148,  876,  844,  873,
 /*  2160 */   582,  359,  378,  203,  847,  146,  875,  588,  145,  876,
 /*  2170 */  1235,  829,  846,  845,  844,  875, 1235,  537,  285,  876,
 /*  2180 */   144,  831,  831,   65,   65,   66,   66,   66,   66,  143,
 /*  2190 */    64,   64,   64,   64,   63,   63,   62,   62,   62,   61,
 /*  2200 */    59,  268,  564,  535,  842,  563,  829,  322,  579,  829,
 /*  2210 */    96,  819,   12,  140,  876,  874,  873,  875,  538,  876,
 /*  2220 */   842,  875, 1235,  842,  444,  141,  842,  843,  123,  409,
 /*  2230 */  1235,  303,  544,  261,  538, 1235,  536,  538,  875,  842,
 /*  2240 */   538,   94,  257,  843,  123,  875,  843,  123,  276,  843,
 /*  2250 */   235,  116,  536,  538,  253,  536,  300,  382,  536, 1235,
 /*  2260 */   381,  879,  843,  235,  876,  874,  873,  294,  181,  876,
 /*  2270 */   875,  536, 1235,  290, 1235, 1235,  291,  579,  187,  869,
 /*  2280 */   868,  875,  867, 1235,  541, 1235, 1235,  875, 1235,  788,
 /*  2290 */   875,  876,  874,  873,  389,  546,  842,  387,  108,  496,
 /*  2300 */   454,  876,  874,  873,  732,  788, 1235,  180,  788,  876,
 /*  2310 */   538,  518,  178,  842,  348,  546,  842,   75,  540,  843,
 /*  2320 */   228,  838,  175,  837,  378,  287,  356,  538,  536,   23,
 /*  2330 */   538,  731,  355,  842,  653,  842,  843,  206,  842,  843,
 /*  2340 */   216,  876,  874,  873,  497,  536,  198,  538,  536,  538,
 /*  2350 */   842,  836,  538,   43,  268,  842,  843,  238,  843,  236,
 /*  2360 */   876,  843,  246,   70,  538,  536,   88,  536,  349,  538,
 /*  2370 */   536,  522,  265,  843,  245,  876,  842,  404,  843,  247,
 /*  2380 */   842,  788,  536,  842,  599,   49,  346,  536,  282,  281,
 /*  2390 */   538,  876,  874,  873,  538,  513,  785,  538,  788,  843,
 /*  2400 */   248,  788,  842,  843,  267,  842,  843,  353,  536,  786,
 /*  2410 */   403,  782,  536,  258,  170,  536,  538,  137,  788,  538,
 /*  2420 */   788,  484,  842,  788,  842,  843,  244,  842,  843,  352,
 /*  2430 */   876,  876,  874,  873,  536,  788,  538,  536,  538,  842,
 /*  2440 */   788,  538,  481,  842,  776,  843,  215,  843,  233,  770,
 /*  2450 */   843,  237,  714,  538,  536,  165,  536,  538,  703,  536,
 /*  2460 */   586,  788,  843,  376,  471,  788,  843,  375,  788,  698,
 /*  2470 */   697,  536,  399,  334,  694,  536,  693,  692,  842,  106,
 /*  2480 */   671,  842,  876,  874,  873,  372,   76,  788,  371,  664,
 /*  2490 */   788,  876,  538,  136,  452,  538,  876,  876,  874,  873,
 /*  2500 */   663,  843,  374,  842,  843,  232,  842,  788,  662,  788,
 /*  2510 */   536,  661,  788,  536,  157,  263,  320,  538,  842,  431,
 /*  2520 */   538,  449,   31,  842,  788,  318,  843,  218,  788,  843,
 /*  2530 */   231,  827,  538,  317,  204,  536,  316,  538,  536,  104,
 /*  2540 */   639,  843,  230,  876,  842,  152,  843,  217,  313,  312,
 /*  2550 */   536,  842,  876,  874,  873,  536,  311,  193,  538,  635,
 /*  2560 */   111,  438,  629,  788,  437,  538,  788,  843,  243,  625,
 /*  2570 */   308,  623,  134,  842,  843,  242,  536,  149,  842,  603,
 /*  2580 */   876,  425,  133,  536,  422,  147,  100,  538,  788,  643,
 /*  2590 */   419,  788,  538,   99,   98,  573,  843,  214,  842,   97,
 /*  2600 */    30,  843,  124,  788,   83,  536,  385,  142,  788,  842,
 /*  2610 */   536,  842,  538,  876,  874,  873,  560,   29,  876,  874,
 /*  2620 */   873,  843,  213,  538,  842,  538,  558,  678,  842,  788,
 /*  2630 */   536,   26,  843,  211,  843,  239,  788,  131,  538,  554,
 /*  2640 */   130,  536,  538,  536,  548,  842,  182,  843,  241,  357,
 /*  2650 */   842,  843,  234,  205,  519,  640,  536,  842,  788,  538,
 /*  2660 */   536,  842,   60,  788,  538,  876,  874,  873,  843,  240,
 /*  2670 */   799,  538,  814,  843,  229,  538,  756,  536,  810,  658,
 /*  2680 */   843,  226,  536,  788,  843,  210,  335,  191,  190,  536,
 /*  2690 */   249,  842,  689,  536,  788,  314,  788,  630,  876,  462,
 /*  2700 */   628,  367,  876,  874,  873,  538,    9,  876,  842,  788,
 /*  2710 */   832,  450,  809,  788,  843,  209,  612,  798,  876,  262,
 /*  2720 */   676,   41,  538,  536,  842,  358,  533,  842,  775,  707,
 /*  2730 */   788,  843,  208,   95,  686,  788,  876,  706,  538,  842,
 /*  2740 */   536,  538,  788,  680,  679,  597,  788,  843,  207,  667,
 /*  2750 */   843,  219,  876,  538,  842,   81,  536, 1385,  876,  536,
 /*  2760 */  1385,  876,  843,  224, 1385, 1385, 1385,  842,  538, 1385,
 /*  2770 */  1385,  536, 1385, 1385, 1385, 1385,  788,  843,  223, 1385,
 /*  2780 */  1385,  538,  842,  876, 1385, 1385,  536,  842,  876, 1385,
 /*  2790 */   843,  125,  876,  788, 1385, 1385,  538,  876, 1385,  536,
 /*  2800 */  1385,  538,  842, 1385,  876,  843,  222,  876, 1385,  788,
 /*  2810 */   843,  221,  788,  842,  536,  876,  538, 1385,  876,  536,
 /*  2820 */   876,  874,  873, 1385,  788,  843,  227,  538, 1385,  876,
 /*  2830 */   874,  873,  842, 1385,  536,  876,  843,  225, 1385,  788,
 /*  2840 */   876,  874,  873,  642,  876,  536,  538,  842, 1385, 1385,
 /*  2850 */  1385, 1385,  788, 1385,  636,  843,  212, 1385,  876,  874,
 /*  2860 */   873,  538, 1385, 1385,  536, 1385, 1385,  788, 1385,  753,
 /*  2870 */   843,   93,  788, 1385,  876,  874,  873, 1385, 1385,  487,
 /*  2880 */   876,  874,  873,  876,  874,  873, 1385,  788,  631, 1385,
 /*  2890 */  1385, 1385, 1385, 1385,  602, 1385, 1385,  590,  788, 1385,
 /*  2900 */  1385, 1385, 1385, 1385, 1385,  876,  874,  873, 1385, 1385,
 /*  2910 */   876,  874,  873, 1385,  876,  874,  873,  788,  604,  876,
 /*  2920 */   874,  873,  550, 1385, 1385, 1385,  876,  874,  873,  876,
 /*  2930 */   874,  873,  788,  552, 1385, 1385, 1385,  876,  874,  873,
 /*  2940 */   876,  874,  873, 1385, 1385, 1385, 1385,  584, 1385, 1385,
 /*  2950 */   790, 1385, 1385, 1385, 1385, 1385, 1385,  876,  874,  873,
 /*  2960 */  1385, 1385, 1385, 1385, 1385,  668,  876,  874,  873, 1385,
 /*  2970 */  1385, 1385, 1385,  581, 1385,  572,   30, 1385, 1385, 1385,
 /*  2980 */  1385, 1385, 1385, 1385, 1385, 1385,  796, 1385, 1385,  751,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     4,  250,  251,    4,  253,   79,   49,   80,   81,   82,
 /*    10 */    83,    4,   16,   86,   87,   88,   89,   90,   91,   92,
 /*    20 */    93,  203,   95,   96,   97,   98,   99,  100,  101,  102,
 /*    30 */   103,  104,  105,  106,  112,  217,  285,   80,   81,   82,
 /*    40 */    83,  115,  116,   86,   87,   88,   89,   90,   91,   92,
 /*    50 */    93,   55,   95,   96,   97,   98,   99,  100,  101,  102,
 /*    60 */   103,  104,  105,  106,   75,  108,  101,  102,  103,  104,
 /*    70 */   105,  106,   76,   35,   90,   91,   92,   93,   82,   95,
 /*    80 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*    90 */   106,  121,   34,  275,   56,   99,  100,  101,  145,   21,
 /*   100 */    62,    4,  215,  107,  108,   26,  219,  220,  221,    4,
 /*   110 */   183,  115,  116,   16,  115,   37,  120,  121,  165,  120,
 /*   120 */   124,   24,  126,  127,  128,  126,  127,  128,  158,  133,
 /*   130 */   160,  161,  108,  126,  127,  128,  140,  141,  142,  143,
 /*   140 */    82,  145,  153,   99,  100,  101,  102,  103,  104,  105,
 /*   150 */   106,   72,   55,    5,  158,  121,  160,  161,  116,  121,
 /*   160 */   164,  154,  128,  121,  106,  169,  170,  171,  172,  173,
 /*   170 */   174,  175,  203,   76,  178,  117,  180,  181,   30,   82,
 /*   180 */   191,  116,  213,  214,   36,  203,  217,  108,  192,  131,
 /*   190 */   132,  133,  134,  135,  136,  137,   99,  100,    4,  217,
 /*   200 */   166,  167,    4,   19,  107,  108,  121,   59,  239,  151,
 /*   210 */   241,   63,  115,  116,   16,  203,   67,  120,  121,   70,
 /*   220 */   127,  124,    4,  126,  127,  128,  133,    4,   44,  217,
 /*   230 */   133,  126,  127,  128,  141,  142,  143,  140,  141,  142,
 /*   240 */   143,   67,  145,   31,   70,  140,  115,    9,  117,   11,
 /*   250 */    66,   13,   40,   55,  242,  158,  115,  160,  161,  203,
 /*   260 */   155,   23,    4,  114,   26,    4,  169,  170,  171,  172,
 /*   270 */    76,  174,  175,  217,   76,  178,   21,  180,  181,  195,
 /*   280 */    82,  289,  131,   28,  200,  134,  135,  136,  114,  192,
 /*   290 */   203,   53,   37,   99,  100,  211,   58,   99,  100,  317,
 /*   300 */   308,   63,   64,  152,  217,  107,  108,   69,  296,  115,
 /*   310 */    72,   79,   74,  115,  116,    4,  203,  118,  120,  121,
 /*   320 */   126,  127,  124,    4,  126,  127,  128,  133,  110,  242,
 /*   330 */   217,  133,  248,  249,  185,  141,  142,  143,  140,  141,
 /*   340 */   142,  143,    4,  145,  126,  127,  128,  115,  116,  111,
 /*   350 */   127,  113,  159,  121,  170,  162,  158,  203,  160,  161,
 /*   360 */    41,   42,  139,  279,  210,  281,  212,  169,  284,  171,
 /*   370 */   172,  217,  174,  175,  318,  319,  178,  273,  180,  181,
 /*   380 */   276,  120,  101,  296,  126,  127,  128,  126,  127,  128,
 /*   390 */   192,  153,    4,   79,  310,    4,   26,   15,  140,   80,
 /*   400 */    81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
 /*   410 */    91,   92,   93,    4,   95,   96,   97,   98,   99,  100,
 /*   420 */   101,  102,  103,  104,  105,  106,   44,  133,  190,  115,
 /*   430 */   116,  120,  319,  175,   41,   42,  117,  126,  127,  128,
 /*   440 */   159,   82,   60,  162,   41,   42,  127,  132,  133,  188,
 /*   450 */    80,   81,   82,   83,   51,  118,   86,   87,   88,   89,
 /*   460 */    90,   91,   92,   93,  126,   95,   96,   97,   98,   99,
 /*   470 */   100,  101,  102,  103,  104,  105,  106,   84,   85,  146,
 /*   480 */   147,  148,  163,   80,   81,   82,   83,   84,   85,   86,
 /*   490 */    87,   88,   89,   90,   91,   92,   93,  186,   95,   96,
 /*   500 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   510 */    10,  120,  115,  203,  126,  127,  128,  126,  127,  128,
 /*   520 */    59,  162,   22,    7,  121,  133,  138,  217,   12,  120,
 /*   530 */   203,  121,  150,   99,  100,  126,  127,  128,  222,  223,
 /*   540 */   224,   41,   42,  151,  217,  104,  105,  106,  139,  140,
 /*   550 */   223,  224,  182,  116,  184,   39,   90,   91,   92,   93,
 /*   560 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*   570 */   104,  105,  106,  121,    4,  141,  142,  168,  187,   26,
 /*   580 */    80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
 /*   590 */    90,   91,   92,   93,   82,   95,   96,   97,   98,   99,
 /*   600 */   100,  101,  102,  103,  104,  105,  106,  146,  147,  148,
 /*   610 */   203,  196,  197,  198,  199,  208,  300,  156,  157,  116,
 /*   620 */   213,  214,   41,   42,  217,  173,  299,  300,  117,  118,
 /*   630 */   320,  321,  322,   80,   81,   82,   83,   13,  126,   86,
 /*   640 */    87,   88,   89,   90,   91,   92,   93,    4,   95,   96,
 /*   650 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   660 */    43,   80,   81,   82,   83,   84,   85,   86,   87,   88,
 /*   670 */    89,   90,   91,   92,   93,  116,   95,   96,   97,   98,
 /*   680 */    99,  100,  101,  102,  103,  104,  105,  106,    4,  119,
 /*   690 */   120,  219,    4,  146,  147,  148,  126,  127,  128,   82,
 /*   700 */    16,  117,  118,   65,   80,   81,   82,   83,   89,   71,
 /*   710 */    86,   87,   88,   89,   90,   91,   92,   93,  115,   95,
 /*   720 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*   730 */   106,  121,  108,    4,  115,  182,   35,  184,  266,   55,
 /*   740 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*   750 */   105,  106,    4,   52,  144,    4,   72,   56,  203,  182,
 /*   760 */    76,  289,    4,   62,    0,  182,   82,  184,  125,  126,
 /*   770 */   127,  128,  217,  135,  131,   35,  116,  134,  135,  136,
 /*   780 */   116,  226,  227,   99,  100,  121,   35,   99,  100,    4,
 /*   790 */   235,  107,    4,   29,   78,  152,   56,  225,  273,  115,
 /*   800 */   116,  276,   62,   52,  120,  233,  234,   56,  124,   79,
 /*   810 */   126,  127,  128,   62,  126,  127,  128,  133,  263,  264,
 /*   820 */   132,  117,  118,  185,  140,  141,  142,  143,  203,  141,
 /*   830 */   142,  116,   32,  145,    4,  147,  250,  251,    4,  253,
 /*   840 */   156,  157,  217,  288,  115,  115,  116,  203,  116,  120,
 /*   850 */    42,  121,    4,  121,   54,  126,  127,  128,   73,  175,
 /*   860 */     4,  217,  178,  116,  180,  181,  116,  119,  120,  140,
 /*   870 */   169,  121,  108,  115,  126,  127,  128,  126,  127,  128,
 /*   880 */    80,   81,   82,   83,  155,  127,   86,   87,   88,   89,
 /*   890 */    90,   91,   92,   93,    4,   95,   96,   97,   98,   99,
 /*   900 */   100,  101,  102,  103,  104,  105,  106,    4,  123,  193,
 /*   910 */   122,  126,  127,  128,  126,  127,  128,    4,  211,   16,
 /*   920 */   169,  296,   19,   81,   82,   83,  255,    4,   86,   87,
 /*   930 */    88,   89,   90,   91,   92,   93,  265,   95,   96,   97,
 /*   940 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  115,
 /*   950 */   217,    5,    4,  145,  120,  248,  249,  127,   55,  226,
 /*   960 */   126,  127,  128,  294,  320,  321,  322,    4,  255,  139,
 /*   970 */     4,   68,  115,  117,  140,  127,   30,  129,  265,   76,
 /*   980 */   141,  142,   36,  127,    4,   82,  279,   84,  281,  155,
 /*   990 */   203,  284,  203,  222,  223,  224,   16,  328,  329,  121,
 /*  1000 */   166,  167,   99,  100,  217,  115,  217,  117,    4,   63,
 /*  1010 */   107,    4,  305,  306,  203,  226,  227,  127,  115,  163,
 /*  1020 */   219,  220,  221,  120,  235,  294,   24,  124,  217,  126,
 /*  1030 */   127,  128,  116,  120,  203,   55,  133,  121,  115,  126,
 /*  1040 */   127,  128,  164,  140,  141,  142,  143,  203,  217,  126,
 /*  1050 */   127,  128,   72,  163,  267,  268,   76,  226,  227,  328,
 /*  1060 */   329,  217,   82,   29,  101,  116,  235,  154,  120,    4,
 /*  1070 */   121,  300,  203,   10,  126,  127,  128,  288,  175,   99,
 /*  1080 */   100,  178,  203,  180,  181,   22,  217,  107,  140,  126,
 /*  1090 */   127,  128,  126,  127,  128,  115,  217,  203,  175,  233,
 /*  1100 */   120,  207,  236,  140,  124,  116,  126,  127,  128,  243,
 /*  1110 */   121,  217,  323,  133,  121,  326,  168,  115,  274,  288,
 /*  1120 */   140,  141,  142,  143,  120,  203,  315,  120,  317,  203,
 /*  1130 */   126,  127,  128,  126,  127,  128,  156,  157,  175,  217,
 /*  1140 */    26,  116,  108,  217,  140,  273,  121,  140,  276,  223,
 /*  1150 */   224,  311,  312,  274,    4,  175,  325,  326,  178,   43,
 /*  1160 */   180,  181,   80,   81,   82,   83,  115,  298,   86,   87,
 /*  1170 */    88,   89,   90,   91,   92,   93,  116,   95,   96,   97,
 /*  1180 */    98,   99,  100,  101,  102,  103,  104,  105,  106,    4,
 /*  1190 */   268,  126,  127,  128,   80,   81,   82,   83,   26,  117,
 /*  1200 */    86,   87,   88,   89,   90,   91,   92,   93,  116,   95,
 /*  1210 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1220 */   106,   80,   81,   82,   83,  299,  300,   86,   87,   88,
 /*  1230 */    89,   90,   91,   92,   93,  162,   95,   96,   97,   98,
 /*  1240 */    99,  100,  101,  102,  103,  104,  105,  106,  164,   80,
 /*  1250 */    81,   82,   83,  188,  164,   86,   87,   88,   89,   90,
 /*  1260 */    91,   92,   93,   72,   95,   96,   97,   98,   99,  100,
 /*  1270 */   101,  102,  103,  104,  105,  106,  126,  127,  128,  116,
 /*  1280 */    80,   81,   82,   83,  121,  116,   86,   87,   88,   89,
 /*  1290 */    90,   91,   92,   93,  169,   95,   96,   97,   98,   99,
 /*  1300 */   100,  101,  102,  103,  104,  105,  106,  219,  211,  116,
 /*  1310 */   116,  126,  127,  128,  121,  121,  116,  192,  168,   80,
 /*  1320 */    81,   82,   83,  132,  183,   86,   87,   88,   89,   90,
 /*  1330 */    91,   92,   93,   14,   95,   96,   97,   98,   99,  100,
 /*  1340 */   101,  102,  103,  104,  105,  106,  249,    4,  219,  148,
 /*  1350 */    80,   81,   82,   83,  266,  116,   86,   87,   88,   89,
 /*  1360 */    90,   91,   92,   93,  179,   95,   96,   97,   98,   99,
 /*  1370 */   100,  101,  102,  103,  104,  105,  106,  260,  177,  262,
 /*  1380 */    72,   80,   81,   82,   83,  121,  116,   86,   87,   88,
 /*  1390 */    89,   90,   91,   92,   93,  266,   95,   96,   97,   98,
 /*  1400 */    99,  100,  101,  102,  103,  104,  105,  106,    4,  244,
 /*  1410 */     4,  246,   80,   81,   82,   83,  108,  116,   86,   87,
 /*  1420 */    88,   89,   90,   91,   92,   93,  121,   95,   96,   97,
 /*  1430 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  211,
 /*  1440 */   108,   80,   81,   82,   83,  198,  199,   86,   87,   88,
 /*  1450 */    89,   90,   91,   92,   93,    4,   95,   96,   97,   98,
 /*  1460 */    99,  100,  101,  102,  103,  104,  105,  106,  117,  126,
 /*  1470 */   127,  128,  115,   80,   81,   82,   83,  249,  117,   86,
 /*  1480 */    87,   88,   89,   90,   91,   92,   93,  121,   95,   96,
 /*  1490 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1500 */   211,  108,   80,   81,   82,   83,  163,    4,   86,   87,
 /*  1510 */    88,   89,   90,   91,   92,   93,  110,   95,   96,   97,
 /*  1520 */    98,   99,  100,  101,  102,  103,  104,  105,  106,    4,
 /*  1530 */   108,  127,  126,  127,  128,  169,  203,  116,  249,  116,
 /*  1540 */   207,   16,  121,  139,   19,   80,   81,   82,   83,   14,
 /*  1550 */   217,   86,   87,   88,   89,   90,   91,   92,   93,  203,
 /*  1560 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  1570 */   105,  106,   42,  217,    4,  211,  203,  126,  127,  128,
 /*  1580 */    55,   61,  226,  227,  211,  217,  218,  116,   46,  138,
 /*  1590 */   217,  235,  121,   68,   81,  211,    4,  203,   32,  226,
 /*  1600 */   227,   76,  203,  203,   61,  116,    4,   82,  235,  211,
 /*  1610 */   121,  217,   82,  249,  321,  322,  217,  217,   16,  263,
 /*  1620 */   264,   19,  249,  120,   99,  100,  226,  227,  203,  126,
 /*  1630 */   127,  128,  107,  249,  205,  235,  263,  264,  213,  214,
 /*  1640 */   115,  242,  217,  140,  288,  120,  248,  249,  203,  124,
 /*  1650 */   121,  126,  127,  128,  156,  157,  211,   55,  133,   54,
 /*  1660 */   203,  288,  217,  263,  264,  140,  141,  142,  143,    4,
 /*  1670 */    68,  226,  227,    4,  217,  145,  282,  279,   76,  281,
 /*  1680 */   235,  151,  284,  121,   82,  203,  321,  322,  288,  207,
 /*  1690 */   321,  322,   14,  164,  249,  296,  126,  127,  128,  217,
 /*  1700 */   175,   99,  100,  178,  306,  180,  181,  203,  263,  107,
 /*  1710 */   140,  203,  321,  322,   14,  207,  212,  115,  126,  127,
 /*  1720 */   128,  217,  120,   14,  295,  217,  124,    4,  126,  127,
 /*  1730 */   128,  274,  140,  288,  219,  133,  203,    4,  168,   16,
 /*  1740 */    14,   72,  140,  141,  142,  143,   80,   81,   82,   83,
 /*  1750 */   217,  219,   86,   87,   88,   89,   90,   91,   92,   93,
 /*  1760 */   168,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  1770 */   104,  105,  106,  321,  322,  110,  229,  175,   55,  115,
 /*  1780 */   178,  266,  180,  181,  115,  116,  229,  203,  203,  120,
 /*  1790 */    57,  126,  127,  128,  203,  126,  127,  128,  266,   76,
 /*  1800 */   203,  217,  217,  203,    4,   82,   14,  274,  217,  140,
 /*  1810 */   126,  226,  227,  203,  217,  203,   16,  217,  116,  116,
 /*  1820 */   235,  203,   99,  100,  155,  156,  157,  217,  203,  217,
 /*  1830 */   107,  116,  207,  242,  203,  217,  289,  166,  115,  116,
 /*  1840 */   203,  101,  217,  120,  226,  227,  289,  124,  217,  126,
 /*  1850 */   127,  128,  119,  235,  217,   55,  133,  118,  274,  126,
 /*  1860 */   127,  128,  118,  140,  141,  142,  143,  244,  115,  246,
 /*  1870 */   203,    4,  121,  288,  207,  275,   76,  116,  115,  159,
 /*  1880 */   116,    4,   82,  203,  217,  275,  173,  296,  203,  116,
 /*  1890 */   116,  211,  207,   16,  282,  277,  116,  217,  175,   99,
 /*  1900 */   100,  178,  217,  180,  181,    4,  288,  107,  323,  203,
 /*  1910 */   116,  326,  315,  115,  317,  115,  116,   18,   49,  115,
 /*  1920 */   120,    4,  203,  217,  124,  203,  126,  127,  128,  249,
 /*  1930 */   203,  203,   55,  133,    6,  203,  217,  203,  203,  217,
 /*  1940 */   140,  141,  142,  143,  217,  217,  117,  267,  268,  217,
 /*  1950 */   203,  217,  217,   76,  226,  227,  115,  203,    4,   82,
 /*  1960 */   226,  227,   49,  235,  217,  203,    4,    8,  115,  235,
 /*  1970 */    16,  217,  203,  203,  203,  175,   99,  100,  178,  217,
 /*  1980 */   180,  181,  115,  115,  107,  115,  217,  217,  217,  116,
 /*  1990 */    49,  263,  115,  126,  127,  128,    4,  120,  203,    4,
 /*  2000 */   203,  124,    4,  126,  127,  128,  115,  151,  137,   55,
 /*  2010 */   133,  277,  217,  118,  217,  117,  288,  140,  141,  142,
 /*  2020 */   143,  120,  288,  226,  227,  203,  203,  126,  127,  128,
 /*  2030 */    76,  124,  235,   82,  203,    4,   82,  120,  118,  217,
 /*  2040 */   217,  140,  175,  126,  127,  128,   13,   16,  217,  203,
 /*  2050 */   145,  203,  175,   99,  100,  178,  164,  180,  181,  182,
 /*  2060 */   263,  107,  203,  217,  117,  217,  121,   89,  150,  115,
 /*  2070 */   116,   89,  155,   89,  120,   89,  217,  203,  124,  203,
 /*  2080 */   126,  127,  128,  108,  176,  288,   55,  133,  126,  127,
 /*  2090 */   128,  217,    4,  217,  140,  141,  142,  143,   18,   24,
 /*  2100 */   226,  227,  140,  203,  177,  110,  150,   76,   25,  235,
 /*  2110 */   157,  108,  120,   82,  108,   61,   50,  217,  126,  127,
 /*  2120 */   128,  126,  127,  128,  126,  127,  128,  203,  121,  175,
 /*  2130 */    99,  100,  178,  185,  180,  181,  203,  263,  107,  203,
 /*  2140 */   203,  217,    4,  114,   50,  115,  115,  149,  165,   35,
 /*  2150 */   217,  120,  203,  217,  217,  124,  145,  126,  127,  128,
 /*  2160 */   168,  203,  288,  115,  133,  118,  217,  124,  118,    4,
 /*  2170 */    56,  140,  141,  142,  143,  217,   62,   82,   83,    4,
 /*  2180 */   118,   86,   87,   88,   89,   90,   91,   92,   93,  118,
 /*  2190 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  2200 */   105,  106,  116,  203,  203,  116,  175,  203,  120,  178,
 /*  2210 */   114,  180,  181,  112,  126,  127,  128,  217,  217,    4,
 /*  2220 */   203,  217,  108,  203,  203,  118,  203,  226,  227,   48,
 /*  2230 */   116,  203,   47,  289,  217,  121,  235,  217,  217,  203,
 /*  2240 */   217,  216,  269,  226,  227,  217,  226,  227,  232,  226,
 /*  2250 */   227,  232,  235,  217,  312,  235,  203,  314,  235,  145,
 /*  2260 */   314,  202,  226,  227,  126,  127,  128,  203,  109,    4,
 /*  2270 */   217,  235,  158,  203,  160,  161,  203,  189,  277,  202,
 /*  2280 */   202,  217,   64,  169,  202,  171,  172,  217,  174,  288,
 /*  2290 */   217,  126,  127,  128,  277,  120,  203,  277,  206,  263,
 /*  2300 */    77,  126,  127,  128,  166,  288,  192,  204,  288,    4,
 /*  2310 */   217,  288,  204,  203,  291,  140,  203,  121,  209,  226,
 /*  2320 */   227,  272,  118,  251,  288,  156,  257,  217,  235,  173,
 /*  2330 */   217,  166,  258,  203,  119,  203,  226,  227,  203,  226,
 /*  2340 */   227,  126,  127,  128,  170,  235,  259,  217,  235,  217,
 /*  2350 */   203,  261,  217,  171,  106,  203,  226,  227,  226,  227,
 /*  2360 */     4,  226,  227,  172,  217,  235,  115,  235,  231,  217,
 /*  2370 */   235,  316,  106,  226,  227,    4,  203,  117,  226,  227,
 /*  2380 */   203,  288,  235,  203,  119,  182,  260,  235,  297,  292,
 /*  2390 */   217,  126,  127,  128,  217,  169,  278,  217,  288,  226,
 /*  2400 */   227,  288,  203,  226,  227,  203,  226,  227,  235,  261,
 /*  2410 */    45,  278,  235,   27,  272,  235,  217,  118,  288,  217,
 /*  2420 */   288,  253,  203,  288,  203,  226,  227,  203,  226,  227,
 /*  2430 */     4,  126,  127,  128,  235,  288,  217,  235,  217,  203,
 /*  2440 */   288,  217,  157,  203,  324,  226,  227,  226,  227,  324,
 /*  2450 */   226,  227,  329,  217,  235,  193,  235,  217,  228,  235,
 /*  2460 */   155,  288,  226,  227,  145,  288,  226,  227,  288,  228,
 /*  2470 */   238,  235,   38,  228,  230,  235,  144,  228,  203,  206,
 /*  2480 */   238,  203,  126,  127,  128,  231,  115,  288,  231,  228,
 /*  2490 */   288,    4,  217,  206,  231,  217,    4,  126,  127,  128,
 /*  2500 */   228,  226,  227,  203,  226,  227,  203,  288,  228,  288,
 /*  2510 */   235,  228,  288,  235,  118,  272,  303,  217,  203,   33,
 /*  2520 */   217,  304,  182,  203,  288,  257,  226,  227,  288,  226,
 /*  2530 */   227,  175,  217,  280,  174,  235,  260,  217,  235,  245,
 /*  2540 */   261,  226,  227,    4,  203,   80,  226,  227,  257,  280,
 /*  2550 */   235,  203,  126,  127,  128,  235,  260,  283,  217,  261,
 /*  2560 */   115,  145,  280,  288,  257,  217,  288,  226,  227,  280,
 /*  2570 */   286,  245,  206,  203,  226,  227,  235,  118,  203,  257,
 /*  2580 */     4,  272,  206,  235,  272,  118,  247,  217,  288,  163,
 /*  2590 */    77,  288,  217,  247,  247,  298,  226,  227,  203,  247,
 /*  2600 */   176,  226,  227,  288,  309,  235,  272,  118,  288,  203,
 /*  2610 */   235,  203,  217,  126,  127,  128,   20,  307,  126,  127,
 /*  2620 */   128,  226,  227,  217,  203,  217,  272,  140,  203,  288,
 /*  2630 */   235,  307,  226,  227,  226,  227,  288,  118,  217,  272,
 /*  2640 */   118,  235,  217,  235,   17,  203,  309,  226,  227,  256,
 /*  2650 */   203,  226,  227,  254,  293,  163,  235,  203,  288,  217,
 /*  2660 */   235,  203,  289,  288,  217,  126,  127,  128,  226,  227,
 /*  2670 */   229,  217,  300,  226,  227,  217,  271,  235,  300,  140,
 /*  2680 */   226,  227,  235,  288,  226,  227,  229,  260,  260,  235,
 /*  2690 */   240,  203,  236,  235,  288,  256,  288,  287,    4,  230,
 /*  2700 */   257,  201,  126,  127,  128,  217,  254,    4,  203,  288,
 /*  2710 */   219,  302,  219,  288,  226,  227,  140,  219,    4,  301,
 /*  2720 */   219,  290,  217,  235,  203,  252,  246,  203,  327,  226,
 /*  2730 */   288,  226,  227,  270,  237,  288,    4,  226,  217,  203,
 /*  2740 */   235,  217,  288,  237,  237,  313,  288,  226,  227,  241,
 /*  2750 */   226,  227,    4,  217,  203,   72,  235,  330,    4,  235,
 /*  2760 */   330,    4,  226,  227,  330,  330,  330,  203,  217,  330,
 /*  2770 */   330,  235,  330,  330,  330,  330,  288,  226,  227,  330,
 /*  2780 */   330,  217,  203,    4,  330,  330,  235,  203,    4,  330,
 /*  2790 */   226,  227,    4,  288,  330,  330,  217,    4,  330,  235,
 /*  2800 */   330,  217,  203,  330,    4,  226,  227,    4,  330,  288,
 /*  2810 */   226,  227,  288,  203,  235,    4,  217,  330,    4,  235,
 /*  2820 */   126,  127,  128,  330,  288,  226,  227,  217,  330,  126,
 /*  2830 */   127,  128,  203,  330,  235,    4,  226,  227,  330,  288,
 /*  2840 */   126,  127,  128,  140,    4,  235,  217,  203,  330,  330,
 /*  2850 */   330,  330,  288,  330,  140,  226,  227,  330,  126,  127,
 /*  2860 */   128,  217,  330,  330,  235,  330,  330,  288,  330,  175,
 /*  2870 */   226,  227,  288,  330,  126,  127,  128,  330,  330,  235,
 /*  2880 */   126,  127,  128,  126,  127,  128,  330,  288,  140,  330,
 /*  2890 */   330,  330,  330,  330,  140,  330,  330,  140,  288,  330,
 /*  2900 */   330,  330,  330,  330,  330,  126,  127,  128,  330,  330,
 /*  2910 */   126,  127,  128,  330,  126,  127,  128,  288,  186,  126,
 /*  2920 */   127,  128,  119,  330,  330,  330,  126,  127,  128,  126,
 /*  2930 */   127,  128,  288,  140,  330,  330,  330,  126,  127,  128,
 /*  2940 */   126,  127,  128,  330,  330,  330,  330,  168,  330,  330,
 /*  2950 */   119,  330,  330,  330,  330,  330,  330,  126,  127,  128,
 /*  2960 */   330,  330,  330,  330,  330,  125,  126,  127,  128,  330,
 /*  2970 */   330,  330,  330,  189,  330,  187,  176,  330,  330,  330,
 /*  2980 */   330,  330,  330,  330,  330,  330,  175,  330,  330,  175,
};
#define YY_SHIFT_USE_DFLT (-79)
#define YY_SHIFT_COUNT (542)
#define YY_SHIFT_MIN   (-78)
#define YY_SHIFT_MAX   (2840)
static const short yy_shift_ofst[] = {
 /*     0 */  1034,  684,  980,  238,  903, 1602, 1525, 1954, 1954, 1954,
 /*    10 */  1308,  198, 1877, 2031, 2031, 2031, 2031, 2031, 2031, 2031,
 /*    20 */  2031,   79,   -4,   97, 1800, 1723, 2031, 2031, 2031, 2031,
 /*    30 */  2031, 2031, 2031, 2031, 2031, 2031, 2031, 2031, 2031, 2031,
 /*    40 */  2031, 2031, 2031, 2031, 2031, 2031, 2031, 2031, 2031, 2031,
 /*    50 */  2031, 2031, 2031, 2031, 2031, 2031, 2031, 2031, 2031, 2031,
 /*    60 */  2031, 2031, 2031, 2031, 2031, 2031, 2031, 2031, 2031, 2031,
 /*    70 */  2031, 2031, 1669,  688,  688,  643,  751,  751, 2840,  834,
 /*    80 */   461, 1733,  785, 2840, 2811, 2811, 2811, 2831, 2811,  966,
 /*    90 */   434,  434,  848,  319,   58,  729, 2175, 2088, 1992, 1917,
 /*   100 */  1901, 1867, 1503, 1867, 1007, 1004,  913,  785,  748, 2800,
 /*   110 */  2814, 2814, 2814, 2814, 2814, 2811, 1530,  966,  966,  848,
 /*   120 */   716,  716, 1498,  500,  500,  -43,  194,  409,  948,  963,
 /*   130 */  1592, 1570,  391,  570,  311,  923,  261,  105,  258,   -1,
 /*   140 */  2803, 2793, 2788, 2784, 2779, 2305, 2757, 2265, 2754, 2732,
 /*   150 */  2748, 2714,  148, 2492, 2426, 2703, 2576, 1065,    7, 2215,
 /*   160 */  2539, 1451, 1998, 2487,  148, 2371, 2165, 2138, 1150, 1343,
 /*   170 */   890, 2694,  701, 1185, 2356, 1962,  388,  788, 1995, 1665,
 /*   180 */  1406,  218,  966,  966,  856,  856,  856,   38,   38,  638,
 /*   190 */   740,  740,  764, 1191,  512,  512,  338,  512, 1125, 2683,
 /*   200 */  2683, 2683, 2683,  -79,  -79,  -79,  403,  581,  581,  581,
 /*   210 */   581,  581,  581,  581,  581,  581,  581,  553,  370,  624,
 /*   220 */   800, 1422, 1393, 1361, 1332, 1301, 1270, 1239, 1200, 1169,
 /*   230 */  1141, 1114,  -73, 1082, 1666, 1465,  842, 2095, 2095,  466,
 /*   240 */   -16,  -16,  -16,  -16,  -16,  -16,  645,   44,  -35,  151,
 /*   250 */    93,   93,  730,  232,  382,  382,  382,   34,  184,  946,
 /*   260 */   -30,  393,  547,  516, 1404,  830,  758,  441,  223,  281,
 /*   270 */   255,  452,  732, 1529,  610, 1489,  808, 1063,  -47, 1366,
 /*   280 */  1366,  583, 1063,  839,  839,  359,  878,  193, 2627, 2627,
 /*   290 */  2522, 2519, 2596, 2596, 2489, 2424, 2513, 2513, 2513, 2513,
 /*   300 */  2467, 2223, 2156, 2459, 2223, 2465, 2360, 2156, 2360, 2416,
 /*   310 */  2445, 2191, 2226, 2360, 2156, 2465, 2191, 2226, 2360, 2156,
 /*   320 */  2340, 2486, 2396, 2223, 2251, 2223, 2251, 2319, 2319, 2319,
 /*   330 */  2319, 2434, 2251, 2319, 2332, 2319, 2434, 2319, 2319, 2262,
 /*   340 */  2285, 2299, 2386, 2386, 2365, 2365, 2191, 2226, 2203, 2260,
 /*   350 */  2266, 2251, 2248, 2248, 2191, 2182, 2174, 2156, 2169, 2204,
 /*   360 */  2196, 2223, 2218, 2218, 2159, 2159, 2159, 2159,  -79,  -79,
 /*   370 */   -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79, 2114,  149,
 /*   380 */   -11,  314,  -74,  333,  174,  619, 1471, 1421, 1201, 1194,
 /*   390 */  1002,  704, 1193, 1163,  584,  511, 1025,  989,  315,   78,
 /*   400 */   392,  949,  916,  212,  617,  750,  664,   42,  131, 2185,
 /*   410 */  2181, 2101, 2107, 2096, 2089, 2086, 2071, 2062, 2050, 2043,
 /*   420 */  2047, 2048, 1983, 2029, 2030, 2011, 1948, 2094, 2007, 2066,
 /*   430 */  2054, 2083, 2006, 2003, 1953, 1927, 1956, 2075, 2080, 1975,
 /*   440 */  1908, 1986, 1984, 1982, 1978, 1918, 1945, 1947, 1892, 2033,
 /*   450 */  1905, 1920, 1898, 1907, 1951, 1895, 1856, 1871, 1891, 1941,
 /*   460 */  1870, 1868, 1873, 1853, 1913, 1959, 1841, 1829, 1928, 1804,
 /*   470 */  1869, 1899, 1794, 1713, 1798, 1780, 1774, 1773, 1764, 1751,
 /*   480 */  1720, 1763, 1761, 1753, 1751, 1740, 1744, 1739, 1671, 1715,
 /*   490 */  1703, 1562, 1702, 1684, 1792, 1664, 1562, 1726, 1709, 1700,
 /*   500 */  1678, 1605, 1543, 1566, 1513, 1520, 1542, 1535, 1423, 1357,
 /*   510 */  1351, 1305, 1264, 1319, 1090, 1084, 1073, 1092,  577, 1172,
 /*   520 */   993, 1060, 1051, 1116,  993,  747,  857,  715,  660,  603,
 /*   530 */   559,  503,  437,  410,  397,  337,  199,  294,  141,   85,
 /*   540 */    65,  -78,   24,
};
#define YY_REDUCE_USE_DFLT (-250)
#define YY_REDUCE_COUNT (377)
#define YY_REDUCE_MIN   (-249)
#define YY_REDUCE_MAX   (2644)
static const short yy_reduce_ofst[] = {
 /*     0 */   415, 1373, 1445,   84, 1585,  831,  789, 1400, 1356,  555,
 /*    10 */   707, 2036, 2023, 2020, 2017, 1874, 2001, 1734, 1797, 1728,
 /*    20 */  1618, 1398, 2644, 2629, 2610, 2599, 2584, 2579, 2564, 2551,
 /*    30 */  2536, 2524, 2521, 2505, 2488, 2458, 2454, 2447, 2442, 2425,
 /*    40 */  2421, 2408, 2406, 2395, 2375, 2370, 2348, 2341, 2320, 2315,
 /*    50 */  2303, 2300, 2278, 2275, 2240, 2236, 2224, 2221, 2219, 2202,
 /*    60 */  2199, 2180, 2177, 2173, 2152, 2147, 2135, 2132, 2130, 2113,
 /*    70 */  2110, 2093, 1680,  926,  327,  -31,  644,  310,  407,  787,
 /*    80 */  -249, 1597,  154, 1425, 1591, 1399,   87,  811,   12,   56,
 /*    90 */   771,  316, -113,  472,  572,  922, 1685, 1667, 1625, 1508,
 /*   100 */  1482, 1612, 1610, 1394, 1600, -182, 1333, 1504,  894,  869,
 /*   110 */  1584, 1533, 1457,  879,  844,  625,  866,  113,  -18,  801,
 /*   120 */   731,  669,  586, 1557, 1547,   -8,  733, 2073, 2070, 2000,
 /*   130 */  1747, 1747, 2064, 2053, 2028, 2021, 2004, 1747, 2000, 1958,
 /*   140 */  1949, 1876, 1747, 1876, 1876, 1876, 1876, 1747, 1937, 1747,
 /*   150 */  1924, 1924, 1623, 1936, 1933, 1924, 1900, 1747, 1876, 1876,
 /*   160 */  1859, 1848, 1846, 1831, 1165, 1823, 1822, 1795, 1771, 1770,
 /*   170 */  1532, 1769, 1452, 1762, 1754, 1747, 1735, 1732, 1727, 1722,
 /*   180 */  1719, 1706, 1637, 1631, 1515, 1129, 1088, 1391, 1369, 1429,
 /*   190 */  1365, 1293, 1247, 1384,  872,  525, 1368,  104, 1117, 1364,
 /*   200 */  1289, 1228, 1097,  840,  713,  671, 1944, 1944, 1944, 1944,
 /*   210 */  1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944,
 /*   220 */  1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944,
 /*   230 */  1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944,
 /*   240 */  1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 2508,
 /*   250 */  2511, 2503, 2432, 2432, 2507, 2506, 2497, 2463, 2401, 2480,
 /*   260 */  2473, 2431, 2409, 2418, 2501, 2498, 2493, 1944, 2491, 2452,
 /*   270 */  2500, 2443, 2410, 2439, 2469, 2450, 2456, 2457, 2405, 2428,
 /*   280 */  2427, 2361, 2441, 2378, 2372, 2373, 2393, 2399, 2337, 2295,
 /*   290 */  2367, 2354, 2324, 2310, 2334, 2297, 2352, 2347, 2346, 2339,
 /*   300 */  2312, 2376, 2322, 2309, 2366, 2326, 2289, 2307, 2282, 2284,
 /*   310 */  2274, 2298, 2296, 2269, 2291, 2294, 2279, 2276, 2253, 2268,
 /*   320 */  2217, 2213, 2243, 2287, 2263, 2273, 2257, 2283, 2280, 2272,
 /*   330 */  2261, 2242, 2254, 2249, 2244, 2245, 2232, 2241, 2230, 2123,
 /*   340 */  2168, 2142, 2125, 2120, 2133, 2118, 2148, 2126, 2097, 2055,
 /*   350 */  2091, 2137, 1944, 1944, 2090, 2087, 2074, 2069, 2072, 2049,
 /*   360 */  2109, 2092, 2108, 2103, 2082, 2078, 2077, 2059, 1946, 1943,
 /*   370 */  1942, 2019, 2016, 1973, 1944, 1944, 1944, 2025,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   889, 1219, 1219, 1341, 1219, 1219, 1219, 1219, 1219, 1219,
 /*    10 */  1341, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
 /*    20 */  1219, 1341, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
 /*    30 */  1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
 /*    40 */  1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
 /*    50 */  1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
 /*    60 */  1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
 /*    70 */  1219, 1219, 1074, 1383, 1383, 1383, 1360, 1360, 1383, 1067,
 /*    80 */  1383, 1383,  917, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
 /*    90 */  1383, 1383,  941, 1063,  930, 1074, 1383, 1383, 1383, 1383,
 /*   100 */  1383, 1144, 1159, 1144, 1136, 1125, 1383, 1383, 1383, 1257,
 /*   110 */  1152, 1152, 1152, 1152, 1152, 1383, 1014, 1383, 1383, 1383,
 /*   120 */  1187, 1186, 1383, 1110, 1110, 1221, 1383, 1310, 1315, 1180,
 /*   130 */  1383, 1383, 1383, 1383, 1383, 1145, 1383, 1075, 1180, 1383,
 /*   140 */  1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
 /*   150 */  1160, 1137, 1383, 1383, 1383, 1126, 1383, 1383, 1383, 1383,
 /*   160 */  1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
 /*   170 */  1063, 1383, 1360, 1383, 1182, 1383, 1383, 1383, 1383, 1383,
 /*   180 */  1383,  895, 1383, 1383, 1063, 1063, 1063, 1360, 1360,  927,
 /*   190 */  1360, 1360,  889, 1341, 1099, 1099,  935, 1099, 1104, 1341,
 /*   200 */  1341, 1341, 1341, 1334, 1053, 1053, 1120, 1143, 1142, 1141,
 /*   210 */  1140, 1080, 1130, 1118, 1122, 1234, 1121, 1221, 1221, 1221,
 /*   220 */  1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
 /*   230 */  1221, 1221, 1221, 1221, 1221, 1221, 1189, 1203, 1188, 1196,
 /*   240 */  1208, 1197, 1202, 1201, 1200, 1191, 1190, 1192, 1193, 1383,
 /*   250 */  1383, 1383, 1383, 1383, 1383, 1383, 1383, 1066, 1383, 1383,
 /*   260 */  1036, 1383, 1383, 1284, 1383, 1383,  943, 1194, 1383, 1051,
 /*   270 */   898, 1129, 1223, 1064,  981, 1005,  965, 1110, 1082, 1104,
 /*   280 */  1104, 1229, 1110, 1383, 1383, 1221, 1064, 1051, 1325, 1325,
 /*   290 */  1083, 1083, 1309, 1309, 1083, 1257, 1027, 1027, 1027, 1027,
 /*   300 */  1083,  924, 1129, 1083,  924, 1018, 1132, 1129, 1132, 1165,
 /*   310 */  1148, 1119, 1104, 1132, 1129, 1018, 1119, 1104, 1132, 1129,
 /*   320 */  1291, 1289, 1083,  924, 1242,  924, 1242, 1016, 1016, 1016,
 /*   330 */  1016,  997, 1242, 1016,  981, 1016,  997, 1016, 1016, 1379,
 /*   340 */  1383, 1083, 1370, 1370, 1113, 1113, 1119, 1104, 1383, 1383,
 /*   350 */  1248, 1242, 1207, 1195, 1119, 1117, 1114, 1129, 1383, 1083,
 /*   360 */  1000,  924,  906,  906,  894,  894,  894,  894, 1338, 1338,
 /*   370 */  1334,  983,  983, 1069, 1206, 1205, 1204,  952, 1220, 1383,
 /*   380 */  1383, 1383, 1383, 1383, 1383, 1258, 1383, 1383, 1383, 1383,
 /*   390 */  1383, 1087, 1383, 1383, 1087, 1087, 1383, 1383, 1383, 1383,
 /*   400 */  1383, 1383, 1383, 1383, 1344, 1383, 1383, 1383, 1383, 1383,
 /*   410 */   890, 1383, 1085, 1383, 1383, 1383, 1085, 1085, 1085, 1383,
 /*   420 */  1085, 1328, 1383, 1383, 1383, 1383, 1383, 1383, 1288, 1287,
 /*   430 */  1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1149,
 /*   440 */  1383, 1383, 1383, 1383, 1383, 1383, 1133, 1088, 1383, 1276,
 /*   450 */  1383, 1085, 1383, 1383, 1383, 1085, 1383, 1383, 1383, 1383,
 /*   460 */  1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
 /*   470 */  1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1039,
 /*   480 */  1045, 1383, 1383, 1383, 1040, 1383, 1383, 1178, 1383, 1383,
 /*   490 */  1383, 1232, 1383, 1383, 1383, 1383, 1115, 1383, 1383, 1383,
 /*   500 */  1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
 /*   510 */  1383, 1376, 1105, 1383, 1383, 1383, 1222, 1383, 1220, 1383,
 /*   520 */  1343, 1383, 1383, 1383, 1342, 1383, 1383, 1383, 1383, 1383,
 /*   530 */  1383, 1383, 1383, 1383, 1383, 1179, 1178, 1222,  938,  913,
 /*   540 */  1383,  904, 1383,  886,  891, 1327, 1324, 1321, 1326, 1320,
 /*   550 */  1322, 1319, 1323, 1318, 1316, 1317, 1314, 1312, 1311, 1313,
 /*   560 */  1308, 1304, 1264, 1262, 1260, 1269, 1268, 1267, 1266, 1265,
 /*   570 */  1261, 1259, 1263, 1255, 1254, 1155, 1134, 1123, 1034, 1303,
 /*   580 */  1301, 1302, 1253, 1251, 1252, 1033, 1032, 1031, 1026, 1025,
 /*   590 */  1024, 1023, 1331, 1340, 1339, 1337, 1336, 1335, 1329, 1330,
 /*   600 */  1240, 1239, 1237, 1236, 1238,  926, 1280, 1283, 1282, 1281,
 /*   610 */  1286, 1285, 1278, 1290, 1295, 1294, 1299, 1298, 1297, 1296,
 /*   620 */  1293, 1275, 1164, 1163, 1161, 1157, 1168, 1167, 1166, 1156,
 /*   630 */  1158, 1162, 1139, 1147, 1146, 1135, 1138, 1019, 1128, 1124,
 /*   640 */  1092, 1090, 1127, 1091, 1089, 1035, 1279, 1030, 1029, 1028,
 /*   650 */   925,  916, 1086,  915,  914,  929, 1003, 1004, 1012, 1015,
 /*   660 */  1010, 1013, 1009, 1008, 1007, 1011, 1006, 1002,  932,  931,
 /*   670 */   942,  996,  979,  968,  934,  970,  967,  966,  971,  988,
 /*   680 */   987,  994,  993,  992,  991,  990,  986,  989,  985,  984,
 /*   690 */   972,  964,  963,  982,  962,  999,  998,  995,  961, 1022,
 /*   700 */  1021, 1020, 1017,  960,  959,  958,  957,  956,  955, 1218,
 /*   710 */  1382, 1378, 1381, 1380, 1377, 1217, 1225, 1211, 1209, 1037,
 /*   720 */  1048, 1047, 1046, 1043, 1044, 1058, 1056, 1055, 1054, 1098,
 /*   730 */  1097, 1096, 1095, 1094, 1093, 1079, 1077, 1072, 1071, 1078,
 /*   740 */  1076, 1073, 1102, 1103, 1101, 1100, 1070, 1062, 1060, 1061,
 /*   750 */  1059, 1154, 1151, 1153, 1150, 1081, 1068, 1065, 1052, 1358,
 /*   760 */  1356, 1359, 1357, 1355, 1363, 1365, 1364, 1369, 1367, 1366,
 /*   770 */  1362, 1375, 1374, 1373, 1372, 1371, 1361, 1368, 1354, 1353,
 /*   780 */  1352, 1351, 1107, 1112, 1111, 1106, 1042, 1210, 1220, 1214,
 /*   790 */  1349, 1347, 1350, 1346, 1345, 1245, 1247, 1250, 1249, 1246,
 /*   800 */  1109, 1108, 1244, 1243, 1348, 1213, 1185,  948,  946,  947,
 /*   810 */  1272, 1271, 1274, 1273, 1270,  950,  949,  945,  944, 1183,
 /*   820 */  1177, 1176, 1300, 1215, 1216, 1175, 1181, 1173, 1172, 1171,
 /*   830 */  1199, 1198, 1184, 1174,  937,  936, 1041, 1038, 1212, 1170,
 /*   840 */  1084, 1169,  978,  977,  976,  975,  974,  973, 1050, 1049,
 /*   850 */   954,  969,  953,  951,  928,  918,  923,  921,  922,  920,
 /*   860 */   919,  911,  908,  910,  907,  912,  909,  905,  903,  902,
 /*   870 */   901,  900,  899,  940,  939,  938,  933,  897,  896,  893,
 /*   880 */   892,  888,  887,  885,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
**
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
    0,  /*          $ => nothing */
    0,  /*    ILLEGAL => nothing */
    0,  /*    COMMENT => nothing */
    0,  /*      SPACE => nothing */
    0,  /*         ID => nothing */
    4,  /*      ABORT => ID */
    4,  /*     ACTION => ID */
    4,  /*      AFTER => ID */
    4,  /*     ALWAYS => ID */
    4,  /*    ANALYZE => ID */
    4,  /*        ASC => ID */
    4,  /*     ATTACH => ID */
    4,  /*     BEFORE => ID */
    4,  /*      BEGIN => ID */
    4,  /*         BY => ID */
    4,  /*    CASCADE => ID */
    4,  /*       CAST => ID */
    4,  /*   COLUMNKW => ID */
    4,  /*   CONFLICT => ID */
    4,  /*    CURRENT => ID */
    4,  /*   DATABASE => ID */
    4,  /*   DEFERRED => ID */
    4,  /*       DESC => ID */
    4,  /*     DETACH => ID */
    4,  /*         DO => ID */
    4,  /*       EACH => ID */
    4,  /*        END => ID */
    4,  /*    EXCLUDE => ID */
    4,  /*  EXCLUSIVE => ID */
    4,  /*    EXPLAIN => ID */
    4,  /*       FAIL => ID */
    4,  /*      FIRST => ID */
    4,  /*  FOLLOWING => ID */
    4,  /*        FOR => ID */
    4,  /*  GENERATED => ID */
    4,  /*     GROUPS => ID */
    4,  /*     IGNORE => ID */
    4,  /*  IMMEDIATE => ID */
    4,  /*  INITIALLY => ID */
    4,  /*    INSTEAD => ID */
    4,  /*       LAST => ID */
    4,  /*    LIKE_KW => ID */
    4,  /*      MATCH => ID */
    4,  /* MATERIALIZED => ID */
    4,  /*         NO => ID */
    4,  /*      NULLS => ID */
    4,  /*     OTHERS => ID */
    4,  /*       PLAN => ID */
    4,  /*      QUERY => ID */
    4,  /*        KEY => ID */
    4,  /*         OF => ID */
    4,  /*     OFFSET => ID */
    4,  /*  PARTITION => ID */
    4,  /*     PRAGMA => ID */
    4,  /*  PRECEDING => ID */
    4,  /*      RAISE => ID */
    4,  /*      RANGE => ID */
    4,  /*  RECURSIVE => ID */
    4,  /*    RELEASE => ID */
    4,  /*    REPLACE => ID */
    4,  /*   RESTRICT => ID */
    4,  /*        ROW => ID */
    4,  /*       ROWS => ID */
    4,  /*   ROLLBACK => ID */
    4,  /*  SAVEPOINT => ID */
    4,  /*       TEMP => ID */
    4,  /*       TIES => ID */
    4,  /*    TRIGGER => ID */
    4,  /*  UNBOUNDED => ID */
    4,  /*     VACUUM => ID */
    4,  /*       VIEW => ID */
    4,  /*    VIRTUAL => ID */
    4,  /*       WITH => ID */
    4,  /*    WITHOUT => ID */
    4,  /*    REINDEX => ID */
    4,  /*     RENAME => ID */
    4,  /*   CTIME_KW => ID */
    4,  /*         IF => ID */
    4,  /*     FILTER => ID */
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
  QList<Token*>* tokens = nullptr;
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  sqlite3_parseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

void *sqlite3_parseCopyParserState(void* other)
{
  yyParser *pParser;
  yyParser *otherParser = (yyParser*)other;

  // Copy parser
  pParser = (yyParser*)malloc((size_t)sizeof(yyParser));
  memcpy(pParser, other, (size_t)sizeof(yyParser));

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = malloc((size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)other)->yystack, (size_t)stackSize);
#endif

  for (int i = 0; i <= pParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(otherParser->yystack[i].tokens);
  }

  return pParser;
}

void sqlite3_parseAddToken(void* other, Token* token)
{
    yyParser *otherParser = (yyParser*)other;
    if (otherParser->yyidx < 0)
        return; // Nothing on stack yet. Might happen when parsing just whitespaces, nothing else.

    otherParser->yystack[otherParser->yyidx].tokens->append(token);
}

void sqlite3_parseRestoreParserState(void* saved, void* target)
{
  yyParser *pParser = (yyParser*)target;
  yyParser *savedParser = (yyParser*)saved;

  for (int i = 0; i <= pParser->yyidx; i++)
      delete pParser->yystack[i].tokens;

  memcpy(pParser, saved, (size_t)sizeof(yyParser));

  for (int i = 0; i <= savedParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(savedParser->yystack[i].tokens);
  }

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = relloc(pParser->yystack, (size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)saved)->yystack, (size_t)stackSize);
#endif
}

void sqlite3_parseFreeSavedState(void* other)
{
    yyParser *pParser = (yyParser*)other;
    for (int i = 0; i <= pParser->yyidx; i++)
        delete pParser->yystack[i].tokens;

#if YYSTACKDEPTH<=0
    free(pParser->yystack);
#endif
    free(other);
}

#ifndef NDEBUG
/*
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = {
  "$",             "ILLEGAL",       "COMMENT",       "SPACE",       
  "ID",            "ABORT",         "ACTION",        "AFTER",       
  "ALWAYS",        "ANALYZE",       "ASC",           "ATTACH",      
  "BEFORE",        "BEGIN",         "BY",            "CASCADE",     
  "CAST",          "COLUMNKW",      "CONFLICT",      "CURRENT",     
  "DATABASE",      "DEFERRED",      "DESC",          "DETACH",      
  "DO",            "EACH",          "END",           "EXCLUDE",     
  "EXCLUSIVE",     "EXPLAIN",       "FAIL",          "FIRST",       
  "FOLLOWING",     "FOR",           "GENERATED",     "GROUPS",      
  "IGNORE",        "IMMEDIATE",     "INITIALLY",     "INSTEAD",     
  "LAST",          "LIKE_KW",       "MATCH",         "MATERIALIZED",
  "NO",            "NULLS",         "OTHERS",        "PLAN",        
  "QUERY",         "KEY",           "OF",            "OFFSET",      
  "PARTITION",     "PRAGMA",        "PRECEDING",     "RAISE",       
  "RANGE",         "RECURSIVE",     "RELEASE",       "REPLACE",     
  "RESTRICT",      "ROW",           "ROWS",          "ROLLBACK",    
  "SAVEPOINT",     "TEMP",          "TIES",          "TRIGGER",     
  "UNBOUNDED",     "VACUUM",        "VIEW",          "VIRTUAL",     
  "WITH",          "WITHOUT",       "REINDEX",       "RENAME",      
  "CTIME_KW",      "IF",            "FILTER",        "ANY",         
  "OR",            "AND",           "NOT",           "IS",          
  "BETWEEN",       "IN",            "ISNULL",        "NOTNULL",     
  "NE",            "EQ",            "GT",            "LE",          
  "LT",            "GE",            "ESCAPE",        "BITAND",      
  "BITOR",         "LSHIFT",        "RSHIFT",        "PLUS",        
  "MINUS",         "STAR",          "SLASH",         "REM",         
  "CONCAT",        "PTR",           "COLLATE",       "BITNOT",      
  "SEMI",          "TRANSACTION",   "ID_TRANS",      "COMMIT",      
  "TO",            "CREATE",        "TABLE",         "LP",          
  "RP",            "AS",            "DOT",           "ID_TAB_NEW",  
  "ID_DB",         "COMMA",         "CTX_ROWID_KW",  "CTX_STRICT_KW",
  "EXISTS",        "ID_COL_NEW",    "INDEXED",       "STRING",      
  "JOIN_KW",       "ID_COL_TYPE",   "RIGHT_ASSOC",   "CONSTRAINT",  
  "DEFAULT",       "NULL",          "PRIMARY",       "UNIQUE",      
  "CHECK",         "REFERENCES",    "ID_CONSTR",     "ID_COLLATE",  
  "ID_TAB",        "INTEGER",       "FLOAT",         "BLOB",        
  "AUTOINCR",      "ON",            "INSERT",        "DELETE",      
  "UPDATE",        "ID_FK_MATCH",   "SET",           "DEFERRABLE",  
  "FOREIGN",       "DROP",          "ID_VIEW_NEW",   "ID_VIEW",     
  "SELECT",        "VALUES",        "UNION",         "ALL",         
  "EXCEPT",        "INTERSECT",     "DISTINCT",      "ID_ALIAS",    
  "FROM",          "USING",         "JOIN",          "ID_JOIN_OPTS",
  "ID_IDX",        "ORDER",         "GROUP",         "HAVING",      
  "LIMIT",         "WHERE",         "RETURNING",     "ID_COL",      
  "INTO",          "NOTHING",       "ID_FN",         "ID_ERR_MSG",  
  "VARIABLE",      "CASE",          "WHEN",          "THEN",        
  "ELSE",          "INDEX",         "ID_IDX_NEW",    "ID_PRAGMA",   
  "ID_TRIG_NEW",   "ID_TRIG",       "ALTER",         "ADD",         
  "WINDOW",        "OVER",          "error",         "cmd",         
  "input",         "cmdlist",       "ecmd",          "explain",     
  "cmdx",          "transtype",     "trans_opt",     "nm",          
  "savepoint_opt",  "temp",          "ifnotexists",   "fullname",    
  "columnlist",    "conslist_opt",  "table_options",  "select",      
  "table_option",  "column",        "columnid",      "type",        
  "carglist",      "id",            "id_opt",        "ids",         
  "typetoken",     "typename",      "signed",        "plus_num",    
  "minus_num",     "ccons",         "term",          "expr",        
  "onconf",        "sortorder",     "autoinc",       "idxlist_opt", 
  "refargs",       "defer_subclause",  "gen_always",    "tnm",         
  "refarg",        "refact",        "init_deferred_pred_opt",  "conslist",    
  "tconscomma",    "tcons",         "idxlist",       "defer_subclause_opt",
  "resolvetype",   "orconf",        "raisetype",     "ifexists",    
  "select_stmt",   "with",          "selectnowith",  "oneselect",   
  "multiselect_op",  "values",        "distinct",      "selcollist",  
  "from",          "where_opt",     "groupby_opt",   "having_opt",  
  "orderby_opt",   "limit_opt",     "window_clause",  "nexprlist",   
  "exprlist",      "sclp",          "as",            "joinsrc",     
  "singlesrc",     "seltablist",    "joinop",        "joinconstr_opt",
  "dbnm",          "indexed_opt",   "idlist",        "xfullname",   
  "indexed_by",    "sortlist",      "nulls",         "delete_stmt", 
  "returning",     "update_stmt",   "setlist",       "idlist_opt",  
  "insert_stmt",   "insert_cmd",    "upsert",        "rp_opt",      
  "exprx",         "not_opt",       "likeop",        "case_operand",
  "case_exprlist",  "case_else",     "filter_over",   "uniqueflag",  
  "idxlist_single",  "collate",       "vinto",         "nmnum",       
  "number",        "trigger_time",  "trigger_event",  "foreach_clause",
  "when_clause",   "trigger_cmd_list",  "trigger_cmd",   "database_kw_opt",
  "key_opt",       "kwcolumn_opt",  "create_vtab",   "vtabarglist", 
  "vtabarg",       "vtabargtoken",  "anylist",       "wqlist",      
  "wqas",          "wqcte",         "windowdefn_list",  "windowdefn",  
  "window",        "frame_opt",     "range_or_rows",  "frame_bound_s",
  "frame_exclude_opt",  "frame_bound_e",  "frame_bound",   "frame_exclude",
  "filter_clause",  "over_clause", 
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "input ::= cmdlist",
 /*   1 */ "cmdlist ::= cmdlist ecmd",
 /*   2 */ "cmdlist ::= ecmd",
 /*   3 */ "ecmd ::= SEMI",
 /*   4 */ "ecmd ::= explain cmdx SEMI",
 /*   5 */ "explain ::=",
 /*   6 */ "explain ::= EXPLAIN",
 /*   7 */ "explain ::= EXPLAIN QUERY PLAN",
 /*   8 */ "cmdx ::= cmd",
 /*   9 */ "cmd ::= BEGIN transtype trans_opt",
 /*  10 */ "trans_opt ::=",
 /*  11 */ "trans_opt ::= TRANSACTION",
 /*  12 */ "trans_opt ::= TRANSACTION nm",
 /*  13 */ "trans_opt ::= TRANSACTION ID_TRANS",
 /*  14 */ "transtype ::=",
 /*  15 */ "transtype ::= DEFERRED",
 /*  16 */ "transtype ::= IMMEDIATE",
 /*  17 */ "transtype ::= EXCLUSIVE",
 /*  18 */ "cmd ::= COMMIT trans_opt",
 /*  19 */ "cmd ::= END trans_opt",
 /*  20 */ "cmd ::= ROLLBACK trans_opt",
 /*  21 */ "savepoint_opt ::= SAVEPOINT",
 /*  22 */ "savepoint_opt ::=",
 /*  23 */ "cmd ::= SAVEPOINT nm",
 /*  24 */ "cmd ::= RELEASE savepoint_opt nm",
 /*  25 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt nm",
 /*  26 */ "cmd ::= SAVEPOINT ID_TRANS",
 /*  27 */ "cmd ::= RELEASE savepoint_opt ID_TRANS",
 /*  28 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS",
 /*  29 */ "cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options",
 /*  30 */ "cmd ::= CREATE temp TABLE ifnotexists fullname AS select",
 /*  31 */ "cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW",
 /*  32 */ "cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /*  33 */ "table_options ::=",
 /*  34 */ "table_options ::= table_option",
 /*  35 */ "table_options ::= table_options COMMA table_option",
 /*  36 */ "table_option ::= WITHOUT nm",
 /*  37 */ "table_option ::= nm",
 /*  38 */ "table_option ::= WITHOUT CTX_ROWID_KW",
 /*  39 */ "table_option ::= CTX_STRICT_KW",
 /*  40 */ "ifnotexists ::=",
 /*  41 */ "ifnotexists ::= IF NOT EXISTS",
 /*  42 */ "temp ::= TEMP",
 /*  43 */ "temp ::=",
 /*  44 */ "columnlist ::= columnlist COMMA column",
 /*  45 */ "columnlist ::= column",
 /*  46 */ "column ::= columnid type carglist",
 /*  47 */ "columnid ::= nm",
 /*  48 */ "columnid ::= ID_COL_NEW",
 /*  49 */ "id ::= ID|INDEXED",
 /*  50 */ "id_opt ::= id",
 /*  51 */ "id_opt ::=",
 /*  52 */ "ids ::= ID",
 /*  53 */ "ids ::= STRING",
 /*  54 */ "nm ::= id",
 /*  55 */ "nm ::= STRING",
 /*  56 */ "nm ::= JOIN_KW",
 /*  57 */ "type ::=",
 /*  58 */ "type ::= typetoken",
 /*  59 */ "typetoken ::= typename",
 /*  60 */ "typetoken ::= typename LP signed RP",
 /*  61 */ "typetoken ::= typename LP signed COMMA signed RP",
 /*  62 */ "typename ::= ids",
 /*  63 */ "typename ::= typename ids",
 /*  64 */ "typename ::= ID_COL_TYPE",
 /*  65 */ "signed ::= plus_num",
 /*  66 */ "signed ::= minus_num",
 /*  67 */ "carglist ::= carglist ccons",
 /*  68 */ "carglist ::=",
 /*  69 */ "ccons ::= CONSTRAINT nm",
 /*  70 */ "ccons ::= DEFAULT term",
 /*  71 */ "ccons ::= DEFAULT LP expr RP",
 /*  72 */ "ccons ::= DEFAULT PLUS term",
 /*  73 */ "ccons ::= DEFAULT MINUS term",
 /*  74 */ "ccons ::= DEFAULT id",
 /*  75 */ "ccons ::= DEFAULT CTIME_KW",
 /*  76 */ "ccons ::= NULL onconf",
 /*  77 */ "ccons ::= NOT NULL onconf",
 /*  78 */ "ccons ::= PRIMARY KEY sortorder onconf autoinc",
 /*  79 */ "ccons ::= UNIQUE onconf",
 /*  80 */ "ccons ::= CHECK LP expr RP",
 /*  81 */ "ccons ::= REFERENCES nm idxlist_opt refargs",
 /*  82 */ "ccons ::= defer_subclause",
 /*  83 */ "ccons ::= COLLATE ids",
 /*  84 */ "ccons ::= gen_always AS LP expr RP id_opt",
 /*  85 */ "ccons ::= CONSTRAINT ID_CONSTR",
 /*  86 */ "ccons ::= COLLATE ID_COLLATE",
 /*  87 */ "ccons ::= REFERENCES ID_TAB",
 /*  88 */ "ccons ::= CHECK LP RP",
 /*  89 */ "term ::= NULL",
 /*  90 */ "term ::= INTEGER",
 /*  91 */ "term ::= FLOAT",
 /*  92 */ "term ::= STRING|BLOB",
 /*  93 */ "tnm ::= term",
 /*  94 */ "tnm ::= nm",
 /*  95 */ "gen_always ::= GENERATED ALWAYS",
 /*  96 */ "gen_always ::=",
 /*  97 */ "autoinc ::=",
 /*  98 */ "autoinc ::= AUTOINCR",
 /*  99 */ "refargs ::=",
 /* 100 */ "refargs ::= refargs refarg",
 /* 101 */ "refarg ::= MATCH nm",
 /* 102 */ "refarg ::= ON INSERT refact",
 /* 103 */ "refarg ::= ON DELETE refact",
 /* 104 */ "refarg ::= ON UPDATE refact",
 /* 105 */ "refarg ::= MATCH ID_FK_MATCH",
 /* 106 */ "refact ::= SET NULL",
 /* 107 */ "refact ::= SET DEFAULT",
 /* 108 */ "refact ::= CASCADE",
 /* 109 */ "refact ::= RESTRICT",
 /* 110 */ "refact ::= NO ACTION",
 /* 111 */ "defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt",
 /* 112 */ "defer_subclause ::= DEFERRABLE init_deferred_pred_opt",
 /* 113 */ "init_deferred_pred_opt ::=",
 /* 114 */ "init_deferred_pred_opt ::= INITIALLY DEFERRED",
 /* 115 */ "init_deferred_pred_opt ::= INITIALLY IMMEDIATE",
 /* 116 */ "conslist_opt ::=",
 /* 117 */ "conslist_opt ::= COMMA conslist",
 /* 118 */ "conslist ::= conslist tconscomma tcons",
 /* 119 */ "conslist ::= tcons",
 /* 120 */ "tconscomma ::= COMMA",
 /* 121 */ "tconscomma ::=",
 /* 122 */ "tcons ::= CONSTRAINT nm",
 /* 123 */ "tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf",
 /* 124 */ "tcons ::= UNIQUE LP idxlist RP onconf",
 /* 125 */ "tcons ::= CHECK LP expr RP onconf",
 /* 126 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt",
 /* 127 */ "tcons ::= CONSTRAINT ID_CONSTR",
 /* 128 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB",
 /* 129 */ "tcons ::= CHECK LP RP onconf",
 /* 130 */ "defer_subclause_opt ::=",
 /* 131 */ "defer_subclause_opt ::= defer_subclause",
 /* 132 */ "onconf ::=",
 /* 133 */ "onconf ::= ON CONFLICT resolvetype",
 /* 134 */ "orconf ::=",
 /* 135 */ "orconf ::= OR resolvetype",
 /* 136 */ "resolvetype ::= raisetype",
 /* 137 */ "resolvetype ::= IGNORE",
 /* 138 */ "resolvetype ::= REPLACE",
 /* 139 */ "cmd ::= DROP TABLE ifexists fullname",
 /* 140 */ "cmd ::= DROP TABLE ifexists nm DOT ID_TAB",
 /* 141 */ "cmd ::= DROP TABLE ifexists ID_DB|ID_TAB",
 /* 142 */ "ifexists ::= IF EXISTS",
 /* 143 */ "ifexists ::=",
 /* 144 */ "cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select",
 /* 145 */ "cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW",
 /* 146 */ "cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW",
 /* 147 */ "cmd ::= DROP VIEW ifexists fullname",
 /* 148 */ "cmd ::= DROP VIEW ifexists nm DOT ID_VIEW",
 /* 149 */ "cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW",
 /* 150 */ "cmd ::= select_stmt",
 /* 151 */ "select_stmt ::= select",
 /* 152 */ "select ::= with selectnowith",
 /* 153 */ "selectnowith ::= oneselect",
 /* 154 */ "selectnowith ::= selectnowith multiselect_op oneselect",
 /* 155 */ "selectnowith ::= values",
 /* 156 */ "selectnowith ::= selectnowith COMMA values",
 /* 157 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt",
 /* 158 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt",
 /* 159 */ "values ::= VALUES LP nexprlist RP",
 /* 160 */ "values ::= values COMMA LP exprlist RP",
 /* 161 */ "multiselect_op ::= UNION",
 /* 162 */ "multiselect_op ::= UNION ALL",
 /* 163 */ "multiselect_op ::= EXCEPT",
 /* 164 */ "multiselect_op ::= INTERSECT",
 /* 165 */ "distinct ::= DISTINCT",
 /* 166 */ "distinct ::= ALL",
 /* 167 */ "distinct ::=",
 /* 168 */ "sclp ::= selcollist COMMA",
 /* 169 */ "sclp ::=",
 /* 170 */ "selcollist ::= sclp expr as",
 /* 171 */ "selcollist ::= sclp STAR",
 /* 172 */ "selcollist ::= sclp tnm DOT STAR",
 /* 173 */ "selcollist ::= sclp",
 /* 174 */ "selcollist ::= sclp ID_TAB DOT STAR",
 /* 175 */ "as ::= AS nm",
 /* 176 */ "as ::= ids",
 /* 177 */ "as ::= AS ID_ALIAS",
 /* 178 */ "as ::= ID_ALIAS",
 /* 179 */ "as ::=",
 /* 180 */ "from ::=",
 /* 181 */ "from ::= FROM joinsrc",
 /* 182 */ "joinsrc ::= singlesrc seltablist",
 /* 183 */ "joinsrc ::=",
 /* 184 */ "seltablist ::= seltablist joinop singlesrc joinconstr_opt",
 /* 185 */ "seltablist ::=",
 /* 186 */ "singlesrc ::= nm dbnm as indexed_opt",
 /* 187 */ "singlesrc ::= LP select RP as",
 /* 188 */ "singlesrc ::= LP joinsrc RP as",
 /* 189 */ "singlesrc ::= nm dbnm LP exprlist RP as",
 /* 190 */ "singlesrc ::=",
 /* 191 */ "singlesrc ::= nm DOT",
 /* 192 */ "singlesrc ::= nm DOT ID_TAB",
 /* 193 */ "singlesrc ::= ID_DB|ID_TAB",
 /* 194 */ "singlesrc ::= nm DOT ID_VIEW",
 /* 195 */ "singlesrc ::= ID_DB|ID_VIEW",
 /* 196 */ "joinconstr_opt ::= ON expr",
 /* 197 */ "joinconstr_opt ::= USING LP idlist RP",
 /* 198 */ "joinconstr_opt ::=",
 /* 199 */ "dbnm ::=",
 /* 200 */ "dbnm ::= DOT nm",
 /* 201 */ "fullname ::= nm",
 /* 202 */ "fullname ::= nm DOT nm",
 /* 203 */ "xfullname ::= nm",
 /* 204 */ "xfullname ::= nm DOT nm",
 /* 205 */ "xfullname ::= nm DOT nm AS nm",
 /* 206 */ "xfullname ::= nm AS nm",
 /* 207 */ "xfullname ::= nm DOT nm AS ID_ALIAS",
 /* 208 */ "xfullname ::= nm AS ID_ALIAS",
 /* 209 */ "joinop ::= COMMA",
 /* 210 */ "joinop ::= JOIN",
 /* 211 */ "joinop ::= JOIN_KW JOIN",
 /* 212 */ "joinop ::= JOIN_KW nm JOIN",
 /* 213 */ "joinop ::= JOIN_KW nm nm JOIN",
 /* 214 */ "joinop ::= ID_JOIN_OPTS",
 /* 215 */ "indexed_opt ::=",
 /* 216 */ "indexed_opt ::= indexed_by",
 /* 217 */ "indexed_by ::= INDEXED BY nm",
 /* 218 */ "indexed_by ::= NOT INDEXED",
 /* 219 */ "indexed_by ::= INDEXED BY ID_IDX",
 /* 220 */ "orderby_opt ::=",
 /* 221 */ "orderby_opt ::= ORDER BY sortlist",
 /* 222 */ "sortlist ::= sortlist COMMA expr sortorder nulls",
 /* 223 */ "sortlist ::= expr sortorder nulls",
 /* 224 */ "sortorder ::= ASC",
 /* 225 */ "sortorder ::= DESC",
 /* 226 */ "sortorder ::=",
 /* 227 */ "nulls ::= NULLS FIRST",
 /* 228 */ "nulls ::= NULLS LAST",
 /* 229 */ "nulls ::=",
 /* 230 */ "groupby_opt ::=",
 /* 231 */ "groupby_opt ::= GROUP BY nexprlist",
 /* 232 */ "groupby_opt ::= GROUP BY",
 /* 233 */ "having_opt ::=",
 /* 234 */ "having_opt ::= HAVING expr",
 /* 235 */ "limit_opt ::=",
 /* 236 */ "limit_opt ::= LIMIT expr",
 /* 237 */ "limit_opt ::= LIMIT expr OFFSET expr",
 /* 238 */ "limit_opt ::= LIMIT expr COMMA expr",
 /* 239 */ "cmd ::= delete_stmt",
 /* 240 */ "delete_stmt ::= with DELETE FROM xfullname indexed_opt where_opt returning orderby_opt limit_opt",
 /* 241 */ "delete_stmt ::= with DELETE FROM",
 /* 242 */ "delete_stmt ::= with DELETE FROM nm DOT",
 /* 243 */ "delete_stmt ::= with DELETE FROM nm DOT ID_TAB",
 /* 244 */ "delete_stmt ::= with DELETE FROM ID_DB|ID_TAB",
 /* 245 */ "where_opt ::=",
 /* 246 */ "where_opt ::= WHERE expr",
 /* 247 */ "where_opt ::= WHERE",
 /* 248 */ "returning ::=",
 /* 249 */ "returning ::= RETURNING selcollist",
 /* 250 */ "cmd ::= update_stmt",
 /* 251 */ "update_stmt ::= with UPDATE orconf xfullname indexed_opt SET setlist from where_opt returning orderby_opt limit_opt",
 /* 252 */ "update_stmt ::= with UPDATE orconf",
 /* 253 */ "update_stmt ::= with UPDATE orconf nm DOT",
 /* 254 */ "update_stmt ::= with UPDATE orconf nm DOT ID_TAB",
 /* 255 */ "update_stmt ::= with UPDATE orconf ID_DB|ID_TAB",
 /* 256 */ "setlist ::= setlist COMMA nm EQ expr",
 /* 257 */ "setlist ::= setlist COMMA LP idlist RP EQ expr",
 /* 258 */ "setlist ::= nm EQ expr",
 /* 259 */ "setlist ::= LP idlist RP EQ expr",
 /* 260 */ "setlist ::=",
 /* 261 */ "setlist ::= setlist COMMA",
 /* 262 */ "setlist ::= setlist COMMA ID_COL",
 /* 263 */ "setlist ::= ID_COL",
 /* 264 */ "idlist_opt ::=",
 /* 265 */ "idlist_opt ::= LP idlist RP",
 /* 266 */ "idlist ::= idlist COMMA nm",
 /* 267 */ "idlist ::= nm",
 /* 268 */ "idlist ::=",
 /* 269 */ "idlist ::= idlist COMMA ID_COL",
 /* 270 */ "idlist ::= ID_COL",
 /* 271 */ "cmd ::= insert_stmt",
 /* 272 */ "insert_stmt ::= with insert_cmd INTO xfullname idlist_opt select upsert returning",
 /* 273 */ "insert_stmt ::= with insert_cmd INTO xfullname idlist_opt DEFAULT VALUES returning",
 /* 274 */ "insert_stmt ::= with insert_cmd INTO xfullname LP idlist rp_opt",
 /* 275 */ "insert_stmt ::= with insert_cmd INTO",
 /* 276 */ "insert_stmt ::= with insert_cmd INTO nm DOT",
 /* 277 */ "insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB",
 /* 278 */ "insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB",
 /* 279 */ "insert_cmd ::= INSERT orconf",
 /* 280 */ "insert_cmd ::= REPLACE",
 /* 281 */ "upsert ::=",
 /* 282 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt",
 /* 283 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING",
 /* 284 */ "upsert ::= ON CONFLICT DO NOTHING",
 /* 285 */ "exprx ::= expr not_opt IN ID_DB",
 /* 286 */ "exprx ::= expr not_opt IN nm DOT ID_TAB",
 /* 287 */ "exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN",
 /* 288 */ "exprx ::= tnm DOT ID_TAB|ID_COL",
 /* 289 */ "exprx ::= tnm DOT nm DOT ID_COL",
 /* 290 */ "exprx ::= expr COLLATE ID_COLLATE",
 /* 291 */ "exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP",
 /* 292 */ "exprx ::= CTIME_KW",
 /* 293 */ "exprx ::= LP nexprlist RP",
 /* 294 */ "exprx ::= tnm",
 /* 295 */ "exprx ::= tnm DOT nm",
 /* 296 */ "exprx ::= tnm DOT",
 /* 297 */ "exprx ::= tnm DOT nm DOT nm",
 /* 298 */ "exprx ::= tnm DOT nm DOT",
 /* 299 */ "exprx ::= VARIABLE",
 /* 300 */ "exprx ::= expr COLLATE ids",
 /* 301 */ "exprx ::= CAST LP expr AS typetoken RP",
 /* 302 */ "exprx ::= id LP distinct exprlist RP",
 /* 303 */ "exprx ::= id LP STAR RP",
 /* 304 */ "exprx ::= expr AND expr",
 /* 305 */ "exprx ::= expr OR expr",
 /* 306 */ "exprx ::= expr LT|GT|GE|LE expr",
 /* 307 */ "exprx ::= expr EQ|NE expr",
 /* 308 */ "exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr",
 /* 309 */ "exprx ::= expr PLUS|MINUS expr",
 /* 310 */ "exprx ::= expr STAR|SLASH|REM expr",
 /* 311 */ "exprx ::= expr CONCAT expr",
 /* 312 */ "exprx ::= expr not_opt likeop expr",
 /* 313 */ "exprx ::= expr not_opt likeop expr ESCAPE expr",
 /* 314 */ "exprx ::= expr ISNULL|NOTNULL",
 /* 315 */ "exprx ::= expr NOT NULL",
 /* 316 */ "exprx ::= expr IS not_opt expr",
 /* 317 */ "exprx ::= expr IS NOT DISTINCT FROM expr",
 /* 318 */ "exprx ::= expr IS DISTINCT FROM expr",
 /* 319 */ "exprx ::= NOT expr",
 /* 320 */ "exprx ::= BITNOT expr",
 /* 321 */ "exprx ::= MINUS expr",
 /* 322 */ "exprx ::= PLUS expr",
 /* 323 */ "exprx ::= expr PTR expr",
 /* 324 */ "exprx ::= expr not_opt BETWEEN expr AND expr",
 /* 325 */ "exprx ::= expr not_opt IN LP exprlist RP",
 /* 326 */ "exprx ::= LP select RP",
 /* 327 */ "exprx ::= expr not_opt IN LP select RP",
 /* 328 */ "exprx ::= expr not_opt IN nm dbnm",
 /* 329 */ "exprx ::= EXISTS LP select RP",
 /* 330 */ "exprx ::= CASE case_operand case_exprlist case_else END",
 /* 331 */ "exprx ::= RAISE LP IGNORE RP",
 /* 332 */ "exprx ::= RAISE LP raisetype COMMA nm RP",
 /* 333 */ "exprx ::= id LP distinct exprlist RP filter_over",
 /* 334 */ "exprx ::= id LP STAR RP filter_over",
 /* 335 */ "expr ::=",
 /* 336 */ "expr ::= exprx",
 /* 337 */ "not_opt ::=",
 /* 338 */ "not_opt ::= NOT",
 /* 339 */ "rp_opt ::=",
 /* 340 */ "rp_opt ::= RP",
 /* 341 */ "likeop ::= LIKE_KW|MATCH",
 /* 342 */ "case_exprlist ::= case_exprlist WHEN expr THEN expr",
 /* 343 */ "case_exprlist ::= WHEN expr THEN expr",
 /* 344 */ "case_else ::= ELSE expr",
 /* 345 */ "case_else ::=",
 /* 346 */ "case_operand ::= exprx",
 /* 347 */ "case_operand ::=",
 /* 348 */ "exprlist ::= nexprlist",
 /* 349 */ "exprlist ::=",
 /* 350 */ "nexprlist ::= nexprlist COMMA expr",
 /* 351 */ "nexprlist ::= exprx",
 /* 352 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt",
 /* 353 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB",
 /* 354 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW",
 /* 355 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW",
 /* 356 */ "uniqueflag ::= UNIQUE",
 /* 357 */ "uniqueflag ::=",
 /* 358 */ "idxlist_opt ::=",
 /* 359 */ "idxlist_opt ::= LP idxlist RP",
 /* 360 */ "idxlist ::= idxlist COMMA idxlist_single",
 /* 361 */ "idxlist ::= idxlist_single",
 /* 362 */ "idxlist_single ::= nm collate sortorder",
 /* 363 */ "idxlist_single ::= ID_COL",
 /* 364 */ "collate ::=",
 /* 365 */ "collate ::= COLLATE ids",
 /* 366 */ "collate ::= COLLATE ID_COLLATE",
 /* 367 */ "cmd ::= DROP INDEX ifexists fullname",
 /* 368 */ "cmd ::= DROP INDEX ifexists nm DOT ID_IDX",
 /* 369 */ "cmd ::= DROP INDEX ifexists ID_DB|ID_IDX",
 /* 370 */ "cmd ::= VACUUM vinto",
 /* 371 */ "cmd ::= VACUUM nm vinto",
 /* 372 */ "vinto ::= INTO expr",
 /* 373 */ "vinto ::=",
 /* 374 */ "cmd ::= PRAGMA nm dbnm",
 /* 375 */ "cmd ::= PRAGMA nm dbnm EQ nmnum",
 /* 376 */ "cmd ::= PRAGMA nm dbnm LP nmnum RP",
 /* 377 */ "cmd ::= PRAGMA nm dbnm EQ minus_num",
 /* 378 */ "cmd ::= PRAGMA nm dbnm LP minus_num RP",
 /* 379 */ "cmd ::= PRAGMA nm DOT ID_PRAGMA",
 /* 380 */ "cmd ::= PRAGMA ID_DB|ID_PRAGMA",
 /* 381 */ "nmnum ::= plus_num",
 /* 382 */ "nmnum ::= nm",
 /* 383 */ "nmnum ::= ON",
 /* 384 */ "nmnum ::= DELETE",
 /* 385 */ "nmnum ::= DEFAULT",
 /* 386 */ "plus_num ::= PLUS number",
 /* 387 */ "plus_num ::= number",
 /* 388 */ "minus_num ::= MINUS number",
 /* 389 */ "number ::= INTEGER",
 /* 390 */ "number ::= FLOAT",
 /* 391 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END",
 /* 392 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause",
 /* 393 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list",
 /* 394 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB",
 /* 395 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW",
 /* 396 */ "cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW",
 /* 397 */ "trigger_time ::= BEFORE",
 /* 398 */ "trigger_time ::= AFTER",
 /* 399 */ "trigger_time ::= INSTEAD OF",
 /* 400 */ "trigger_time ::=",
 /* 401 */ "trigger_event ::= DELETE",
 /* 402 */ "trigger_event ::= INSERT",
 /* 403 */ "trigger_event ::= UPDATE",
 /* 404 */ "trigger_event ::= UPDATE OF idlist",
 /* 405 */ "foreach_clause ::=",
 /* 406 */ "foreach_clause ::= FOR EACH ROW",
 /* 407 */ "when_clause ::=",
 /* 408 */ "when_clause ::= WHEN expr",
 /* 409 */ "trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI",
 /* 410 */ "trigger_cmd_list ::= trigger_cmd SEMI",
 /* 411 */ "trigger_cmd_list ::= SEMI",
 /* 412 */ "trigger_cmd ::= update_stmt",
 /* 413 */ "trigger_cmd ::= insert_stmt",
 /* 414 */ "trigger_cmd ::= delete_stmt",
 /* 415 */ "trigger_cmd ::= select_stmt",
 /* 416 */ "raisetype ::= ROLLBACK|ABORT|FAIL",
 /* 417 */ "cmd ::= DROP TRIGGER ifexists fullname",
 /* 418 */ "cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG",
 /* 419 */ "cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG",
 /* 420 */ "cmd ::= ATTACH database_kw_opt expr AS expr key_opt",
 /* 421 */ "cmd ::= DETACH database_kw_opt expr",
 /* 422 */ "key_opt ::=",
 /* 423 */ "key_opt ::= KEY expr",
 /* 424 */ "database_kw_opt ::= DATABASE",
 /* 425 */ "database_kw_opt ::=",
 /* 426 */ "cmd ::= REINDEX",
 /* 427 */ "cmd ::= REINDEX nm dbnm",
 /* 428 */ "cmd ::= REINDEX ID_COLLATE",
 /* 429 */ "cmd ::= REINDEX nm DOT ID_TAB|ID_IDX",
 /* 430 */ "cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB",
 /* 431 */ "cmd ::= ANALYZE",
 /* 432 */ "cmd ::= ANALYZE nm dbnm",
 /* 433 */ "cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX",
 /* 434 */ "cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB",
 /* 435 */ "cmd ::= ALTER TABLE fullname RENAME TO nm",
 /* 436 */ "cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column",
 /* 437 */ "cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm",
 /* 438 */ "cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW",
 /* 439 */ "cmd ::= ALTER TABLE nm DOT ID_TAB",
 /* 440 */ "cmd ::= ALTER TABLE ID_DB|ID_TAB",
 /* 441 */ "kwcolumn_opt ::=",
 /* 442 */ "kwcolumn_opt ::= COLUMNKW",
 /* 443 */ "cmd ::= create_vtab",
 /* 444 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm",
 /* 445 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP",
 /* 446 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW",
 /* 447 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /* 448 */ "vtabarglist ::= vtabarg",
 /* 449 */ "vtabarglist ::= vtabarglist COMMA vtabarg",
 /* 450 */ "vtabarg ::=",
 /* 451 */ "vtabarg ::= vtabarg vtabargtoken",
 /* 452 */ "vtabargtoken ::= ANY",
 /* 453 */ "vtabargtoken ::= LP anylist RP",
 /* 454 */ "anylist ::=",
 /* 455 */ "anylist ::= anylist LP anylist RP",
 /* 456 */ "anylist ::= anylist ANY",
 /* 457 */ "with ::=",
 /* 458 */ "with ::= WITH wqlist",
 /* 459 */ "with ::= WITH RECURSIVE wqlist",
 /* 460 */ "wqas ::= AS",
 /* 461 */ "wqas ::= AS MATERIALIZED",
 /* 462 */ "wqas ::= AS NOT MATERIALIZED",
 /* 463 */ "wqlist ::= wqcte",
 /* 464 */ "wqlist ::= wqlist COMMA wqcte",
 /* 465 */ "wqlist ::= ID_TAB_NEW",
 /* 466 */ "wqcte ::= nm idxlist_opt wqas LP select RP",
 /* 467 */ "windowdefn_list ::= windowdefn",
 /* 468 */ "windowdefn_list ::= windowdefn_list COMMA windowdefn",
 /* 469 */ "windowdefn ::= nm AS LP window RP",
 /* 470 */ "window ::= PARTITION BY nexprlist orderby_opt frame_opt",
 /* 471 */ "window ::= nm PARTITION BY nexprlist orderby_opt frame_opt",
 /* 472 */ "window ::= ORDER BY sortlist frame_opt",
 /* 473 */ "window ::= nm ORDER BY sortlist frame_opt",
 /* 474 */ "window ::= frame_opt",
 /* 475 */ "window ::= nm frame_opt",
 /* 476 */ "frame_opt ::=",
 /* 477 */ "frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt",
 /* 478 */ "frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt",
 /* 479 */ "range_or_rows ::= RANGE|ROWS|GROUPS",
 /* 480 */ "frame_bound_s ::= frame_bound",
 /* 481 */ "frame_bound_s ::= UNBOUNDED PRECEDING",
 /* 482 */ "frame_bound_e ::= frame_bound",
 /* 483 */ "frame_bound_e ::= UNBOUNDED FOLLOWING",
 /* 484 */ "frame_bound ::= expr PRECEDING|FOLLOWING",
 /* 485 */ "frame_bound ::= CURRENT ROW",
 /* 486 */ "frame_exclude_opt ::=",
 /* 487 */ "frame_exclude_opt ::= EXCLUDE frame_exclude",
 /* 488 */ "frame_exclude ::= NO OTHERS",
 /* 489 */ "frame_exclude ::= CURRENT ROW",
 /* 490 */ "frame_exclude ::= GROUP",
 /* 491 */ "frame_exclude ::= TIES",
 /* 492 */ "window_clause ::= WINDOW windowdefn_list",
 /* 493 */ "filter_over ::= filter_clause over_clause",
 /* 494 */ "filter_over ::= over_clause",
 /* 495 */ "filter_over ::= filter_clause",
 /* 496 */ "over_clause ::= OVER LP window RP",
 /* 497 */ "over_clause ::= OVER nm",
 /* 498 */ "filter_clause ::= FILTER LP WHERE expr RP",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/*
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to sqlite3_parse and sqlite3_parseFree.
*/
void *sqlite3_parseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  sqlite3_parseARG_FETCH;
  if (parserContext->executeRules)
  {
      switch( yymajor ){
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
    case 195: /* cmd */
    case 198: /* ecmd */
    case 200: /* cmdx */
    case 248: /* select_stmt */
    case 279: /* delete_stmt */
    case 281: /* update_stmt */
    case 284: /* insert_stmt */
    case 306: /* trigger_cmd */
    case 310: /* create_vtab */
{
parser_safe_delete((yypminor->yy443));
}
      break;
    case 199: /* explain */
{
parser_safe_delete((yypminor->yy511));
}
      break;
    case 201: /* transtype */
    case 202: /* trans_opt */
{
parser_safe_delete((yypminor->yy464));
}
      break;
    case 203: /* nm */
    case 214: /* columnid */
    case 217: /* id */
    case 218: /* id_opt */
    case 219: /* ids */
    case 221: /* typename */
    case 272: /* dbnm */
    case 297: /* collate */
    case 312: /* vtabarg */
    case 313: /* vtabargtoken */
    case 314: /* anylist */
{
parser_safe_delete((yypminor->yy259));
}
      break;
    case 204: /* savepoint_opt */
    case 206: /* ifnotexists */
    case 230: /* autoinc */
    case 234: /* gen_always */
    case 240: /* tconscomma */
    case 247: /* ifexists */
    case 287: /* rp_opt */
    case 289: /* not_opt */
    case 295: /* uniqueflag */
    case 307: /* database_kw_opt */
    case 309: /* kwcolumn_opt */
{
parser_safe_delete((yypminor->yy291));
}
      break;
    case 205: /* temp */
    case 254: /* distinct */
{
parser_safe_delete((yypminor->yy346));
}
      break;
    case 207: /* fullname */
{
parser_safe_delete((yypminor->yy60));
}
      break;
    case 208: /* columnlist */
{
parser_safe_delete((yypminor->yy42));
}
      break;
    case 209: /* conslist_opt */
    case 239: /* conslist */
{
parser_safe_delete((yypminor->yy373));
}
      break;
    case 210: /* table_options */
{
parser_safe_delete((yypminor->yy533));
}
      break;
    case 211: /* select */
    case 250: /* selectnowith */
{
parser_safe_delete((yypminor->yy453));
}
      break;
    case 212: /* table_option */
{
parser_safe_delete((yypminor->yy287));
}
      break;
    case 213: /* column */
{
parser_safe_delete((yypminor->yy567));
}
      break;
    case 215: /* type */
    case 220: /* typetoken */
{
parser_safe_delete((yypminor->yy477));
}
      break;
    case 216: /* carglist */
{
parser_safe_delete((yypminor->yy131));
}
      break;
    case 222: /* signed */
    case 223: /* plus_num */
    case 224: /* minus_num */
    case 226: /* term */
    case 299: /* nmnum */
    case 300: /* number */
{
parser_safe_delete((yypminor->yy249));
}
      break;
    case 225: /* ccons */
{
parser_safe_delete((yypminor->yy604));
}
      break;
    case 227: /* expr */
    case 257: /* where_opt */
    case 259: /* having_opt */
    case 288: /* exprx */
    case 291: /* case_operand */
    case 293: /* case_else */
    case 298: /* vinto */
    case 304: /* when_clause */
    case 308: /* key_opt */
{
parser_safe_delete((yypminor->yy252));
}
      break;
    case 228: /* onconf */
    case 244: /* resolvetype */
    case 245: /* orconf */
{
parser_safe_delete((yypminor->yy478));
}
      break;
    case 229: /* sortorder */
{
parser_safe_delete((yypminor->yy389));
}
      break;
    case 231: /* idxlist_opt */
    case 242: /* idxlist */
{
parser_safe_delete((yypminor->yy123));
}
      break;
    case 232: /* refargs */
{
parser_safe_delete((yypminor->yy324));
}
      break;
    case 233: /* defer_subclause */
    case 243: /* defer_subclause_opt */
{
parser_safe_delete((yypminor->yy449));
}
      break;
    case 235: /* tnm */
{
parser_safe_delete((yypminor->yy350));
}
      break;
    case 236: /* refarg */
{
parser_safe_delete((yypminor->yy607));
}
      break;
    case 237: /* refact */
{
parser_safe_delete((yypminor->yy124));
}
      break;
    case 238: /* init_deferred_pred_opt */
{
parser_safe_delete((yypminor->yy192));
}
      break;
    case 241: /* tcons */
{
parser_safe_delete((yypminor->yy106));
}
      break;
    case 249: /* with */
{
parser_safe_delete((yypminor->yy641));
}
      break;
    case 251: /* oneselect */
{
parser_safe_delete((yypminor->yy450));
}
      break;
    case 252: /* multiselect_op */
{
parser_safe_delete((yypminor->yy382));
}
      break;
    case 253: /* values */
{
parser_safe_delete((yypminor->yy546));
}
      break;
    case 255: /* selcollist */
    case 265: /* sclp */
    case 280: /* returning */
{
parser_safe_delete((yypminor->yy633));
}
      break;
    case 256: /* from */
    case 267: /* joinsrc */
{
parser_safe_delete((yypminor->yy91));
}
      break;
    case 258: /* groupby_opt */
    case 263: /* nexprlist */
    case 264: /* exprlist */
    case 292: /* case_exprlist */
{
parser_safe_delete((yypminor->yy351));
}
      break;
    case 260: /* orderby_opt */
    case 277: /* sortlist */
{
parser_safe_delete((yypminor->yy543));
}
      break;
    case 261: /* limit_opt */
{
parser_safe_delete((yypminor->yy444));
}
      break;
    case 262: /* window_clause */
    case 318: /* windowdefn_list */
{
parser_safe_delete((yypminor->yy639));
}
      break;
    case 266: /* as */
{
parser_safe_delete((yypminor->yy460));
}
      break;
    case 268: /* singlesrc */
{
parser_safe_delete((yypminor->yy361));
}
      break;
    case 269: /* seltablist */
{
parser_safe_delete((yypminor->yy11));
}
      break;
    case 270: /* joinop */
{
parser_safe_delete((yypminor->yy521));
}
      break;
    case 271: /* joinconstr_opt */
{
parser_safe_delete((yypminor->yy335));
}
      break;
    case 273: /* indexed_opt */
    case 276: /* indexed_by */
{
parser_safe_delete((yypminor->yy312));
}
      break;
    case 274: /* idlist */
    case 283: /* idlist_opt */
    case 311: /* vtabarglist */
{
parser_safe_delete((yypminor->yy215));
}
      break;
    case 275: /* xfullname */
{
parser_safe_delete((yypminor->yy116));
}
      break;
    case 278: /* nulls */
{
parser_safe_delete((yypminor->yy99));
}
      break;
    case 282: /* setlist */
{
parser_safe_delete((yypminor->yy321));
}
      break;
    case 285: /* insert_cmd */
{
parser_safe_delete((yypminor->yy584));
}
      break;
    case 286: /* upsert */
{
parser_safe_delete((yypminor->yy500));
}
      break;
    case 290: /* likeop */
{
parser_safe_delete((yypminor->yy100));
}
      break;
    case 294: /* filter_over */
{
parser_safe_delete((yypminor->yy247));
}
      break;
    case 296: /* idxlist_single */
{
parser_safe_delete((yypminor->yy608));
}
      break;
    case 301: /* trigger_time */
{
parser_safe_delete((yypminor->yy372));
}
      break;
    case 302: /* trigger_event */
{
parser_safe_delete((yypminor->yy331));
}
      break;
    case 303: /* foreach_clause */
{
parser_safe_delete((yypminor->yy323));
}
      break;
    case 305: /* trigger_cmd_list */
{
parser_safe_delete((yypminor->yy330));
}
      break;
    case 315: /* wqlist */
{
parser_safe_delete((yypminor->yy332));
}
      break;
    case 316: /* wqas */
{
parser_safe_delete((yypminor->yy640));
}
      break;
    case 317: /* wqcte */
{
parser_safe_delete((yypminor->yy446));
}
      break;
    case 319: /* windowdefn */
{
parser_safe_delete((yypminor->yy646));
}
      break;
    case 320: /* window */
{
parser_safe_delete((yypminor->yy234));
}
      break;
    case 321: /* frame_opt */
{
parser_safe_delete((yypminor->yy41));
}
      break;
    case 322: /* range_or_rows */
{
parser_safe_delete((yypminor->yy358));
}
      break;
    case 323: /* frame_bound_s */
    case 325: /* frame_bound_e */
{
parser_safe_delete((yypminor->yy81));
}
      break;
    case 326: /* frame_bound */
{
parser_safe_delete((yypminor->yy81));parser_safe_delete((yypminor->yy81));parser_safe_delete((yypminor->yy81));
}
      break;
    case 328: /* filter_clause */
{
parser_safe_delete((yypminor->yy657));
}
      break;
    case 329: /* over_clause */
{
parser_safe_delete((yypminor->yy288));
}
      break;
        default:  break;   /* If no destructor action specified: do nothing */
      }
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  /* There is no mechanism by which the parser stack can be popped below
  ** empty in SQLite.  */
  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  delete yytos->tokens;
  yytos->tokens = nullptr;
  pParser->yyidx--;
  return yymajor;
}

/*
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from sqlite3_parseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void sqlite3_parseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  /* In SQLite, we never try to destroy a parser that was not successfully
  ** created in the first place. */
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int sqlite3_parseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
  GET_CONTEXT;

  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0
             && parserContext->doFallbacks ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if(
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   UNUSED(yypMinor);
   sqlite3_parseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */

    parserContext->error(QObject::tr("Parser stack overflow"));
   sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
  yytos->tokens = new QList<Token*>();
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 196, 1 },
  { 197, 2 },
  { 197, 1 },
  { 198, 1 },
  { 198, 3 },
  { 199, 0 },
  { 199, 1 },
  { 199, 3 },
  { 200, 1 },
  { 195, 3 },
  { 202, 0 },
  { 202, 1 },
  { 202, 2 },
  { 202, 2 },
  { 201, 0 },
  { 201, 1 },
  { 201, 1 },
  { 201, 1 },
  { 195, 2 },
  { 195, 2 },
  { 195, 2 },
  { 204, 1 },
  { 204, 0 },
  { 195, 2 },
  { 195, 3 },
  { 195, 5 },
  { 195, 2 },
  { 195, 3 },
  { 195, 5 },
  { 195, 10 },
  { 195, 7 },
  { 195, 7 },
  { 195, 5 },
  { 210, 0 },
  { 210, 1 },
  { 210, 3 },
  { 212, 2 },
  { 212, 1 },
  { 212, 2 },
  { 212, 1 },
  { 206, 0 },
  { 206, 3 },
  { 205, 1 },
  { 205, 0 },
  { 208, 3 },
  { 208, 1 },
  { 213, 3 },
  { 214, 1 },
  { 214, 1 },
  { 217, 1 },
  { 218, 1 },
  { 218, 0 },
  { 219, 1 },
  { 219, 1 },
  { 203, 1 },
  { 203, 1 },
  { 203, 1 },
  { 215, 0 },
  { 215, 1 },
  { 220, 1 },
  { 220, 4 },
  { 220, 6 },
  { 221, 1 },
  { 221, 2 },
  { 221, 1 },
  { 222, 1 },
  { 222, 1 },
  { 216, 2 },
  { 216, 0 },
  { 225, 2 },
  { 225, 2 },
  { 225, 4 },
  { 225, 3 },
  { 225, 3 },
  { 225, 2 },
  { 225, 2 },
  { 225, 2 },
  { 225, 3 },
  { 225, 5 },
  { 225, 2 },
  { 225, 4 },
  { 225, 4 },
  { 225, 1 },
  { 225, 2 },
  { 225, 6 },
  { 225, 2 },
  { 225, 2 },
  { 225, 2 },
  { 225, 3 },
  { 226, 1 },
  { 226, 1 },
  { 226, 1 },
  { 226, 1 },
  { 235, 1 },
  { 235, 1 },
  { 234, 2 },
  { 234, 0 },
  { 230, 0 },
  { 230, 1 },
  { 232, 0 },
  { 232, 2 },
  { 236, 2 },
  { 236, 3 },
  { 236, 3 },
  { 236, 3 },
  { 236, 2 },
  { 237, 2 },
  { 237, 2 },
  { 237, 1 },
  { 237, 1 },
  { 237, 2 },
  { 233, 3 },
  { 233, 2 },
  { 238, 0 },
  { 238, 2 },
  { 238, 2 },
  { 209, 0 },
  { 209, 2 },
  { 239, 3 },
  { 239, 1 },
  { 240, 1 },
  { 240, 0 },
  { 241, 2 },
  { 241, 7 },
  { 241, 5 },
  { 241, 5 },
  { 241, 10 },
  { 241, 2 },
  { 241, 7 },
  { 241, 4 },
  { 243, 0 },
  { 243, 1 },
  { 228, 0 },
  { 228, 3 },
  { 245, 0 },
  { 245, 2 },
  { 244, 1 },
  { 244, 1 },
  { 244, 1 },
  { 195, 4 },
  { 195, 6 },
  { 195, 4 },
  { 247, 2 },
  { 247, 0 },
  { 195, 8 },
  { 195, 7 },
  { 195, 5 },
  { 195, 4 },
  { 195, 6 },
  { 195, 4 },
  { 195, 1 },
  { 248, 1 },
  { 211, 2 },
  { 250, 1 },
  { 250, 3 },
  { 250, 1 },
  { 250, 3 },
  { 251, 9 },
  { 251, 10 },
  { 253, 4 },
  { 253, 5 },
  { 252, 1 },
  { 252, 2 },
  { 252, 1 },
  { 252, 1 },
  { 254, 1 },
  { 254, 1 },
  { 254, 0 },
  { 265, 2 },
  { 265, 0 },
  { 255, 3 },
  { 255, 2 },
  { 255, 4 },
  { 255, 1 },
  { 255, 4 },
  { 266, 2 },
  { 266, 1 },
  { 266, 2 },
  { 266, 1 },
  { 266, 0 },
  { 256, 0 },
  { 256, 2 },
  { 267, 2 },
  { 267, 0 },
  { 269, 4 },
  { 269, 0 },
  { 268, 4 },
  { 268, 4 },
  { 268, 4 },
  { 268, 6 },
  { 268, 0 },
  { 268, 2 },
  { 268, 3 },
  { 268, 1 },
  { 268, 3 },
  { 268, 1 },
  { 271, 2 },
  { 271, 4 },
  { 271, 0 },
  { 272, 0 },
  { 272, 2 },
  { 207, 1 },
  { 207, 3 },
  { 275, 1 },
  { 275, 3 },
  { 275, 5 },
  { 275, 3 },
  { 275, 5 },
  { 275, 3 },
  { 270, 1 },
  { 270, 1 },
  { 270, 2 },
  { 270, 3 },
  { 270, 4 },
  { 270, 1 },
  { 273, 0 },
  { 273, 1 },
  { 276, 3 },
  { 276, 2 },
  { 276, 3 },
  { 260, 0 },
  { 260, 3 },
  { 277, 5 },
  { 277, 3 },
  { 229, 1 },
  { 229, 1 },
  { 229, 0 },
  { 278, 2 },
  { 278, 2 },
  { 278, 0 },
  { 258, 0 },
  { 258, 3 },
  { 258, 2 },
  { 259, 0 },
  { 259, 2 },
  { 261, 0 },
  { 261, 2 },
  { 261, 4 },
  { 261, 4 },
  { 195, 1 },
  { 279, 9 },
  { 279, 3 },
  { 279, 5 },
  { 279, 6 },
  { 279, 4 },
  { 257, 0 },
  { 257, 2 },
  { 257, 1 },
  { 280, 0 },
  { 280, 2 },
  { 195, 1 },
  { 281, 12 },
  { 281, 3 },
  { 281, 5 },
  { 281, 6 },
  { 281, 4 },
  { 282, 5 },
  { 282, 7 },
  { 282, 3 },
  { 282, 5 },
  { 282, 0 },
  { 282, 2 },
  { 282, 3 },
  { 282, 1 },
  { 283, 0 },
  { 283, 3 },
  { 274, 3 },
  { 274, 1 },
  { 274, 0 },
  { 274, 3 },
  { 274, 1 },
  { 195, 1 },
  { 284, 8 },
  { 284, 8 },
  { 284, 7 },
  { 284, 3 },
  { 284, 5 },
  { 284, 4 },
  { 284, 6 },
  { 285, 2 },
  { 285, 1 },
  { 286, 0 },
  { 286, 11 },
  { 286, 8 },
  { 286, 4 },
  { 288, 4 },
  { 288, 6 },
  { 288, 1 },
  { 288, 3 },
  { 288, 5 },
  { 288, 3 },
  { 288, 6 },
  { 288, 1 },
  { 288, 3 },
  { 288, 1 },
  { 288, 3 },
  { 288, 2 },
  { 288, 5 },
  { 288, 4 },
  { 288, 1 },
  { 288, 3 },
  { 288, 6 },
  { 288, 5 },
  { 288, 4 },
  { 288, 3 },
  { 288, 3 },
  { 288, 3 },
  { 288, 3 },
  { 288, 3 },
  { 288, 3 },
  { 288, 3 },
  { 288, 3 },
  { 288, 4 },
  { 288, 6 },
  { 288, 2 },
  { 288, 3 },
  { 288, 4 },
  { 288, 6 },
  { 288, 5 },
  { 288, 2 },
  { 288, 2 },
  { 288, 2 },
  { 288, 2 },
  { 288, 3 },
  { 288, 6 },
  { 288, 6 },
  { 288, 3 },
  { 288, 6 },
  { 288, 5 },
  { 288, 4 },
  { 288, 5 },
  { 288, 4 },
  { 288, 6 },
  { 288, 6 },
  { 288, 5 },
  { 227, 0 },
  { 227, 1 },
  { 289, 0 },
  { 289, 1 },
  { 287, 0 },
  { 287, 1 },
  { 290, 1 },
  { 292, 5 },
  { 292, 4 },
  { 293, 2 },
  { 293, 0 },
  { 291, 1 },
  { 291, 0 },
  { 264, 1 },
  { 264, 0 },
  { 263, 3 },
  { 263, 1 },
  { 195, 12 },
  { 195, 8 },
  { 195, 7 },
  { 195, 5 },
  { 295, 1 },
  { 295, 0 },
  { 231, 0 },
  { 231, 3 },
  { 242, 3 },
  { 242, 1 },
  { 296, 3 },
  { 296, 1 },
  { 297, 0 },
  { 297, 2 },
  { 297, 2 },
  { 195, 4 },
  { 195, 6 },
  { 195, 4 },
  { 195, 2 },
  { 195, 3 },
  { 298, 2 },
  { 298, 0 },
  { 195, 3 },
  { 195, 5 },
  { 195, 6 },
  { 195, 5 },
  { 195, 6 },
  { 195, 4 },
  { 195, 2 },
  { 299, 1 },
  { 299, 1 },
  { 299, 1 },
  { 299, 1 },
  { 299, 1 },
  { 223, 2 },
  { 223, 1 },
  { 224, 2 },
  { 300, 1 },
  { 300, 1 },
  { 195, 15 },
  { 195, 12 },
  { 195, 14 },
  { 195, 10 },
  { 195, 7 },
  { 195, 5 },
  { 301, 1 },
  { 301, 1 },
  { 301, 2 },
  { 301, 0 },
  { 302, 1 },
  { 302, 1 },
  { 302, 1 },
  { 302, 3 },
  { 303, 0 },
  { 303, 3 },
  { 304, 0 },
  { 304, 2 },
  { 305, 3 },
  { 305, 2 },
  { 305, 1 },
  { 306, 1 },
  { 306, 1 },
  { 306, 1 },
  { 306, 1 },
  { 246, 1 },
  { 195, 4 },
  { 195, 6 },
  { 195, 4 },
  { 195, 6 },
  { 195, 3 },
  { 308, 0 },
  { 308, 2 },
  { 307, 1 },
  { 307, 0 },
  { 195, 1 },
  { 195, 3 },
  { 195, 2 },
  { 195, 4 },
  { 195, 2 },
  { 195, 1 },
  { 195, 3 },
  { 195, 4 },
  { 195, 2 },
  { 195, 6 },
  { 195, 6 },
  { 195, 6 },
  { 195, 6 },
  { 195, 5 },
  { 195, 3 },
  { 309, 0 },
  { 309, 1 },
  { 195, 1 },
  { 310, 8 },
  { 310, 11 },
  { 310, 7 },
  { 310, 5 },
  { 311, 1 },
  { 311, 3 },
  { 312, 0 },
  { 312, 2 },
  { 313, 1 },
  { 313, 3 },
  { 314, 0 },
  { 314, 4 },
  { 314, 2 },
  { 249, 0 },
  { 249, 2 },
  { 249, 3 },
  { 316, 1 },
  { 316, 2 },
  { 316, 3 },
  { 315, 1 },
  { 315, 3 },
  { 315, 1 },
  { 317, 6 },
  { 318, 1 },
  { 318, 3 },
  { 319, 5 },
  { 320, 5 },
  { 320, 6 },
  { 320, 4 },
  { 320, 5 },
  { 320, 1 },
  { 320, 2 },
  { 321, 0 },
  { 321, 3 },
  { 321, 6 },
  { 322, 1 },
  { 323, 1 },
  { 323, 2 },
  { 325, 1 },
  { 325, 2 },
  { 326, 2 },
  { 326, 2 },
  { 324, 0 },
  { 324, 2 },
  { 327, 2 },
  { 327, 2 },
  { 327, 1 },
  { 327, 1 },
  { 262, 2 },
  { 294, 2 },
  { 294, 1 },
  { 294, 1 },
  { 329, 4 },
  { 329, 2 },
  { 328, 5 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  sqlite3_parseARG_FETCH;
  SqliteStatement* objectForTokens = 0;
  QStringList noTokenInheritanceFields;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  if (parserContext->executeRules)
  {
      switch( yyruleno ){
      /* Beginning here are the reduction cases.  A typical example
      ** follows:
      **   case 0:
      **  #line <lineno> <grammarfile>
      **     { ... }           // User supplied code
      **  #line <lineno> <thisfile>
      **     break;
      */
      case 1: /* cmdlist ::= cmdlist ecmd */
{parserContext->addQuery(yymsp[0].minor.yy443); DONT_INHERIT_TOKENS("cmdlist");}
        break;
      case 2: /* cmdlist ::= ecmd */
{parserContext->addQuery(yymsp[0].minor.yy443);}
        break;
      case 3: /* ecmd ::= SEMI */
{yygotominor.yy443 = new SqliteEmptyQuery();}
        break;
      case 4: /* ecmd ::= explain cmdx SEMI */
{
                                                yygotominor.yy443 = yymsp[-1].minor.yy443;
                                                yygotominor.yy443->explain = yymsp[-2].minor.yy511->explain;
                                                yygotominor.yy443->queryPlan = yymsp[-2].minor.yy511->queryPlan;
                                                delete yymsp[-2].minor.yy511;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 5: /* explain ::= */
{yygotominor.yy511 = new ParserStubExplain(false, false);}
        break;
      case 6: /* explain ::= EXPLAIN */
{yygotominor.yy511 = new ParserStubExplain(true, false);}
        break;
      case 7: /* explain ::= EXPLAIN QUERY PLAN */
{yygotominor.yy511 = new ParserStubExplain(true, true);}
        break;
      case 8: /* cmdx ::= cmd */
      case 412: /* trigger_cmd ::= update_stmt */ yytestcase(yyruleno==412);
      case 413: /* trigger_cmd ::= insert_stmt */ yytestcase(yyruleno==413);
      case 414: /* trigger_cmd ::= delete_stmt */ yytestcase(yyruleno==414);
      case 415: /* trigger_cmd ::= select_stmt */ yytestcase(yyruleno==415);
      case 443: /* cmd ::= create_vtab */ yytestcase(yyruleno==443);
{yygotominor.yy443 = yymsp[0].minor.yy443;}
        break;
      case 9: /* cmd ::= BEGIN transtype trans_opt */
{
                                                yygotominor.yy443 = new SqliteBeginTrans(
                                                        yymsp[-1].minor.yy464->type,
                                                        yymsp[0].minor.yy464->transactionKw,
                                                        yymsp[0].minor.yy464->name
                                                    );
                                                delete yymsp[0].minor.yy464;
                                                delete yymsp[-1].minor.yy464;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 10: /* trans_opt ::= */
      case 14: /* transtype ::= */ yytestcase(yyruleno==14);
{yygotominor.yy464 = new ParserStubTransDetails();}
        break;
      case 11: /* trans_opt ::= TRANSACTION */
{
                                                yygotominor.yy464 = new ParserStubTransDetails();
                                                yygotominor.yy464->transactionKw = true;
                                            }
        break;
      case 12: /* trans_opt ::= TRANSACTION nm */
      case 13: /* trans_opt ::= TRANSACTION ID_TRANS */ yytestcase(yyruleno==13);
{
                                                yygotominor.yy464 = new ParserStubTransDetails();
                                                yygotominor.yy464->transactionKw = true;
                                                yygotominor.yy464->name = *(yymsp[0].minor.yy259);
                                                delete yymsp[0].minor.yy259;
                                            }
        break;
      case 15: /* transtype ::= DEFERRED */
{
                                                yygotominor.yy464 = new ParserStubTransDetails();
                                                yygotominor.yy464->type = SqliteBeginTrans::Type::DEFERRED;
                                            }
        break;
      case 16: /* transtype ::= IMMEDIATE */
{
                                                yygotominor.yy464 = new ParserStubTransDetails();
                                                yygotominor.yy464->type = SqliteBeginTrans::Type::IMMEDIATE;
                                            }
        break;
      case 17: /* transtype ::= EXCLUSIVE */
{
                                                yygotominor.yy464 = new ParserStubTransDetails();
                                                yygotominor.yy464->type = SqliteBeginTrans::Type::EXCLUSIVE;
                                            }
        break;
      case 18: /* cmd ::= COMMIT trans_opt */
{
                                                yygotominor.yy443 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy464->transactionKw,
                                                        yymsp[0].minor.yy464->name,
                                                        false
                                                    );
                                                delete yymsp[0].minor.yy464;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 19: /* cmd ::= END trans_opt */
{
                                                yygotominor.yy443 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy464->transactionKw,
                                                        yymsp[0].minor.yy464->name,
                                                        true
                                                    );
                                                delete yymsp[0].minor.yy464;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 20: /* cmd ::= ROLLBACK trans_opt */
{
                                                yygotominor.yy443 = new SqliteRollback(
                                                        yymsp[0].minor.yy464->transactionKw,
                                                        yymsp[0].minor.yy464->name
                                                    );
                                                delete yymsp[0].minor.yy464;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 21: /* savepoint_opt ::= SAVEPOINT */
      case 41: /* ifnotexists ::= IF NOT EXISTS */ yytestcase(yyruleno==41);
      case 95: /* gen_always ::= GENERATED ALWAYS */ yytestcase(yyruleno==95);
      case 98: /* autoinc ::= AUTOINCR */ yytestcase(yyruleno==98);
      case 120: /* tconscomma ::= COMMA */ yytestcase(yyruleno==120);
      case 142: /* ifexists ::= IF EXISTS */ yytestcase(yyruleno==142);
      case 338: /* not_opt ::= NOT */ yytestcase(yyruleno==338);
      case 340: /* rp_opt ::= RP */ yytestcase(yyruleno==340);
      case 356: /* uniqueflag ::= UNIQUE */ yytestcase(yyruleno==356);
      case 424: /* database_kw_opt ::= DATABASE */ yytestcase(yyruleno==424);
      case 441: /* kwcolumn_opt ::= */ yytestcase(yyruleno==441);
{yygotominor.yy291 = new bool(true);}
        break;
      case 22: /* savepoint_opt ::= */
      case 40: /* ifnotexists ::= */ yytestcase(yyruleno==40);
      case 96: /* gen_always ::= */ yytestcase(yyruleno==96);
      case 97: /* autoinc ::= */ yytestcase(yyruleno==97);
      case 121: /* tconscomma ::= */ yytestcase(yyruleno==121);
      case 143: /* ifexists ::= */ yytestcase(yyruleno==143);
      case 337: /* not_opt ::= */ yytestcase(yyruleno==337);
      case 339: /* rp_opt ::= */ yytestcase(yyruleno==339);
      case 357: /* uniqueflag ::= */ yytestcase(yyruleno==357);
      case 425: /* database_kw_opt ::= */ yytestcase(yyruleno==425);
      case 442: /* kwcolumn_opt ::= COLUMNKW */ yytestcase(yyruleno==442);
{yygotominor.yy291 = new bool(false);}
        break;
      case 23: /* cmd ::= SAVEPOINT nm */
{
                                                yygotominor.yy443 = new SqliteSavepoint(*(yymsp[0].minor.yy259));
                                                delete yymsp[0].minor.yy259;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 24: /* cmd ::= RELEASE savepoint_opt nm */
{
                                                yygotominor.yy443 = new SqliteRelease(*(yymsp[-1].minor.yy291), *(yymsp[0].minor.yy259));
                                                delete yymsp[0].minor.yy259;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 25: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt nm */
      case 26: /* cmd ::= SAVEPOINT ID_TRANS */ yytestcase(yyruleno==26);
{
                                                yygotominor.yy443 = new SqliteRollback(
                                                        yymsp[-3].minor.yy464->transactionKw,
                                                        *(yymsp[-1].minor.yy291),
                                                        *(yymsp[0].minor.yy259)
                                                    );
                                                delete yymsp[-1].minor.yy291;
                                                delete yymsp[-3].minor.yy464;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 27: /* cmd ::= RELEASE savepoint_opt ID_TRANS */
      case 28: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS */ yytestcase(yyruleno==28);
{  yy_destructor(yypParser,204,&yymsp[-1].minor);
}
        break;
      case 29: /* cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options */
{
                                                yygotominor.yy443 = new SqliteCreateTable(
                                                        *(yymsp[-6].minor.yy291),
                                                        *(yymsp[-8].minor.yy346),
                                                        yymsp[-5].minor.yy60->name1,
                                                        yymsp[-5].minor.yy60->name2,
                                                        *(yymsp[-3].minor.yy42),
                                                        *(yymsp[-2].minor.yy373),
                                                        *(yymsp[0].minor.yy533)
                                                    );
                                                delete yymsp[-6].minor.yy291;
                                                delete yymsp[-8].minor.yy346;
                                                delete yymsp[-3].minor.yy42;
                                                delete yymsp[-2].minor.yy373;
                                                delete yymsp[-5].minor.yy60;
                                                delete yymsp[0].minor.yy533;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 30: /* cmd ::= CREATE temp TABLE ifnotexists fullname AS select */
{
                                                yygotominor.yy443 = new SqliteCreateTable(
                                                        *(yymsp[-3].minor.yy291),
                                                        *(yymsp[-5].minor.yy346),
                                                        yymsp[-2].minor.yy60->name1,
                                                        yymsp[-2].minor.yy60->name2,
                                                        yymsp[0].minor.yy453
                                                    );
                                                delete yymsp[-3].minor.yy291;
                                                delete yymsp[-5].minor.yy346;
                                                delete yymsp[-2].minor.yy60;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 31: /* cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW */
      case 145: /* cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW */ yytestcase(yyruleno==145);
      case 395: /* cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW */ yytestcase(yyruleno==395);
{  yy_destructor(yypParser,205,&yymsp[-5].minor);
  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 32: /* cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW */
      case 146: /* cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW */ yytestcase(yyruleno==146);
      case 396: /* cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW */ yytestcase(yyruleno==396);
{  yy_destructor(yypParser,205,&yymsp[-3].minor);
}
        break;
      case 33: /* table_options ::= */
{yygotominor.yy533 = new ParserCreateTableOptionList();}
        break;
      case 34: /* table_options ::= table_option */
{
                                                yygotominor.yy533 = new ParserCreateTableOptionList();
                                                yygotominor.yy533->append(yymsp[0].minor.yy287);
                                            }
        break;
      case 35: /* table_options ::= table_options COMMA table_option */
{
                                                yymsp[-2].minor.yy533->append(yymsp[0].minor.yy287);
                                                yygotominor.yy533 = yymsp[-2].minor.yy533;
                                                DONT_INHERIT_TOKENS("table_options");
                                            }
        break;
      case 36: /* table_option ::= WITHOUT nm */
{
                                                if (yymsp[0].minor.yy259->toLower() != "rowid")
                                                    parserContext->errorAtToken(QString("Invalid table option: %1").arg(*(yymsp[0].minor.yy259)));

                                                yygotominor.yy287 = new ParserStubCreateTableOption(ParserStubCreateTableOption::WITHOUT_ROWID);
                                                delete yymsp[0].minor.yy259;
                                            }
        break;
      case 37: /* table_option ::= nm */
      case 38: /* table_option ::= WITHOUT CTX_ROWID_KW */ yytestcase(yyruleno==38);
      case 39: /* table_option ::= CTX_STRICT_KW */ yytestcase(yyruleno==39);
{
                                                if (yymsp[0].minor.yy259->toLower() != "strict")
                                                    parserContext->errorAtToken(QString("Invalid table option: %1").arg(*(yymsp[0].minor.yy259)));

                                                yygotominor.yy287 = new ParserStubCreateTableOption(ParserStubCreateTableOption::STRICT);
                                                delete yymsp[0].minor.yy259;
                                            }
        break;
      case 42: /* temp ::= TEMP */
{yygotominor.yy346 = new int( (yymsp[0].minor.yy0->value.length() > 4) ? 2 : 1 );}
        break;
      case 43: /* temp ::= */
      case 167: /* distinct ::= */ yytestcase(yyruleno==167);
{yygotominor.yy346 = new int(0);}
        break;
      case 44: /* columnlist ::= columnlist COMMA column */
{
                                                yymsp[-2].minor.yy42->append(yymsp[0].minor.yy567);
                                                yygotominor.yy42 = yymsp[-2].minor.yy42;
                                                DONT_INHERIT_TOKENS("columnlist");
                                            }
        break;
      case 45: /* columnlist ::= column */
{
                                                yygotominor.yy42 = new ParserCreateTableColumnList();
                                                yygotominor.yy42->append(yymsp[0].minor.yy567);
                                            }
        break;
      case 46: /* column ::= columnid type carglist */
{
                                                yygotominor.yy567 = new SqliteCreateTable::Column(*(yymsp[-2].minor.yy259), yymsp[-1].minor.yy477, *(yymsp[0].minor.yy131));
                                                delete yymsp[-2].minor.yy259;
                                                delete yymsp[0].minor.yy131;
                                                objectForTokens = yygotominor.yy567;
                                            }
        break;
      case 47: /* columnid ::= nm */
      case 48: /* columnid ::= ID_COL_NEW */ yytestcase(yyruleno==48);
      case 54: /* nm ::= id */ yytestcase(yyruleno==54);
      case 62: /* typename ::= ids */ yytestcase(yyruleno==62);
      case 200: /* dbnm ::= DOT nm */ yytestcase(yyruleno==200);
      case 365: /* collate ::= COLLATE ids */ yytestcase(yyruleno==365);
      case 366: /* collate ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==366);
{yygotominor.yy259 = yymsp[0].minor.yy259;}
        break;
      case 49: /* id ::= ID|INDEXED */
{
                                                yygotominor.yy259 = new QString(
                                                    stripObjName(
                                                        yymsp[0].minor.yy0->value
                                                    )
                                                );
                                            }
        break;
      case 50: /* id_opt ::= id */
{
                                                yygotominor.yy259 = yymsp[0].minor.yy259;
                                            }
        break;
      case 51: /* id_opt ::= */
{
                                                yygotominor.yy259 = new QString();
                                            }
        break;
      case 52: /* ids ::= ID */
      case 56: /* nm ::= JOIN_KW */ yytestcase(yyruleno==56);
{yygotominor.yy259 = new QString(stripObjName(yymsp[0].minor.yy0->value));}
        break;
      case 53: /* ids ::= STRING */
      case 55: /* nm ::= STRING */ yytestcase(yyruleno==55);
{yygotominor.yy259 = new QString(stripString(yymsp[0].minor.yy0->value));}
        break;
      case 57: /* type ::= */
{yygotominor.yy477 = nullptr;}
        break;
      case 58: /* type ::= typetoken */
{yygotominor.yy477 = yymsp[0].minor.yy477;}
        break;
      case 59: /* typetoken ::= typename */
{
                                                yygotominor.yy477 = new SqliteColumnType(*(yymsp[0].minor.yy259));
                                                delete yymsp[0].minor.yy259;
                                                objectForTokens = yygotominor.yy477;
                                            }
        break;
      case 60: /* typetoken ::= typename LP signed RP */
{
                                                yygotominor.yy477 = new SqliteColumnType(*(yymsp[-3].minor.yy259), *(yymsp[-1].minor.yy249));
                                                delete yymsp[-3].minor.yy259;
                                                delete yymsp[-1].minor.yy249;
                                                objectForTokens = yygotominor.yy477;
                                            }
        break;
      case 61: /* typetoken ::= typename LP signed COMMA signed RP */
{
                                                yygotominor.yy477 = new SqliteColumnType(*(yymsp[-5].minor.yy259), *(yymsp[-3].minor.yy249), *(yymsp[-1].minor.yy249));
                                                delete yymsp[-5].minor.yy259;
                                                delete yymsp[-3].minor.yy249;
                                                delete yymsp[-1].minor.yy249;
                                                objectForTokens = yygotominor.yy477;
                                            }
        break;
      case 63: /* typename ::= typename ids */
      case 64: /* typename ::= ID_COL_TYPE */ yytestcase(yyruleno==64);
{
                                                yymsp[-1].minor.yy259->append(" " + *(yymsp[0].minor.yy259));
                                                delete yymsp[0].minor.yy259;
                                                yygotominor.yy259 = yymsp[-1].minor.yy259;
                                            }
        break;
      case 65: /* signed ::= plus_num */
      case 66: /* signed ::= minus_num */ yytestcase(yyruleno==66);
      case 381: /* nmnum ::= plus_num */ yytestcase(yyruleno==381);
      case 386: /* plus_num ::= PLUS number */ yytestcase(yyruleno==386);
      case 387: /* plus_num ::= number */ yytestcase(yyruleno==387);
{yygotominor.yy249 = yymsp[0].minor.yy249;}
        break;
      case 67: /* carglist ::= carglist ccons */
{
                                                yymsp[-1].minor.yy131->append(yymsp[0].minor.yy604);
                                                yygotominor.yy131 = yymsp[-1].minor.yy131;
                                                DONT_INHERIT_TOKENS("carglist");
                                            }
        break;
      case 68: /* carglist ::= */
{yygotominor.yy131 = new ParserCreateTableColumnConstraintList();}
        break;
      case 69: /* ccons ::= CONSTRAINT nm */
{
                                                yygotominor.yy604 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy604->initDefNameOnly(*(yymsp[0].minor.yy259));
                                                delete yymsp[0].minor.yy259;
                                                objectForTokens = yygotominor.yy604;
                                            }
        break;
      case 70: /* ccons ::= DEFAULT term */
{
                                                yygotominor.yy604 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy604->initDefTerm(*(yymsp[0].minor.yy249));
                                                delete yymsp[0].minor.yy249;
                                                objectForTokens = yygotominor.yy604;
                                            }
        break;
      case 71: /* ccons ::= DEFAULT LP expr RP */
{
                                                yygotominor.yy604 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy604->initDefExpr(yymsp[-1].minor.yy252);
                                                objectForTokens = yygotominor.yy604;
                                            }
        break;
      case 72: /* ccons ::= DEFAULT PLUS term */
{
                                                yygotominor.yy604 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy604->initDefTerm(*(yymsp[0].minor.yy249), false);
                                                delete yymsp[0].minor.yy249;
                                                objectForTokens = yygotominor.yy604;
                                            }
        break;
      case 73: /* ccons ::= DEFAULT MINUS term */
{
                                                yygotominor.yy604 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy604->initDefTerm(*(yymsp[0].minor.yy249), true);
                                                delete yymsp[0].minor.yy249;
                                                objectForTokens = yygotominor.yy604;
                                            }
        break;
      case 74: /* ccons ::= DEFAULT id */
{
                                                yygotominor.yy604 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy604->initDefId(*(yymsp[0].minor.yy259));
                                                delete yymsp[0].minor.yy259;
                                                objectForTokens = yygotominor.yy604;
                                            }
        break;
      case 75: /* ccons ::= DEFAULT CTIME_KW */
{
                                                yygotominor.yy604 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy604->initDefCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy604;
                                            }
        break;
      case 76: /* ccons ::= NULL onconf */
{
                                                yygotominor.yy604 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy604->initNull(*(yymsp[0].minor.yy478));
                                                delete yymsp[0].minor.yy478;
                                                objectForTokens = yygotominor.yy604;
                                            }
        break;
      case 77: /* ccons ::= NOT NULL onconf */
{
                                                yygotominor.yy604 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy604->initNotNull(*(yymsp[0].minor.yy478));
                                                delete yymsp[0].minor.yy478;
                                                objectForTokens = yygotominor.yy604;
                                            }
        break;
      case 78: /* ccons ::= PRIMARY KEY sortorder onconf autoinc */
{
                                                yygotominor.yy604 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy604->initPk(*(yymsp[-2].minor.yy389), *(yymsp[-1].minor.yy478), *(yymsp[0].minor.yy291));
                                                delete yymsp[-2].minor.yy389;
                                                delete yymsp[0].minor.yy291;
                                                delete yymsp[-1].minor.yy478;
                                                objectForTokens = yygotominor.yy604;
                                            }
        break;
      case 79: /* ccons ::= UNIQUE onconf */
{
                                                yygotominor.yy604 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy604->initUnique(*(yymsp[0].minor.yy478));
                                                delete yymsp[0].minor.yy478;
                                                objectForTokens = yygotominor.yy604;
                                            }
        break;
      case 80: /* ccons ::= CHECK LP expr RP */
{
                                                yygotominor.yy604 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy604->initCheck(yymsp[-1].minor.yy252);
                                                objectForTokens = yygotominor.yy604;
                                            }
        break;
      case 81: /* ccons ::= REFERENCES nm idxlist_opt refargs */
{
                                                yygotominor.yy604 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy604->initFk(*(yymsp[-2].minor.yy259), *(yymsp[-1].minor.yy123), *(yymsp[0].minor.yy324));
                                                delete yymsp[-2].minor.yy259;
                                                delete yymsp[0].minor.yy324;
                                                delete yymsp[-1].minor.yy123;
                                                objectForTokens = yygotominor.yy604;
                                            }
        break;
      case 82: /* ccons ::= defer_subclause */
{
                                                yygotominor.yy604 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy604->initDefer(yymsp[0].minor.yy449->initially, yymsp[0].minor.yy449->deferrable);
                                                delete yymsp[0].minor.yy449;
                                                objectForTokens = yygotominor.yy604;
                                            }
        break;
      case 83: /* ccons ::= COLLATE ids */
{
                                                yygotominor.yy604 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy604->initColl(*(yymsp[0].minor.yy259));
                                                delete yymsp[0].minor.yy259;
                                                objectForTokens = yygotominor.yy604;
                                            }
        break;
      case 84: /* ccons ::= gen_always AS LP expr RP id_opt */
      case 85: /* ccons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==85);
      case 86: /* ccons ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==86);
      case 87: /* ccons ::= REFERENCES ID_TAB */ yytestcase(yyruleno==87);
{
                                                if (!yymsp[0].minor.yy259->isNull() && yymsp[0].minor.yy259->toLower() != "stored" && yymsp[0].minor.yy259->toLower() != "virtual")
                                                    parserContext->errorAtToken(QString("Invalid generated column type: %1").arg(*(yymsp[0].minor.yy259)));

                                                yygotominor.yy604 = new SqliteCreateTable::Column::Constraint();
												yygotominor.yy604->initGeneratedAs(yymsp[-2].minor.yy252, *(yymsp[-5].minor.yy291), *(yymsp[0].minor.yy259));
												delete yymsp[-5].minor.yy291;
												delete yymsp[0].minor.yy259;
												objectForTokens = yygotominor.yy604;
											}
        break;
      case 88: /* ccons ::= CHECK LP RP */
{
                                                yygotominor.yy604 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy604->initCheck();
                                                objectForTokens = yygotominor.yy604;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 89: /* term ::= NULL */
{yygotominor.yy249 = new QVariant();}
        break;
      case 90: /* term ::= INTEGER */
      case 389: /* number ::= INTEGER */ yytestcase(yyruleno==389);
{yygotominor.yy249 = parserContext->handleNumberToken(yymsp[0].minor.yy0->value);}
        break;
      case 91: /* term ::= FLOAT */
      case 390: /* number ::= FLOAT */ yytestcase(yyruleno==390);
{yygotominor.yy249 = new QVariant(QVariant(yymsp[0].minor.yy0->value).toDouble());}
        break;
      case 92: /* term ::= STRING|BLOB */
{
                                                if (yymsp[0].minor.yy0->value.length() >= 3 && yymsp[0].minor.yy0->value.startsWith("x'", Qt::CaseInsensitive))
                                                    yygotominor.yy249 = new QVariant(blobFromLiteral(yymsp[0].minor.yy0->value));
                                                else
                                                    yygotominor.yy249 = new QVariant(stripString(yymsp[0].minor.yy0->value));
                                            }
        break;
      case 93: /* tnm ::= term */
{
												yygotominor.yy350 = new ParserTermOrLiteral(*(yymsp[0].minor.yy249));
												delete yymsp[0].minor.yy249;
											}
        break;
      case 94: /* tnm ::= nm */
{
												yygotominor.yy350 = new ParserTermOrLiteral(*(yymsp[0].minor.yy259));
												delete yymsp[0].minor.yy259;
											}
        break;
      case 99: /* refargs ::= */
{yygotominor.yy324 = new ParserFkConditionList();}
        break;
      case 100: /* refargs ::= refargs refarg */
{
                                                yymsp[-1].minor.yy324->append(yymsp[0].minor.yy607);
                                                yygotominor.yy324 = yymsp[-1].minor.yy324;
                                                DONT_INHERIT_TOKENS("refargs");
                                            }
        break;
      case 101: /* refarg ::= MATCH nm */
{
                                                yygotominor.yy607 = new SqliteForeignKey::Condition(*(yymsp[0].minor.yy259));
                                                delete yymsp[0].minor.yy259;
                                            }
        break;
      case 102: /* refarg ::= ON INSERT refact */
{yygotominor.yy607 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::INSERT, *(yymsp[0].minor.yy124)); delete yymsp[0].minor.yy124;}
        break;
      case 103: /* refarg ::= ON DELETE refact */
{yygotominor.yy607 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::DELETE, *(yymsp[0].minor.yy124)); delete yymsp[0].minor.yy124;}
        break;
      case 104: /* refarg ::= ON UPDATE refact */
      case 105: /* refarg ::= MATCH ID_FK_MATCH */ yytestcase(yyruleno==105);
{yygotominor.yy607 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::UPDATE, *(yymsp[0].minor.yy124)); delete yymsp[0].minor.yy124;}
        break;
      case 106: /* refact ::= SET NULL */
{yygotominor.yy124 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_NULL);}
        break;
      case 107: /* refact ::= SET DEFAULT */
{yygotominor.yy124 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_DEFAULT);}
        break;
      case 108: /* refact ::= CASCADE */
{yygotominor.yy124 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::CASCADE);}
        break;
      case 109: /* refact ::= RESTRICT */
{yygotominor.yy124 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::RESTRICT);}
        break;
      case 110: /* refact ::= NO ACTION */
{yygotominor.yy124 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::NO_ACTION);}
        break;
      case 111: /* defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy449 = new ParserDeferSubClause(SqliteDeferrable::NOT_DEFERRABLE, *(yymsp[0].minor.yy192));
                                                delete yymsp[0].minor.yy192;
                                            }
        break;
      case 112: /* defer_subclause ::= DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy449 = new ParserDeferSubClause(SqliteDeferrable::DEFERRABLE, *(yymsp[0].minor.yy192));
                                                delete yymsp[0].minor.yy192;
                                            }
        break;
      case 113: /* init_deferred_pred_opt ::= */
{yygotominor.yy192 = new SqliteInitially(SqliteInitially::null);}
        break;
      case 114: /* init_deferred_pred_opt ::= INITIALLY DEFERRED */
{yygotominor.yy192 = new SqliteInitially(SqliteInitially::DEFERRED);}
        break;
      case 115: /* init_deferred_pred_opt ::= INITIALLY IMMEDIATE */
{yygotominor.yy192 = new SqliteInitially(SqliteInitially::IMMEDIATE);}
        break;
      case 116: /* conslist_opt ::= */
{yygotominor.yy373 = new ParserCreateTableConstraintList();}
        break;
      case 117: /* conslist_opt ::= COMMA conslist */
{yygotominor.yy373 = yymsp[0].minor.yy373;}
        break;
      case 118: /* conslist ::= conslist tconscomma tcons */
{
                                                yymsp[0].minor.yy106->afterComma = *(yymsp[-1].minor.yy291);
                                                yymsp[-2].minor.yy373->append(yymsp[0].minor.yy106);
                                                yygotominor.yy373 = yymsp[-2].minor.yy373;
                                                delete yymsp[-1].minor.yy291;
                                                DONT_INHERIT_TOKENS("conslist");
                                            }
        break;
      case 119: /* conslist ::= tcons */
{
                                                yygotominor.yy373 = new ParserCreateTableConstraintList();
                                                yygotominor.yy373->append(yymsp[0].minor.yy106);
                                            }
        break;
      case 122: /* tcons ::= CONSTRAINT nm */
{
                                                yygotominor.yy106 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy106->initNameOnly(*(yymsp[0].minor.yy259));
                                                delete yymsp[0].minor.yy259;
                                                objectForTokens = yygotominor.yy106;
                                            }
        break;
      case 123: /* tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf */
{
                                                yygotominor.yy106 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy106->initPk(*(yymsp[-3].minor.yy123), *(yymsp[-2].minor.yy291), *(yymsp[0].minor.yy478));
                                                delete yymsp[-2].minor.yy291;
                                                delete yymsp[0].minor.yy478;
                                                delete yymsp[-3].minor.yy123;
                                                objectForTokens = yygotominor.yy106;
                                            }
        break;
      case 124: /* tcons ::= UNIQUE LP idxlist RP onconf */
{
                                                yygotominor.yy106 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy106->initUnique(*(yymsp[-2].minor.yy123), *(yymsp[0].minor.yy478));
                                                delete yymsp[0].minor.yy478;
                                                delete yymsp[-2].minor.yy123;
                                                objectForTokens = yygotominor.yy106;
                                            }
        break;
      case 125: /* tcons ::= CHECK LP expr RP onconf */
{
                                                yygotominor.yy106 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy106->initCheck(yymsp[-2].minor.yy252, *(yymsp[0].minor.yy478));
                                                objectForTokens = yygotominor.yy106;
                                            }
        break;
      case 126: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt */
      case 127: /* tcons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==127);
      case 128: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB */ yytestcase(yyruleno==128);
{
                                                yygotominor.yy106 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy106->initFk(
                                                    *(yymsp[-6].minor.yy123),
                                                    *(yymsp[-3].minor.yy259),
                                                    *(yymsp[-2].minor.yy123),
                                                    *(yymsp[-1].minor.yy324),
                                                    yymsp[0].minor.yy449->initially,
                                                    yymsp[0].minor.yy449->deferrable
                                                );
                                                delete yymsp[-3].minor.yy259;
                                                delete yymsp[-1].minor.yy324;
                                                delete yymsp[0].minor.yy449;
                                                delete yymsp[-2].minor.yy123;
                                                delete yymsp[-6].minor.yy123;
                                                objectForTokens = yygotominor.yy106;
                                            }
        break;
      case 129: /* tcons ::= CHECK LP RP onconf */
{
                                                yygotominor.yy106 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy106->initCheck();
                                                objectForTokens = yygotominor.yy106;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                              yy_destructor(yypParser,228,&yymsp[0].minor);
}
        break;
      case 130: /* defer_subclause_opt ::= */
{yygotominor.yy449 = new ParserDeferSubClause(SqliteDeferrable::null, SqliteInitially::null);}
        break;
      case 131: /* defer_subclause_opt ::= defer_subclause */
{yygotominor.yy449 = yymsp[0].minor.yy449;}
        break;
      case 132: /* onconf ::= */
      case 134: /* orconf ::= */ yytestcase(yyruleno==134);
{yygotominor.yy478 = new SqliteConflictAlgo(SqliteConflictAlgo::null);}
        break;
      case 133: /* onconf ::= ON CONFLICT resolvetype */
      case 135: /* orconf ::= OR resolvetype */ yytestcase(yyruleno==135);
{yygotominor.yy478 = yymsp[0].minor.yy478;}
        break;
      case 136: /* resolvetype ::= raisetype */
      case 137: /* resolvetype ::= IGNORE */ yytestcase(yyruleno==137);
      case 138: /* resolvetype ::= REPLACE */ yytestcase(yyruleno==138);
{yygotominor.yy478 = new SqliteConflictAlgo(sqliteConflictAlgo(yymsp[0].minor.yy0->value));}
        break;
      case 139: /* cmd ::= DROP TABLE ifexists fullname */
{
                                                yygotominor.yy443 = new SqliteDropTable(*(yymsp[-1].minor.yy291), yymsp[0].minor.yy60->name1, yymsp[0].minor.yy60->name2);
                                                delete yymsp[-1].minor.yy291;
                                                delete yymsp[0].minor.yy60;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 140: /* cmd ::= DROP TABLE ifexists nm DOT ID_TAB */
      case 141: /* cmd ::= DROP TABLE ifexists ID_DB|ID_TAB */ yytestcase(yyruleno==141);
      case 148: /* cmd ::= DROP VIEW ifexists nm DOT ID_VIEW */ yytestcase(yyruleno==148);
      case 149: /* cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW */ yytestcase(yyruleno==149);
      case 192: /* singlesrc ::= nm DOT ID_TAB */ yytestcase(yyruleno==192);
      case 193: /* singlesrc ::= ID_DB|ID_TAB */ yytestcase(yyruleno==193);
      case 194: /* singlesrc ::= nm DOT ID_VIEW */ yytestcase(yyruleno==194);
      case 195: /* singlesrc ::= ID_DB|ID_VIEW */ yytestcase(yyruleno==195);
      case 354: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW */ yytestcase(yyruleno==354);
      case 355: /* cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW */ yytestcase(yyruleno==355);
      case 368: /* cmd ::= DROP INDEX ifexists nm DOT ID_IDX */ yytestcase(yyruleno==368);
      case 369: /* cmd ::= DROP INDEX ifexists ID_DB|ID_IDX */ yytestcase(yyruleno==369);
      case 379: /* cmd ::= PRAGMA nm DOT ID_PRAGMA */ yytestcase(yyruleno==379);
      case 380: /* cmd ::= PRAGMA ID_DB|ID_PRAGMA */ yytestcase(yyruleno==380);
      case 418: /* cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG */ yytestcase(yyruleno==418);
      case 419: /* cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG */ yytestcase(yyruleno==419);
      case 429: /* cmd ::= REINDEX nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==429);
      case 430: /* cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==430);
      case 433: /* cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==433);
      case 434: /* cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==434);
      case 439: /* cmd ::= ALTER TABLE nm DOT ID_TAB */ yytestcase(yyruleno==439);
      case 440: /* cmd ::= ALTER TABLE ID_DB|ID_TAB */ yytestcase(yyruleno==440);
      case 446: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW */ yytestcase(yyruleno==446);
      case 447: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW */ yytestcase(yyruleno==447);
{  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 144: /* cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select */
{
                                                yygotominor.yy443 = new SqliteCreateView(*(yymsp[-6].minor.yy346), *(yymsp[-4].minor.yy291), yymsp[-3].minor.yy60->name1, yymsp[-3].minor.yy60->name2, yymsp[0].minor.yy453, *(yymsp[-2].minor.yy123));
                                                delete yymsp[-6].minor.yy346;
                                                delete yymsp[-4].minor.yy291;
                                                delete yymsp[-3].minor.yy60;
                                                delete yymsp[-2].minor.yy123;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 147: /* cmd ::= DROP VIEW ifexists fullname */
{
                                                yygotominor.yy443 = new SqliteDropView(*(yymsp[-1].minor.yy291), yymsp[0].minor.yy60->name1, yymsp[0].minor.yy60->name2);
                                                delete yymsp[-1].minor.yy291;
                                                delete yymsp[0].minor.yy60;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 150: /* cmd ::= select_stmt */
      case 239: /* cmd ::= delete_stmt */ yytestcase(yyruleno==239);
      case 250: /* cmd ::= update_stmt */ yytestcase(yyruleno==250);
      case 271: /* cmd ::= insert_stmt */ yytestcase(yyruleno==271);
{
                                                yygotominor.yy443 = yymsp[0].minor.yy443;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 151: /* select_stmt ::= select */
{
                                                yygotominor.yy443 = yymsp[0].minor.yy453;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 152: /* select ::= with selectnowith */
{
                                                yygotominor.yy453 = yymsp[0].minor.yy453;
                                                yymsp[0].minor.yy453->setWith(yymsp[-1].minor.yy641);
                                                objectForTokens = yygotominor.yy453;
                                            }
        break;
      case 153: /* selectnowith ::= oneselect */
{
                                                yygotominor.yy453 = SqliteSelect::append(yymsp[0].minor.yy450);
                                                objectForTokens = yygotominor.yy453;
                                            }
        break;
      case 154: /* selectnowith ::= selectnowith multiselect_op oneselect */
{
                                                yygotominor.yy453 = SqliteSelect::append(yymsp[-2].minor.yy453, *(yymsp[-1].minor.yy382), yymsp[0].minor.yy450);
                                                delete yymsp[-1].minor.yy382;
                                                objectForTokens = yygotominor.yy453;
                                            }
        break;
      case 155: /* selectnowith ::= values */
{
                                                yygotominor.yy453 = SqliteSelect::append(*(yymsp[0].minor.yy546));
                                                delete yymsp[0].minor.yy546;
                                                objectForTokens = yygotominor.yy453;
                                            }
        break;
      case 156: /* selectnowith ::= selectnowith COMMA values */
{
                                                yygotominor.yy453 = SqliteSelect::append(yymsp[-2].minor.yy453, SqliteSelect::CompoundOperator::UNION_ALL, *(yymsp[0].minor.yy546));
                                                delete yymsp[0].minor.yy546;
                                                objectForTokens = yygotominor.yy453;
                                            }
        break;
      case 157: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt */
{
                                                yygotominor.yy450 = new SqliteSelect::Core(
                                                        *(yymsp[-7].minor.yy346),
                                                        *(yymsp[-6].minor.yy633),
                                                        yymsp[-5].minor.yy91,
                                                        yymsp[-4].minor.yy252,
                                                        *(yymsp[-3].minor.yy351),
                                                        yymsp[-2].minor.yy252,
                                                        *(yymsp[-1].minor.yy543),
                                                        yymsp[0].minor.yy444
                                                    );
                                                delete yymsp[-6].minor.yy633;
                                                delete yymsp[-7].minor.yy346;
                                                delete yymsp[-3].minor.yy351;
                                                delete yymsp[-1].minor.yy543;
                                                objectForTokens = yygotominor.yy450;
                                            }
        break;
      case 158: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt */
{
                                                yygotominor.yy450 = new SqliteSelect::Core(
                                                        *(yymsp[-8].minor.yy346),
                                                        *(yymsp[-7].minor.yy633),
                                                        yymsp[-6].minor.yy91,
                                                        yymsp[-5].minor.yy252,
                                                        *(yymsp[-4].minor.yy351),
                                                        yymsp[-3].minor.yy252,
                                                        *(yymsp[-2].minor.yy639),
                                                        *(yymsp[-1].minor.yy543),
                                                        yymsp[0].minor.yy444
                                                    );
                                                delete yymsp[-7].minor.yy633;
                                                delete yymsp[-8].minor.yy346;
                                                delete yymsp[-4].minor.yy351;
                                                delete yymsp[-1].minor.yy543;
                                                delete yymsp[-2].minor.yy639;
                                                objectForTokens = yygotominor.yy450;
                                            }
        break;
      case 159: /* values ::= VALUES LP nexprlist RP */
{
                                                yygotominor.yy546 = new ParserExprNestedList();
                                                yygotominor.yy546->append(*(yymsp[-1].minor.yy351));
                                                delete yymsp[-1].minor.yy351;
                                            }
        break;
      case 160: /* values ::= values COMMA LP exprlist RP */
{
                                                yymsp[-4].minor.yy546->append(*(yymsp[-1].minor.yy351));
                                                yygotominor.yy546 = yymsp[-4].minor.yy546;
                                                delete yymsp[-1].minor.yy351;
                                                DONT_INHERIT_TOKENS("values");
                                            }
        break;
      case 161: /* multiselect_op ::= UNION */
{yygotominor.yy382 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION);}
        break;
      case 162: /* multiselect_op ::= UNION ALL */
{yygotominor.yy382 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION_ALL);}
        break;
      case 163: /* multiselect_op ::= EXCEPT */
{yygotominor.yy382 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::EXCEPT);}
        break;
      case 164: /* multiselect_op ::= INTERSECT */
{yygotominor.yy382 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::INTERSECT);}
        break;
      case 165: /* distinct ::= DISTINCT */
{yygotominor.yy346 = new int(1);}
        break;
      case 166: /* distinct ::= ALL */
{yygotominor.yy346 = new int(2);}
        break;
      case 168: /* sclp ::= selcollist COMMA */
{yygotominor.yy633 = yymsp[-1].minor.yy633;}
        break;
      case 169: /* sclp ::= */
      case 248: /* returning ::= */ yytestcase(yyruleno==248);
{yygotominor.yy633 = new ParserResultColumnList();}
        break;
      case 170: /* selcollist ::= sclp expr as */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        yymsp[-1].minor.yy252,
                                                        yymsp[0].minor.yy460 ? yymsp[0].minor.yy460->asKw : false,
                                                        yymsp[0].minor.yy460 ? yymsp[0].minor.yy460->name : QString()
                                                    );

                                                yymsp[-2].minor.yy633->append(obj);
                                                yygotominor.yy633 = yymsp[-2].minor.yy633;
                                                delete yymsp[0].minor.yy460;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 171: /* selcollist ::= sclp STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(true);

                                                yymsp[-1].minor.yy633->append(obj);
                                                yygotominor.yy633 = yymsp[-1].minor.yy633;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 172: /* selcollist ::= sclp tnm DOT STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        true,
                                                        yymsp[-2].minor.yy350->toName()
                                                    );
													
												if (!yymsp[-2].minor.yy350->isName())
													parserContext->errorAtToken("Syntax error <expected name, not literal value>", -3);
													
                                                yymsp[-3].minor.yy633->append(obj);
                                                yygotominor.yy633 = yymsp[-3].minor.yy633;
                                                delete yymsp[-2].minor.yy350;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 173: /* selcollist ::= sclp */
      case 174: /* selcollist ::= sclp ID_TAB DOT STAR */ yytestcase(yyruleno==174);
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy633 = yymsp[0].minor.yy633;
                                            }
        break;
      case 175: /* as ::= AS nm */
{
                                                yygotominor.yy460 = new ParserStubAlias(*(yymsp[0].minor.yy259), true);
                                                delete yymsp[0].minor.yy259;
                                            }
        break;
      case 176: /* as ::= ids */
      case 177: /* as ::= AS ID_ALIAS */ yytestcase(yyruleno==177);
      case 178: /* as ::= ID_ALIAS */ yytestcase(yyruleno==178);
{
                                                yygotominor.yy460 = new ParserStubAlias(*(yymsp[0].minor.yy259), false);
                                                delete yymsp[0].minor.yy259;
                                            }
        break;
      case 179: /* as ::= */
{yygotominor.yy460 = nullptr;}
        break;
      case 180: /* from ::= */
{yygotominor.yy91 = nullptr;}
        break;
      case 181: /* from ::= FROM joinsrc */
{yygotominor.yy91 = yymsp[0].minor.yy91;}
        break;
      case 182: /* joinsrc ::= singlesrc seltablist */
{
                                                yygotominor.yy91 = new SqliteSelect::Core::JoinSource(
                                                        yymsp[-1].minor.yy361,
                                                        *(yymsp[0].minor.yy11)
                                                    );
                                                delete yymsp[0].minor.yy11;
                                                objectForTokens = yygotominor.yy91;
                                            }
        break;
      case 183: /* joinsrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy91 = new SqliteSelect::Core::JoinSource();
                                                objectForTokens = yygotominor.yy91;
                                            }
        break;
      case 184: /* seltablist ::= seltablist joinop singlesrc joinconstr_opt */
{
                                                SqliteSelect::Core::JoinSourceOther* src =
                                                    new SqliteSelect::Core::JoinSourceOther(yymsp[-2].minor.yy521, yymsp[-1].minor.yy361, yymsp[0].minor.yy335);

                                                yymsp[-3].minor.yy11->append(src);
                                                yygotominor.yy11 = yymsp[-3].minor.yy11;
                                                objectForTokens = src;
                                                DONT_INHERIT_TOKENS("seltablist");
                                            }
        break;
      case 185: /* seltablist ::= */
{
                                                yygotominor.yy11 = new ParserOtherSourceList();
                                            }
        break;
      case 186: /* singlesrc ::= nm dbnm as indexed_opt */
{
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-3].minor.yy259),
                                                        *(yymsp[-2].minor.yy259),
                                                        yymsp[-1].minor.yy460 ? yymsp[-1].minor.yy460->asKw : false,
                                                        yymsp[-1].minor.yy460 ? yymsp[-1].minor.yy460->name : QString(),
                                                        yymsp[0].minor.yy312 ? yymsp[0].minor.yy312->notIndexedKw : false,
                                                        yymsp[0].minor.yy312 ? yymsp[0].minor.yy312->indexedBy : QString()
                                                    );
                                                delete yymsp[-3].minor.yy259;
                                                delete yymsp[-2].minor.yy259;
                                                delete yymsp[-1].minor.yy460;
                                                if (yymsp[0].minor.yy312)
                                                    delete yymsp[0].minor.yy312;
                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 187: /* singlesrc ::= LP select RP as */
{
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy453,
                                                        yymsp[0].minor.yy460 ? yymsp[0].minor.yy460->asKw : false,
                                                        yymsp[0].minor.yy460 ? yymsp[0].minor.yy460->name : QString()
                                                    );
                                                delete yymsp[0].minor.yy460;
                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 188: /* singlesrc ::= LP joinsrc RP as */
{
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy91,
                                                        yymsp[0].minor.yy460 ? yymsp[0].minor.yy460->asKw : false,
                                                        yymsp[0].minor.yy460 ? yymsp[0].minor.yy460->name : QString()
                                                    );
                                                delete yymsp[0].minor.yy460;
                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 189: /* singlesrc ::= nm dbnm LP exprlist RP as */
{
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-5].minor.yy259),
                                                        *(yymsp[-4].minor.yy259),
                                                        yymsp[0].minor.yy460 ? yymsp[0].minor.yy460->asKw : false,
                                                        yymsp[0].minor.yy460 ? yymsp[0].minor.yy460->name : QString(),
                                                        *(yymsp[-2].minor.yy351)
                                                    );
                                                delete yymsp[-5].minor.yy259;
                                                delete yymsp[-4].minor.yy259;
                                                delete yymsp[0].minor.yy460;
                                                if (yymsp[-2].minor.yy351)
                                                    delete yymsp[-2].minor.yy351;

                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 190: /* singlesrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource();
                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 191: /* singlesrc ::= nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource();
                                                yygotominor.yy361->database = *(yymsp[-1].minor.yy259);
                                                delete yymsp[-1].minor.yy259;
                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 196: /* joinconstr_opt ::= ON expr */
{
                                                yygotominor.yy335 = new SqliteSelect::Core::JoinConstraint(yymsp[0].minor.yy252);
                                                objectForTokens = yygotominor.yy335;
                                            }
        break;
      case 197: /* joinconstr_opt ::= USING LP idlist RP */
{
                                                yygotominor.yy335 = new SqliteSelect::Core::JoinConstraint(*(yymsp[-1].minor.yy215));
                                                delete yymsp[-1].minor.yy215;
                                                objectForTokens = yygotominor.yy335;
                                            }
        break;
      case 198: /* joinconstr_opt ::= */
{yygotominor.yy335 = nullptr;}
        break;
      case 199: /* dbnm ::= */
      case 364: /* collate ::= */ yytestcase(yyruleno==364);
      case 450: /* vtabarg ::= */ yytestcase(yyruleno==450);
      case 454: /* anylist ::= */ yytestcase(yyruleno==454);
{yygotominor.yy259 = new QString();}
        break;
      case 201: /* fullname ::= nm */
{
                                                yygotominor.yy60 = new ParserFullName();
                                                yygotominor.yy60->name1 = *(yymsp[0].minor.yy259);
                                                delete yymsp[0].minor.yy259;
                                            }
        break;
      case 202: /* fullname ::= nm DOT nm */
{
                                                yygotominor.yy60 = new ParserFullName();
                                                yygotominor.yy60->name1 = *(yymsp[-2].minor.yy259);
                                                yygotominor.yy60->name2 = *(yymsp[0].minor.yy259);
                                                delete yymsp[-2].minor.yy259;
                                                delete yymsp[0].minor.yy259;
                                            }
        break;
      case 203: /* xfullname ::= nm */
{
                                                yygotominor.yy116 = new ParserXFullName();
                                                yygotominor.yy116->name1 = *(yymsp[0].minor.yy259);
                                                delete yymsp[0].minor.yy259;
                                            }
        break;
      case 204: /* xfullname ::= nm DOT nm */
{
                                                yygotominor.yy116 = new ParserXFullName();
                                                yygotominor.yy116->name1 = *(yymsp[-2].minor.yy259);
                                                yygotominor.yy116->name2 = *(yymsp[0].minor.yy259);
                                                delete yymsp[-2].minor.yy259;
                                                delete yymsp[0].minor.yy259;
                                            }
        break;
      case 205: /* xfullname ::= nm DOT nm AS nm */
{
                                                yygotominor.yy116 = new ParserXFullName();
                                                yygotominor.yy116->name1 = *(yymsp[-4].minor.yy259);
                                                yygotominor.yy116->name2 = *(yymsp[-2].minor.yy259);
                                                yygotominor.yy116->alias = *(yymsp[0].minor.yy259);
                                                delete yymsp[-4].minor.yy259;
                                                delete yymsp[-2].minor.yy259;
                                                delete yymsp[0].minor.yy259;
                                            }
        break;
      case 206: /* xfullname ::= nm AS nm */
{
                                                yygotominor.yy116 = new ParserXFullName();
                                                yygotominor.yy116->name1 = *(yymsp[-2].minor.yy259);
                                                yygotominor.yy116->alias = *(yymsp[0].minor.yy259);
                                                delete yymsp[-2].minor.yy259;
                                                delete yymsp[0].minor.yy259;
                                            }
        break;
      case 207: /* xfullname ::= nm DOT nm AS ID_ALIAS */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy116 = new ParserXFullName();
                                                yygotominor.yy116->name1 = *(yymsp[-4].minor.yy259);
                                                yygotominor.yy116->name2 = *(yymsp[-2].minor.yy259);
                                                delete yymsp[-4].minor.yy259;
                                                delete yymsp[-2].minor.yy259;
                                            }
        break;
      case 208: /* xfullname ::= nm AS ID_ALIAS */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy116 = new ParserXFullName();
                                                yygotominor.yy116->name1 = *(yymsp[-2].minor.yy259);
                                                delete yymsp[-2].minor.yy259;
                                            }
        break;
      case 209: /* joinop ::= COMMA */
{
                                                yygotominor.yy521 = new SqliteSelect::Core::JoinOp(true);
                                                objectForTokens = yygotominor.yy521;
                                            }
        break;
      case 210: /* joinop ::= JOIN */
{
                                                yygotominor.yy521 = new SqliteSelect::Core::JoinOp(false);
                                                objectForTokens = yygotominor.yy521;
                                            }
        break;
      case 211: /* joinop ::= JOIN_KW JOIN */
{
                                                yygotominor.yy521 = new SqliteSelect::Core::JoinOp(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy521;
                                            }
        break;
      case 212: /* joinop ::= JOIN_KW nm JOIN */
{
                                                yygotominor.yy521 = new SqliteSelect::Core::JoinOp(yymsp[-2].minor.yy0->value, *(yymsp[-1].minor.yy259));
                                                delete yymsp[-1].minor.yy259;
                                                objectForTokens = yygotominor.yy521;
                                            }
        break;
      case 213: /* joinop ::= JOIN_KW nm nm JOIN */
      case 214: /* joinop ::= ID_JOIN_OPTS */ yytestcase(yyruleno==214);
{
                                                yygotominor.yy521 = new SqliteSelect::Core::JoinOp(yymsp[-3].minor.yy0->value, *(yymsp[-2].minor.yy259), *(yymsp[-1].minor.yy259));
                                                delete yymsp[-2].minor.yy259;
                                                objectForTokens = yygotominor.yy521;
                                            }
        break;
      case 215: /* indexed_opt ::= */
{yygotominor.yy312 = nullptr;}
        break;
      case 216: /* indexed_opt ::= indexed_by */
{yygotominor.yy312 = yymsp[0].minor.yy312;}
        break;
      case 217: /* indexed_by ::= INDEXED BY nm */
{
                                                yygotominor.yy312 = new ParserIndexedBy(*(yymsp[0].minor.yy259));
                                                delete yymsp[0].minor.yy259;
                                            }
        break;
      case 218: /* indexed_by ::= NOT INDEXED */
{yygotominor.yy312 = new ParserIndexedBy(true);}
        break;
      case 219: /* indexed_by ::= INDEXED BY ID_IDX */
{parserContext->minorErrorBeforeNextToken("Syntax error");}
        break;
      case 220: /* orderby_opt ::= */
{yygotominor.yy543 = new ParserOrderByList();}
        break;
      case 221: /* orderby_opt ::= ORDER BY sortlist */
{yygotominor.yy543 = yymsp[0].minor.yy543;}
        break;
      case 222: /* sortlist ::= sortlist COMMA expr sortorder nulls */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-2].minor.yy252, *(yymsp[-1].minor.yy389), *(yymsp[0].minor.yy99));
                                                yymsp[-4].minor.yy543->append(obj);
                                                yygotominor.yy543 = yymsp[-4].minor.yy543;
                                                delete yymsp[-1].minor.yy389;
												delete yymsp[0].minor.yy99;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sortlist");
                                            }
        break;
      case 223: /* sortlist ::= expr sortorder nulls */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-2].minor.yy252, *(yymsp[-1].minor.yy389), *(yymsp[0].minor.yy99));
                                                yygotominor.yy543 = new ParserOrderByList();
                                                yygotominor.yy543->append(obj);
                                                delete yymsp[-1].minor.yy389;
												delete yymsp[0].minor.yy99;
                                                objectForTokens = obj;
                                            }
        break;
      case 224: /* sortorder ::= ASC */
{yygotominor.yy389 = new SqliteSortOrder(SqliteSortOrder::ASC);}
        break;
      case 225: /* sortorder ::= DESC */
{yygotominor.yy389 = new SqliteSortOrder(SqliteSortOrder::DESC);}
        break;
      case 226: /* sortorder ::= */
{yygotominor.yy389 = new SqliteSortOrder(SqliteSortOrder::null);}
        break;
      case 227: /* nulls ::= NULLS FIRST */
{yygotominor.yy99 = new SqliteNulls(SqliteNulls::FIRST);}
        break;
      case 228: /* nulls ::= NULLS LAST */
{yygotominor.yy99 = new SqliteNulls(SqliteNulls::LAST);}
        break;
      case 229: /* nulls ::= */
{yygotominor.yy99 = new SqliteNulls(SqliteNulls::null);}
        break;
      case 230: /* groupby_opt ::= */
      case 349: /* exprlist ::= */ yytestcase(yyruleno==349);
{yygotominor.yy351 = new ParserExprList();}
        break;
      case 231: /* groupby_opt ::= GROUP BY nexprlist */
      case 348: /* exprlist ::= nexprlist */ yytestcase(yyruleno==348);
{yygotominor.yy351 = yymsp[0].minor.yy351;}
        break;
      case 232: /* groupby_opt ::= GROUP BY */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy351 = new ParserExprList();
                                            }
        break;
      case 233: /* having_opt ::= */
      case 245: /* where_opt ::= */ yytestcase(yyruleno==245);
      case 345: /* case_else ::= */ yytestcase(yyruleno==345);
      case 347: /* case_operand ::= */ yytestcase(yyruleno==347);
      case 373: /* vinto ::= */ yytestcase(yyruleno==373);
      case 407: /* when_clause ::= */ yytestcase(yyruleno==407);
      case 422: /* key_opt ::= */ yytestcase(yyruleno==422);
{yygotominor.yy252 = nullptr;}
        break;
      case 234: /* having_opt ::= HAVING expr */
      case 246: /* where_opt ::= WHERE expr */ yytestcase(yyruleno==246);
      case 336: /* expr ::= exprx */ yytestcase(yyruleno==336);
      case 344: /* case_else ::= ELSE expr */ yytestcase(yyruleno==344);
      case 346: /* case_operand ::= exprx */ yytestcase(yyruleno==346);
      case 372: /* vinto ::= INTO expr */ yytestcase(yyruleno==372);
      case 408: /* when_clause ::= WHEN expr */ yytestcase(yyruleno==408);
      case 423: /* key_opt ::= KEY expr */ yytestcase(yyruleno==423);
{yygotominor.yy252 = yymsp[0].minor.yy252;}
        break;
      case 235: /* limit_opt ::= */
{yygotominor.yy444 = nullptr;}
        break;
      case 236: /* limit_opt ::= LIMIT expr */
{
                                                yygotominor.yy444 = new SqliteLimit(yymsp[0].minor.yy252);
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 237: /* limit_opt ::= LIMIT expr OFFSET expr */
{
                                                yygotominor.yy444 = new SqliteLimit(yymsp[-2].minor.yy252, yymsp[0].minor.yy252, true);
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 238: /* limit_opt ::= LIMIT expr COMMA expr */
{
                                                yygotominor.yy444 = new SqliteLimit(yymsp[-2].minor.yy252, yymsp[0].minor.yy252, false);
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 240: /* delete_stmt ::= with DELETE FROM xfullname indexed_opt where_opt returning orderby_opt limit_opt */
{
                                                if (yymsp[-4].minor.yy312)
                                                {
                                                    if (!yymsp[-4].minor.yy312->indexedBy.isNull())
                                                    {
                                                        yygotominor.yy443 = new SqliteDelete(
                                                                yymsp[-5].minor.yy116->name1,
                                                                yymsp[-5].minor.yy116->name2,
                                                                yymsp[-5].minor.yy116->alias,
                                                                yymsp[-4].minor.yy312->indexedBy,
                                                                yymsp[-3].minor.yy252,
                                                                yymsp[-8].minor.yy641,
                                                                *(yymsp[-2].minor.yy633),
                                                                *(yymsp[-1].minor.yy543),
                                                                yymsp[0].minor.yy444
                                                            );
                                                    }
                                                    else
                                                    {
                                                        yygotominor.yy443 = new SqliteDelete(
                                                                yymsp[-5].minor.yy116->name1,
                                                                yymsp[-5].minor.yy116->name2,
                                                                yymsp[-5].minor.yy116->alias,
                                                                yymsp[-4].minor.yy312->notIndexedKw,
                                                                yymsp[-3].minor.yy252,
                                                                yymsp[-8].minor.yy641,
                                                                *(yymsp[-2].minor.yy633),
                                                                *(yymsp[-1].minor.yy543),
                                                                yymsp[0].minor.yy444
                                                            );
                                                    }
                                                    delete yymsp[-4].minor.yy312;
                                                }
                                                else
                                                {
                                                    yygotominor.yy443 = new SqliteDelete(
                                                            yymsp[-5].minor.yy116->name1,
                                                            yymsp[-5].minor.yy116->name2,
                                                            yymsp[-5].minor.yy116->alias,
                                                            false,
                                                            yymsp[-3].minor.yy252,
                                                            yymsp[-8].minor.yy641,
                                                            *(yymsp[-2].minor.yy633),
                                                            *(yymsp[-1].minor.yy543),
                                                            yymsp[0].minor.yy444
                                                        );
                                                }
                                                delete yymsp[-5].minor.yy116;
                                                delete yymsp[-2].minor.yy633;
                                                delete yymsp[-1].minor.yy543;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 241: /* delete_stmt ::= with DELETE FROM */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-2].minor.yy641;
                                                yygotominor.yy443 = q;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 242: /* delete_stmt ::= with DELETE FROM nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-4].minor.yy641;
                                                q->database = *(yymsp[-1].minor.yy259);
                                                yygotominor.yy443 = q;
                                                objectForTokens = yygotominor.yy443;
                                                delete yymsp[-1].minor.yy259;
                                            }
        break;
      case 243: /* delete_stmt ::= with DELETE FROM nm DOT ID_TAB */
      case 254: /* update_stmt ::= with UPDATE orconf nm DOT ID_TAB */ yytestcase(yyruleno==254);
{  yy_destructor(yypParser,249,&yymsp[-5].minor);
  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 244: /* delete_stmt ::= with DELETE FROM ID_DB|ID_TAB */
      case 255: /* update_stmt ::= with UPDATE orconf ID_DB|ID_TAB */ yytestcase(yyruleno==255);
{  yy_destructor(yypParser,249,&yymsp[-3].minor);
}
        break;
      case 247: /* where_opt ::= WHERE */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy252 = new SqliteExpr();
                                            }
        break;
      case 249: /* returning ::= RETURNING selcollist */
{yygotominor.yy633 = yymsp[0].minor.yy633;}
        break;
      case 251: /* update_stmt ::= with UPDATE orconf xfullname indexed_opt SET setlist from where_opt returning orderby_opt limit_opt */
{
                                                yygotominor.yy443 = new SqliteUpdate(
                                                        *(yymsp[-9].minor.yy478),
                                                        yymsp[-8].minor.yy116->name1,
                                                        yymsp[-8].minor.yy116->name2,
                                                        yymsp[-8].minor.yy116->alias,
                                                        yymsp[-7].minor.yy312 ? yymsp[-7].minor.yy312->notIndexedKw : false,
                                                        yymsp[-7].minor.yy312 ? yymsp[-7].minor.yy312->indexedBy : QString(),
                                                        *(yymsp[-5].minor.yy321),
                                                        yymsp[-4].minor.yy91,
                                                        yymsp[-3].minor.yy252,
                                                        yymsp[-11].minor.yy641,
                                                        *(yymsp[-2].minor.yy633),
                                                        *(yymsp[-1].minor.yy543),
                                                        yymsp[0].minor.yy444
                                                    );
                                                delete yymsp[-9].minor.yy478;
                                                delete yymsp[-8].minor.yy116;
                                                delete yymsp[-5].minor.yy321;
                                                delete yymsp[-2].minor.yy633;
                                                delete yymsp[-1].minor.yy543;
                                                if (yymsp[-7].minor.yy312)
                                                    delete yymsp[-7].minor.yy312;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 252: /* update_stmt ::= with UPDATE orconf */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-2].minor.yy641;
                                                yygotominor.yy443 = q;
                                                objectForTokens = yygotominor.yy443;
                                                delete yymsp[0].minor.yy478;
                                            }
        break;
      case 253: /* update_stmt ::= with UPDATE orconf nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-4].minor.yy641;
                                                q->database = *(yymsp[-1].minor.yy259);
                                                yygotominor.yy443 = q;
                                                objectForTokens = yygotominor.yy443;
                                                delete yymsp[-2].minor.yy478;
                                                delete yymsp[-1].minor.yy259;
                                            }
        break;
      case 256: /* setlist ::= setlist COMMA nm EQ expr */
{
                                                yymsp[-4].minor.yy321->append(ParserSetValue(*(yymsp[-2].minor.yy259), yymsp[0].minor.yy252));
                                                yygotominor.yy321 = yymsp[-4].minor.yy321;
                                                delete yymsp[-2].minor.yy259;
                                            }
        break;
      case 257: /* setlist ::= setlist COMMA LP idlist RP EQ expr */
{
                                                yymsp[-6].minor.yy321->append(ParserSetValue(*(yymsp[-3].minor.yy215), yymsp[0].minor.yy252));
                                                yygotominor.yy321 = yymsp[-6].minor.yy321;
                                                delete yymsp[-3].minor.yy215;
                                            }
        break;
      case 258: /* setlist ::= nm EQ expr */
{
                                                yygotominor.yy321 = new ParserSetValueList();
                                                yygotominor.yy321->append(ParserSetValue(*(yymsp[-2].minor.yy259), yymsp[0].minor.yy252));
                                                delete yymsp[-2].minor.yy259;
                                            }
        break;
      case 259: /* setlist ::= LP idlist RP EQ expr */
{
                                                yygotominor.yy321 = new ParserSetValueList();
                                                yygotominor.yy321->append(ParserSetValue(*(yymsp[-3].minor.yy215), yymsp[0].minor.yy252));
                                                delete yymsp[-3].minor.yy215;
                                            }
        break;
      case 260: /* setlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy321 = new ParserSetValueList();
                                            }
        break;
      case 261: /* setlist ::= setlist COMMA */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy321 = yymsp[-1].minor.yy321;
                                            }
        break;
      case 262: /* setlist ::= setlist COMMA ID_COL */
      case 263: /* setlist ::= ID_COL */ yytestcase(yyruleno==263);
{  yy_destructor(yypParser,282,&yymsp[-2].minor);
}
        break;
      case 264: /* idlist_opt ::= */
{yygotominor.yy215 = new QStringList();}
        break;
      case 265: /* idlist_opt ::= LP idlist RP */
{yygotominor.yy215 = yymsp[-1].minor.yy215;}
        break;
      case 266: /* idlist ::= idlist COMMA nm */
{
                                                yygotominor.yy215 = yymsp[-2].minor.yy215;
                                                *(yygotominor.yy215) << *(yymsp[0].minor.yy259);
                                                delete yymsp[0].minor.yy259;
                                            }
        break;
      case 267: /* idlist ::= nm */
{
                                                yygotominor.yy215 = new QStringList();
                                                *(yygotominor.yy215) << *(yymsp[0].minor.yy259);
                                                delete yymsp[0].minor.yy259;
                                            }
        break;
      case 268: /* idlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy215 = new QStringList();
                                            }
        break;
      case 269: /* idlist ::= idlist COMMA ID_COL */
      case 270: /* idlist ::= ID_COL */ yytestcase(yyruleno==270);
{  yy_destructor(yypParser,274,&yymsp[-2].minor);
}
        break;
      case 272: /* insert_stmt ::= with insert_cmd INTO xfullname idlist_opt select upsert returning */
{
                                                yygotominor.yy443 = new SqliteInsert(
                                                        yymsp[-6].minor.yy584->replace,
                                                        yymsp[-6].minor.yy584->orConflict,
                                                        yymsp[-4].minor.yy116->name1,
                                                        yymsp[-4].minor.yy116->name2,
                                                        yymsp[-4].minor.yy116->alias,
                                                        *(yymsp[-3].minor.yy215),
                                                        yymsp[-2].minor.yy453,
                                                        yymsp[-7].minor.yy641,
                                                        yymsp[-1].minor.yy500,
                                                        *(yymsp[0].minor.yy633)
                                                    );
                                                delete yymsp[-4].minor.yy116;
                                                delete yymsp[-6].minor.yy584;
                                                delete yymsp[-3].minor.yy215;
                                                delete yymsp[0].minor.yy633;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 273: /* insert_stmt ::= with insert_cmd INTO xfullname idlist_opt DEFAULT VALUES returning */
{
                                                yygotominor.yy443 = new SqliteInsert(
                                                        yymsp[-6].minor.yy584->replace,
                                                        yymsp[-6].minor.yy584->orConflict,
                                                        yymsp[-4].minor.yy116->name1,
                                                        yymsp[-4].minor.yy116->name2,
                                                        yymsp[-4].minor.yy116->alias,
                                                        *(yymsp[-3].minor.yy215),
                                                        yymsp[-7].minor.yy641,
                                                        *(yymsp[0].minor.yy633)
                                                    );
                                                delete yymsp[-4].minor.yy116;
                                                delete yymsp[-6].minor.yy584;
                                                delete yymsp[-3].minor.yy215;
                                                delete yymsp[0].minor.yy633;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 274: /* insert_stmt ::= with insert_cmd INTO xfullname LP idlist rp_opt */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy443 = new SqliteInsert(
                                                        yymsp[-5].minor.yy584->replace,
                                                        yymsp[-5].minor.yy584->orConflict,
                                                        yymsp[-3].minor.yy116->name1,
                                                        yymsp[-3].minor.yy116->name2,
                                                        yymsp[-3].minor.yy116->alias,
                                                        *(yymsp[-1].minor.yy215),
                                                        yymsp[-6].minor.yy641,
                                                        QList<SqliteResultColumn*>()
                                                    );
                                                objectForTokens = yygotominor.yy443;
                                                delete yymsp[-3].minor.yy116;
                                                delete yymsp[-1].minor.yy215;
                                                delete yymsp[-5].minor.yy584;
                                                delete yymsp[0].minor.yy291;
                                            }
        break;
      case 275: /* insert_stmt ::= with insert_cmd INTO */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-1].minor.yy584->replace;
                                                q->onConflict = yymsp[-1].minor.yy584->orConflict;
                                                q->with = yymsp[-2].minor.yy641;
                                                yygotominor.yy443 = q;
                                                objectForTokens = yygotominor.yy443;
                                                delete yymsp[-1].minor.yy584;
                                            }
        break;
      case 276: /* insert_stmt ::= with insert_cmd INTO nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-3].minor.yy584->replace;
                                                q->onConflict = yymsp[-3].minor.yy584->orConflict;
                                                q->with = yymsp[-4].minor.yy641;
                                                q->database = *(yymsp[-1].minor.yy259);
                                                yygotominor.yy443 = q;
                                                objectForTokens = yygotominor.yy443;
                                                delete yymsp[-3].minor.yy584;
                                                delete yymsp[-1].minor.yy259;
                                            }
        break;
      case 277: /* insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB */
{  yy_destructor(yypParser,249,&yymsp[-3].minor);
  yy_destructor(yypParser,285,&yymsp[-2].minor);
}
        break;
      case 278: /* insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB */
{  yy_destructor(yypParser,249,&yymsp[-5].minor);
  yy_destructor(yypParser,285,&yymsp[-4].minor);
  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 279: /* insert_cmd ::= INSERT orconf */
{
                                                yygotominor.yy584 = new ParserStubInsertOrReplace(false, *(yymsp[0].minor.yy478));
                                                delete yymsp[0].minor.yy478;
                                            }
        break;
      case 280: /* insert_cmd ::= REPLACE */
{yygotominor.yy584 = new ParserStubInsertOrReplace(true);}
        break;
      case 281: /* upsert ::= */
{
                                                yygotominor.yy500 = nullptr;
                                            }
        break;
      case 282: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt */
{
                                                yygotominor.yy500 = new SqliteUpsert(*(yymsp[-7].minor.yy543), yymsp[-5].minor.yy252, *(yymsp[-1].minor.yy321), yymsp[0].minor.yy252);
                                                delete yymsp[-7].minor.yy543;
                                                delete yymsp[-1].minor.yy321;
                                                objectForTokens = yygotominor.yy500;
                                            }
        break;
      case 283: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING */
{
                                                yygotominor.yy500 = new SqliteUpsert(*(yymsp[-4].minor.yy543), yymsp[-2].minor.yy252);
                                                delete yymsp[-4].minor.yy543;
                                                objectForTokens = yygotominor.yy500;
                                            }
        break;
      case 284: /* upsert ::= ON CONFLICT DO NOTHING */
{
                                                yygotominor.yy500 = new SqliteUpsert();
                                                objectForTokens = yygotominor.yy500;
                                            }
        break;
      case 285: /* exprx ::= expr not_opt IN ID_DB */
{  yy_destructor(yypParser,227,&yymsp[-3].minor);
}
        break;
      case 286: /* exprx ::= expr not_opt IN nm DOT ID_TAB */
      case 287: /* exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN */ yytestcase(yyruleno==287);
{  yy_destructor(yypParser,227,&yymsp[-5].minor);
  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 288: /* exprx ::= tnm DOT ID_TAB|ID_COL */
{  yy_destructor(yypParser,235,&yymsp[-2].minor);
}
        break;
      case 289: /* exprx ::= tnm DOT nm DOT ID_COL */
{  yy_destructor(yypParser,235,&yymsp[-4].minor);
  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 290: /* exprx ::= expr COLLATE ID_COLLATE */
      case 291: /* exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP */ yytestcase(yyruleno==291);
{  yy_destructor(yypParser,227,&yymsp[-2].minor);
}
        break;
      case 292: /* exprx ::= CTIME_KW */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 293: /* exprx ::= LP nexprlist RP */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initRowValue(*(yymsp[-1].minor.yy351));
                                                delete yymsp[-1].minor.yy351;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 294: /* exprx ::= tnm */
{
                                                yygotominor.yy252 = new SqliteExpr();
												if (yymsp[0].minor.yy350->isLiteral())
													yygotominor.yy252->initLiteral(yymsp[0].minor.yy350->toLiteral());
												else
													yygotominor.yy252->initId(yymsp[0].minor.yy350->toName());
													//parserContext->errorBeforeLastToken("Syntax error <expected literal value>");

                                                delete yymsp[0].minor.yy350;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 295: /* exprx ::= tnm DOT nm */
{
                                                yygotominor.yy252 = new SqliteExpr();
												if (yymsp[-2].minor.yy350->isName())
													yygotominor.yy252->initId(yymsp[-2].minor.yy350->toName(), *(yymsp[0].minor.yy259));
												else
													parserContext->errorAtToken("Syntax error <expected name>", -3);

                                                delete yymsp[-2].minor.yy350;
                                                delete yymsp[0].minor.yy259;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 296: /* exprx ::= tnm DOT */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                objectForTokens = yygotominor.yy252;
                                                if (yymsp[-1].minor.yy350->isName())
                                                {
                                                    yygotominor.yy252->initId(yymsp[-1].minor.yy350->toName(), QString());
                                                    parserContext->minorErrorAfterLastToken("Syntax error <expr>");
                                                }
                                                else
                                                    parserContext->errorAtToken("Syntax error <expected name>", -3);

                                                delete yymsp[-1].minor.yy350;
                                            }
        break;
      case 297: /* exprx ::= tnm DOT nm DOT nm */
{
                                                yygotominor.yy252 = new SqliteExpr();
												if (yymsp[-4].minor.yy350->isName())
													yygotominor.yy252->initId(yymsp[-4].minor.yy350->toName(), *(yymsp[-2].minor.yy259), *(yymsp[0].minor.yy259));
												else
													parserContext->errorAtToken("Syntax error <expected name>", -5);

                                                delete yymsp[-4].minor.yy350;
                                                delete yymsp[-2].minor.yy259;
                                                delete yymsp[0].minor.yy259;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 298: /* exprx ::= tnm DOT nm DOT */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                objectForTokens = yygotominor.yy252;
                                                if (yymsp[-3].minor.yy350->isName())
                                                {
                                                    yygotominor.yy252->initId(yymsp[-3].minor.yy350->toName(), *(yymsp[-1].minor.yy259), QString());
                                                    parserContext->minorErrorAfterLastToken("Syntax error <expr>");
                                                }
                                                else
                                                    parserContext->errorAtToken("Syntax error <expected name>", -5);

                                                delete yymsp[-3].minor.yy350;
                                                delete yymsp[-1].minor.yy259;
                                            }
        break;
      case 299: /* exprx ::= VARIABLE */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initBindParam(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 300: /* exprx ::= expr COLLATE ids */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initCollate(yymsp[-2].minor.yy252, *(yymsp[0].minor.yy259));
                                                delete yymsp[0].minor.yy259;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 301: /* exprx ::= CAST LP expr AS typetoken RP */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initCast(yymsp[-3].minor.yy252, yymsp[-1].minor.yy477);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 302: /* exprx ::= id LP distinct exprlist RP */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initFunction(stripObjName(*(yymsp[-4].minor.yy259)), *(yymsp[-2].minor.yy346), *(yymsp[-1].minor.yy351));
                                                delete yymsp[-4].minor.yy259;
                                                delete yymsp[-2].minor.yy346;
                                                delete yymsp[-1].minor.yy351;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 303: /* exprx ::= id LP STAR RP */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initFunction(stripObjName(*(yymsp[-3].minor.yy259)), true);
                                                delete yymsp[-3].minor.yy259;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 304: /* exprx ::= expr AND expr */
      case 305: /* exprx ::= expr OR expr */ yytestcase(yyruleno==305);
      case 306: /* exprx ::= expr LT|GT|GE|LE expr */ yytestcase(yyruleno==306);
      case 307: /* exprx ::= expr EQ|NE expr */ yytestcase(yyruleno==307);
      case 308: /* exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */ yytestcase(yyruleno==308);
      case 309: /* exprx ::= expr PLUS|MINUS expr */ yytestcase(yyruleno==309);
      case 310: /* exprx ::= expr STAR|SLASH|REM expr */ yytestcase(yyruleno==310);
      case 311: /* exprx ::= expr CONCAT expr */ yytestcase(yyruleno==311);
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initBinOp(yymsp[-2].minor.yy252, yymsp[-1].minor.yy0->value, yymsp[0].minor.yy252);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 312: /* exprx ::= expr not_opt likeop expr */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initLike(yymsp[-3].minor.yy252, *(yymsp[-2].minor.yy291), *(yymsp[-1].minor.yy100), yymsp[0].minor.yy252);
                                                delete yymsp[-2].minor.yy291;
                                                delete yymsp[-1].minor.yy100;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 313: /* exprx ::= expr not_opt likeop expr ESCAPE expr */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initLike(yymsp[-5].minor.yy252, *(yymsp[-4].minor.yy291), *(yymsp[-3].minor.yy100), yymsp[-2].minor.yy252, yymsp[0].minor.yy252);
                                                delete yymsp[-4].minor.yy291;
                                                delete yymsp[-3].minor.yy100;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 314: /* exprx ::= expr ISNULL|NOTNULL */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initNull(yymsp[-1].minor.yy252, yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 315: /* exprx ::= expr NOT NULL */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initNull(yymsp[-2].minor.yy252, "NOT NULL");
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 316: /* exprx ::= expr IS not_opt expr */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initIs(yymsp[-3].minor.yy252, *(yymsp[-1].minor.yy291), yymsp[0].minor.yy252);
                                                delete yymsp[-1].minor.yy291;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 317: /* exprx ::= expr IS NOT DISTINCT FROM expr */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initDistinct(yymsp[-5].minor.yy252, true, yymsp[0].minor.yy252);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 318: /* exprx ::= expr IS DISTINCT FROM expr */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initDistinct(yymsp[-4].minor.yy252, false, yymsp[0].minor.yy252);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 319: /* exprx ::= NOT expr */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initUnaryOp(yymsp[0].minor.yy252, yymsp[-1].minor.yy0->value);
                                            }
        break;
      case 320: /* exprx ::= BITNOT expr */
      case 322: /* exprx ::= PLUS expr */ yytestcase(yyruleno==322);
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initUnaryOp(yymsp[0].minor.yy252, yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 321: /* exprx ::= MINUS expr */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                if (yymsp[0].minor.yy252->mode == SqliteExpr::Mode::LITERAL_VALUE &&
                                                    parserContext->isCandidateForMaxNegativeNumber() &&
                                                    yymsp[0].minor.yy252->literalValue == static_cast<qint64>(0L))
                                                {
                                                    yygotominor.yy252->initLiteral(std::numeric_limits<qint64>::min());
                                                    delete yymsp[0].minor.yy252;
                                                }
                                                else
                                                {
                                                    yygotominor.yy252->initUnaryOp(yymsp[0].minor.yy252, yymsp[-1].minor.yy0->value);
                                                }
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 323: /* exprx ::= expr PTR expr */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initPtrOp(yymsp[-2].minor.yy252, yymsp[-1].minor.yy0->value, yymsp[0].minor.yy252);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 324: /* exprx ::= expr not_opt BETWEEN expr AND expr */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initBetween(yymsp[-5].minor.yy252, *(yymsp[-4].minor.yy291), yymsp[-2].minor.yy252, yymsp[0].minor.yy252);
                                                delete yymsp[-4].minor.yy291;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 325: /* exprx ::= expr not_opt IN LP exprlist RP */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initIn(yymsp[-5].minor.yy252, *(yymsp[-4].minor.yy291), *(yymsp[-1].minor.yy351));
                                                delete yymsp[-4].minor.yy291;
                                                delete yymsp[-1].minor.yy351;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 326: /* exprx ::= LP select RP */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initSubSelect(yymsp[-1].minor.yy453);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 327: /* exprx ::= expr not_opt IN LP select RP */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initIn(yymsp[-5].minor.yy252, *(yymsp[-4].minor.yy291), yymsp[-1].minor.yy453);
                                                delete yymsp[-4].minor.yy291;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 328: /* exprx ::= expr not_opt IN nm dbnm */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initIn(yymsp[-4].minor.yy252, *(yymsp[-3].minor.yy291), *(yymsp[-1].minor.yy259), *(yymsp[0].minor.yy259));
                                                delete yymsp[-3].minor.yy291;
                                                delete yymsp[-1].minor.yy259;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 329: /* exprx ::= EXISTS LP select RP */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initExists(yymsp[-1].minor.yy453);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 330: /* exprx ::= CASE case_operand case_exprlist case_else END */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initCase(yymsp[-3].minor.yy252, *(yymsp[-2].minor.yy351), yymsp[-1].minor.yy252);
                                                delete yymsp[-2].minor.yy351;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 331: /* exprx ::= RAISE LP IGNORE RP */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initRaise(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 332: /* exprx ::= RAISE LP raisetype COMMA nm RP */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initRaise(yymsp[-3].minor.yy0->value, *(yymsp[-1].minor.yy259));
                                                delete yymsp[-1].minor.yy259;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 333: /* exprx ::= id LP distinct exprlist RP filter_over */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initWindowFunction(stripObjName(*(yymsp[-5].minor.yy259)), *(yymsp[-3].minor.yy346), *(yymsp[-2].minor.yy351), yymsp[0].minor.yy247);
                                                delete yymsp[-5].minor.yy259;
                                                delete yymsp[-3].minor.yy346;
                                                delete yymsp[-2].minor.yy351;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 334: /* exprx ::= id LP STAR RP filter_over */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initWindowFunction(stripObjName(*(yymsp[-4].minor.yy259)), yymsp[0].minor.yy247);
                                                delete yymsp[-4].minor.yy259;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 335: /* expr ::= */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                objectForTokens = yygotominor.yy252;
                                                parserContext->minorErrorAfterLastToken("Syntax error <expr>");
                                            }
        break;
      case 341: /* likeop ::= LIKE_KW|MATCH */
{yygotominor.yy100 = new SqliteExpr::LikeOp(SqliteExpr::likeOp(yymsp[0].minor.yy0->value));}
        break;
      case 342: /* case_exprlist ::= case_exprlist WHEN expr THEN expr */
{
                                                yymsp[-4].minor.yy351->append(yymsp[-2].minor.yy252);
                                                yymsp[-4].minor.yy351->append(yymsp[0].minor.yy252);
                                                yygotominor.yy351 = yymsp[-4].minor.yy351;
                                            }
        break;
      case 343: /* case_exprlist ::= WHEN expr THEN expr */
{
                                                yygotominor.yy351 = new ParserExprList();
                                                yygotominor.yy351->append(yymsp[-2].minor.yy252);
                                                yygotominor.yy351->append(yymsp[0].minor.yy252);
                                            }
        break;
      case 350: /* nexprlist ::= nexprlist COMMA expr */
{
                                                yymsp[-2].minor.yy351->append(yymsp[0].minor.yy252);
                                                yygotominor.yy351 = yymsp[-2].minor.yy351;
                                                DONT_INHERIT_TOKENS("nexprlist");
                                            }
        break;
      case 351: /* nexprlist ::= exprx */
{
                                                yygotominor.yy351 = new ParserExprList();
                                                yygotominor.yy351->append(yymsp[0].minor.yy252);
                                            }
        break;
      case 352: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt */
{
                                                yygotominor.yy443 = new SqliteCreateIndex(
                                                        *(yymsp[-10].minor.yy291),
                                                        *(yymsp[-8].minor.yy291),
                                                        *(yymsp[-7].minor.yy259),
                                                        *(yymsp[-6].minor.yy259),
                                                        *(yymsp[-4].minor.yy259),
                                                        *(yymsp[-2].minor.yy543),
                                                        yymsp[0].minor.yy252
                                                    );
                                                delete yymsp[-8].minor.yy291;
                                                delete yymsp[-10].minor.yy291;
                                                delete yymsp[-7].minor.yy259;
                                                delete yymsp[-6].minor.yy259;
                                                delete yymsp[-4].minor.yy259;
                                                delete yymsp[-2].minor.yy543;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 353: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB */
{  yy_destructor(yypParser,203,&yymsp[-3].minor);
}
        break;
      case 358: /* idxlist_opt ::= */
{yygotominor.yy123 = new ParserIndexedColumnList();}
        break;
      case 359: /* idxlist_opt ::= LP idxlist RP */
{yygotominor.yy123 = yymsp[-1].minor.yy123;}
        break;
      case 360: /* idxlist ::= idxlist COMMA idxlist_single */
{
                                                yymsp[-2].minor.yy123->append(yymsp[0].minor.yy608);
                                                yygotominor.yy123 = yymsp[-2].minor.yy123;
                                                DONT_INHERIT_TOKENS("idxlist");
                                            }
        break;
      case 361: /* idxlist ::= idxlist_single */
{
                                                yygotominor.yy123 = new ParserIndexedColumnList();
                                                yygotominor.yy123->append(yymsp[0].minor.yy608);
                                            }
        break;
      case 362: /* idxlist_single ::= nm collate sortorder */
      case 363: /* idxlist_single ::= ID_COL */ yytestcase(yyruleno==363);
{
                                                SqliteIndexedColumn* obj =
                                                    new SqliteIndexedColumn(
                                                        *(yymsp[-2].minor.yy259),
                                                        *(yymsp[-1].minor.yy259),
                                                        *(yymsp[0].minor.yy389)
                                                    );
                                                yygotominor.yy608 = obj;
                                                delete yymsp[0].minor.yy389;
                                                delete yymsp[-2].minor.yy259;
                                                delete yymsp[-1].minor.yy259;
                                                objectForTokens = yygotominor.yy608;
                                            }
        break;
      case 367: /* cmd ::= DROP INDEX ifexists fullname */
{
                                                yygotominor.yy443 = new SqliteDropIndex(*(yymsp[-1].minor.yy291), yymsp[0].minor.yy60->name1, yymsp[0].minor.yy60->name2);
                                                delete yymsp[-1].minor.yy291;
                                                delete yymsp[0].minor.yy60;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 370: /* cmd ::= VACUUM vinto */
{
                                                yygotominor.yy443 = new SqliteVacuum(yymsp[0].minor.yy252);
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 371: /* cmd ::= VACUUM nm vinto */
{
                                                yygotominor.yy443 = new SqliteVacuum(*(yymsp[-1].minor.yy259), yymsp[0].minor.yy252);
                                                delete yymsp[-1].minor.yy259;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 374: /* cmd ::= PRAGMA nm dbnm */
{
                                                yygotominor.yy443 = new SqlitePragma(*(yymsp[-1].minor.yy259), *(yymsp[0].minor.yy259));
                                                delete yymsp[-1].minor.yy259;
                                                delete yymsp[0].minor.yy259;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 375: /* cmd ::= PRAGMA nm dbnm EQ nmnum */
      case 377: /* cmd ::= PRAGMA nm dbnm EQ minus_num */ yytestcase(yyruleno==377);
{
                                                yygotominor.yy443 = new SqlitePragma(*(yymsp[-3].minor.yy259), *(yymsp[-2].minor.yy259), *(yymsp[0].minor.yy249), true);
                                                delete yymsp[-3].minor.yy259;
                                                delete yymsp[-2].minor.yy259;
                                                delete yymsp[0].minor.yy249;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 376: /* cmd ::= PRAGMA nm dbnm LP nmnum RP */
      case 378: /* cmd ::= PRAGMA nm dbnm LP minus_num RP */ yytestcase(yyruleno==378);
{
                                                yygotominor.yy443 = new SqlitePragma(*(yymsp[-4].minor.yy259), *(yymsp[-3].minor.yy259), *(yymsp[-1].minor.yy249), false);
                                                delete yymsp[-4].minor.yy259;
                                                delete yymsp[-3].minor.yy259;
                                                delete yymsp[-1].minor.yy249;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 382: /* nmnum ::= nm */
{
                                                yygotominor.yy249 = new QVariant(*(yymsp[0].minor.yy259));
                                                delete yymsp[0].minor.yy259;
                                            }
        break;
      case 383: /* nmnum ::= ON */
      case 384: /* nmnum ::= DELETE */ yytestcase(yyruleno==384);
      case 385: /* nmnum ::= DEFAULT */ yytestcase(yyruleno==385);
{yygotominor.yy249 = new QVariant(yymsp[0].minor.yy0->value);}
        break;
      case 388: /* minus_num ::= MINUS number */
{
                                                if (yymsp[0].minor.yy249->type() == QVariant::Double)
                                                    *(yymsp[0].minor.yy249) = -(yymsp[0].minor.yy249->toDouble());
                                                else if (yymsp[0].minor.yy249->type() == QVariant::LongLong)
                                                {
                                                    if (parserContext->isCandidateForMaxNegativeNumber())
                                                        *(yymsp[0].minor.yy249) = std::numeric_limits<qint64>::min();
                                                    else
                                                        *(yymsp[0].minor.yy249) = -(yymsp[0].minor.yy249->toLongLong());
                                                }
                                                else
                                                    Q_ASSERT_X(true, "producing minus number", "QVariant is neither of Double or LongLong.");

                                                yygotominor.yy249 = yymsp[0].minor.yy249;
                                            }
        break;
      case 391: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END */
{
                                                yygotominor.yy443 = new SqliteCreateTrigger(
                                                        *(yymsp[-13].minor.yy346),
                                                        *(yymsp[-11].minor.yy291),
                                                        *(yymsp[-10].minor.yy259),
                                                        *(yymsp[-9].minor.yy259),
                                                        *(yymsp[-5].minor.yy259),
                                                        *(yymsp[-8].minor.yy372),
                                                        yymsp[-7].minor.yy331,
                                                        *(yymsp[-4].minor.yy323),
                                                        yymsp[-3].minor.yy252,
                                                        *(yymsp[-1].minor.yy330),
                                                        3
                                                    );
                                                delete yymsp[-11].minor.yy291;
                                                delete yymsp[-13].minor.yy346;
                                                delete yymsp[-8].minor.yy372;
                                                delete yymsp[-4].minor.yy323;
                                                delete yymsp[-10].minor.yy259;
                                                delete yymsp[-5].minor.yy259;
                                                delete yymsp[-9].minor.yy259;
                                                delete yymsp[-1].minor.yy330;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 392: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause */
{
                                                QList<SqliteQuery *> CL;

                                                yygotominor.yy443 = new SqliteCreateTrigger(
                                                        *(yymsp[-10].minor.yy346),
                                                        *(yymsp[-8].minor.yy291),
                                                        *(yymsp[-7].minor.yy259),
                                                        *(yymsp[-6].minor.yy259),
                                                        *(yymsp[-2].minor.yy259),
                                                        *(yymsp[-5].minor.yy372),
                                                        yymsp[-4].minor.yy331,
                                                        *(yymsp[-1].minor.yy323),
                                                        yymsp[0].minor.yy252,
                                                        CL,
                                                        3
                                                    );
                                                delete yymsp[-8].minor.yy291;
                                                delete yymsp[-10].minor.yy346;
                                                delete yymsp[-5].minor.yy372;
                                                delete yymsp[-1].minor.yy323;
                                                delete yymsp[-7].minor.yy259;
                                                delete yymsp[-2].minor.yy259;
                                                delete yymsp[-6].minor.yy259;
                                                objectForTokens = yygotominor.yy443;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 393: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list */
{
                                                yygotominor.yy443 = new SqliteCreateTrigger(
													*(yymsp[-12].minor.yy346),
													*(yymsp[-10].minor.yy291),
													*(yymsp[-9].minor.yy259),
													*(yymsp[-8].minor.yy259),
													*(yymsp[-4].minor.yy259),
													*(yymsp[-7].minor.yy372),
													yymsp[-6].minor.yy331,
													*(yymsp[-3].minor.yy323),
													yymsp[-2].minor.yy252,
													*(yymsp[0].minor.yy330),
													3
                                                );
                                                delete yymsp[-10].minor.yy291;
                                                delete yymsp[-12].minor.yy346;
                                                delete yymsp[-7].minor.yy372;
                                                delete yymsp[-3].minor.yy323;
                                                delete yymsp[-9].minor.yy259;
                                                delete yymsp[-4].minor.yy259;
                                                delete yymsp[-8].minor.yy259;
                                                delete yymsp[0].minor.yy330;
                                                objectForTokens = yygotominor.yy443;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 394: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB */
{  yy_destructor(yypParser,205,&yymsp[-8].minor);
  yy_destructor(yypParser,203,&yymsp[-5].minor);
  yy_destructor(yypParser,301,&yymsp[-3].minor);
  yy_destructor(yypParser,302,&yymsp[-2].minor);
}
        break;
      case 397: /* trigger_time ::= BEFORE */
{yygotominor.yy372 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::BEFORE);}
        break;
      case 398: /* trigger_time ::= AFTER */
{yygotominor.yy372 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::AFTER);}
        break;
      case 399: /* trigger_time ::= INSTEAD OF */
{yygotominor.yy372 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::INSTEAD_OF);}
        break;
      case 400: /* trigger_time ::= */
{yygotominor.yy372 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::null);}
        break;
      case 401: /* trigger_event ::= DELETE */
{
                                                yygotominor.yy331 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::DELETE);
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 402: /* trigger_event ::= INSERT */
{
                                                yygotominor.yy331 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::INSERT);
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 403: /* trigger_event ::= UPDATE */
{
                                                yygotominor.yy331 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::UPDATE);
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 404: /* trigger_event ::= UPDATE OF idlist */
{
                                                yygotominor.yy331 = new SqliteCreateTrigger::Event(*(yymsp[0].minor.yy215));
                                                delete yymsp[0].minor.yy215;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 405: /* foreach_clause ::= */
{yygotominor.yy323 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::null);}
        break;
      case 406: /* foreach_clause ::= FOR EACH ROW */
{yygotominor.yy323 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::FOR_EACH_ROW);}
        break;
      case 409: /* trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI */
{
                                                yymsp[-2].minor.yy330->append(yymsp[-1].minor.yy443);
                                                yygotominor.yy330 = yymsp[-2].minor.yy330;
                                                DONT_INHERIT_TOKENS("trigger_cmd_list");
                                            }
        break;
      case 410: /* trigger_cmd_list ::= trigger_cmd SEMI */
{
                                                yygotominor.yy330 = new ParserQueryList();
                                                yygotominor.yy330->append(yymsp[-1].minor.yy443);
                                            }
        break;
      case 411: /* trigger_cmd_list ::= SEMI */
{
                                                yygotominor.yy330 = new ParserQueryList();
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 416: /* raisetype ::= ROLLBACK|ABORT|FAIL */
{yygotominor.yy0 = yymsp[0].minor.yy0;}
        break;
      case 417: /* cmd ::= DROP TRIGGER ifexists fullname */
{
                                                yygotominor.yy443 = new SqliteDropTrigger(*(yymsp[-1].minor.yy291), yymsp[0].minor.yy60->name1, yymsp[0].minor.yy60->name2);
                                                delete yymsp[-1].minor.yy291;
                                                delete yymsp[0].minor.yy60;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 420: /* cmd ::= ATTACH database_kw_opt expr AS expr key_opt */
{
                                                yygotominor.yy443 = new SqliteAttach(*(yymsp[-4].minor.yy291), yymsp[-3].minor.yy252, yymsp[-1].minor.yy252, yymsp[0].minor.yy252);
                                                delete yymsp[-4].minor.yy291;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 421: /* cmd ::= DETACH database_kw_opt expr */
{
                                                yygotominor.yy443 = new SqliteDetach(*(yymsp[-1].minor.yy291), yymsp[0].minor.yy252);
                                                delete yymsp[-1].minor.yy291;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 426: /* cmd ::= REINDEX */
{yygotominor.yy443 = new SqliteReindex();}
        break;
      case 427: /* cmd ::= REINDEX nm dbnm */
      case 428: /* cmd ::= REINDEX ID_COLLATE */ yytestcase(yyruleno==428);
{
                                                yygotominor.yy443 = new SqliteReindex(*(yymsp[-1].minor.yy259), *(yymsp[0].minor.yy259));
                                                delete yymsp[-1].minor.yy259;
                                                delete yymsp[0].minor.yy259;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 431: /* cmd ::= ANALYZE */
{
                                                yygotominor.yy443 = new SqliteAnalyze();
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 432: /* cmd ::= ANALYZE nm dbnm */
{
                                                yygotominor.yy443 = new SqliteAnalyze(*(yymsp[-1].minor.yy259), *(yymsp[0].minor.yy259));
                                                delete yymsp[-1].minor.yy259;
                                                delete yymsp[0].minor.yy259;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 435: /* cmd ::= ALTER TABLE fullname RENAME TO nm */
{
                                                yygotominor.yy443 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy60->name1,
                                                        yymsp[-3].minor.yy60->name2,
                                                        *(yymsp[0].minor.yy259)
                                                    );
                                                delete yymsp[0].minor.yy259;
                                                delete yymsp[-3].minor.yy60;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 436: /* cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column */
{
                                                yygotominor.yy443 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy60->name1,
                                                        yymsp[-3].minor.yy60->name2,
                                                        *(yymsp[-1].minor.yy291),
                                                        yymsp[0].minor.yy567
                                                    );
                                                delete yymsp[-1].minor.yy291;
                                                delete yymsp[-3].minor.yy60;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 437: /* cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm */
{
                                                yygotominor.yy443 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy60->name1,
                                                        yymsp[-3].minor.yy60->name2,
                                                        *(yymsp[-1].minor.yy291),
                                                        *(yymsp[0].minor.yy259)
                                                    );
                                                delete yymsp[-1].minor.yy291;
                                                delete yymsp[-3].minor.yy60;
                                                delete yymsp[0].minor.yy259;
                                            }
        break;
      case 438: /* cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW */
{  yy_destructor(yypParser,207,&yymsp[-3].minor);
}
        break;
      case 444: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm */
{
                                                yygotominor.yy443 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-4].minor.yy291),
                                                        *(yymsp[-3].minor.yy259),
                                                        *(yymsp[-2].minor.yy259),
                                                        *(yymsp[0].minor.yy259)
                                                    );
                                                delete yymsp[-4].minor.yy291;
                                                delete yymsp[-3].minor.yy259;
                                                delete yymsp[-2].minor.yy259;
                                                delete yymsp[0].minor.yy259;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 445: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP */
{
                                                yygotominor.yy443 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-7].minor.yy291),
                                                        *(yymsp[-6].minor.yy259),
                                                        *(yymsp[-5].minor.yy259),
                                                        *(yymsp[-3].minor.yy259),
                                                        *(yymsp[-1].minor.yy215)
                                                    );
                                                delete yymsp[-6].minor.yy259;
                                                delete yymsp[-5].minor.yy259;
                                                delete yymsp[-3].minor.yy259;
                                                delete yymsp[-7].minor.yy291;
                                                delete yymsp[-1].minor.yy215;
                                                objectForTokens = yygotominor.yy443;
                                            }
        break;
      case 448: /* vtabarglist ::= vtabarg */
{
                                                yygotominor.yy215 = new QStringList();
                                                yygotominor.yy215->append((yymsp[0].minor.yy259)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                delete yymsp[0].minor.yy259;
                                            }
        break;
      case 449: /* vtabarglist ::= vtabarglist COMMA vtabarg */
{
                                                yymsp[-2].minor.yy215->append((yymsp[0].minor.yy259)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                yygotominor.yy215 = yymsp[-2].minor.yy215;
                                                delete yymsp[0].minor.yy259;
                                                DONT_INHERIT_TOKENS("vtabarglist");
                                            }
        break;
      case 451: /* vtabarg ::= vtabarg vtabargtoken */
{
                                                yymsp[-1].minor.yy259->append(" "+ *(yymsp[0].minor.yy259));
                                                yygotominor.yy259 = yymsp[-1].minor.yy259;
                                                delete yymsp[0].minor.yy259;
                                            }
        break;
      case 452: /* vtabargtoken ::= ANY */
{
                                                yygotominor.yy259 = new QString(yymsp[0].minor.yy0->value);
                                            }
        break;
      case 453: /* vtabargtoken ::= LP anylist RP */
{
                                                yygotominor.yy259 = new QString("(");
                                                yygotominor.yy259->append(*(yymsp[-1].minor.yy259));
                                                yygotominor.yy259->append(")");
                                                delete yymsp[-1].minor.yy259;
                                            }
        break;
      case 455: /* anylist ::= anylist LP anylist RP */
{
                                                yygotominor.yy259 = yymsp[-3].minor.yy259;
                                                yygotominor.yy259->append("(");
                                                yygotominor.yy259->append(*(yymsp[-1].minor.yy259));
                                                yygotominor.yy259->append(")");
                                                delete yymsp[-1].minor.yy259;
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 456: /* anylist ::= anylist ANY */
{
                                                yygotominor.yy259 = yymsp[-1].minor.yy259;
                                                yygotominor.yy259->append(yymsp[0].minor.yy0->value);
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 457: /* with ::= */
{yygotominor.yy641 = nullptr;}
        break;
      case 458: /* with ::= WITH wqlist */
{
                                                yygotominor.yy641 = new SqliteWith();
												yygotominor.yy641->cteList = *(yymsp[0].minor.yy332);
												delete yymsp[0].minor.yy332;
                                                objectForTokens = yygotominor.yy641;
                                            }
        break;
      case 459: /* with ::= WITH RECURSIVE wqlist */
{
                                                yygotominor.yy641 = new SqliteWith();
												yygotominor.yy641->cteList = *(yymsp[0].minor.yy332);
                                                yygotominor.yy641->recursive = true;
												delete yymsp[0].minor.yy332;
                                                objectForTokens = yygotominor.yy641;
                                            }
        break;
      case 460: /* wqas ::= AS */
{yygotominor.yy640 = new SqliteWith::CommonTableExpression::AsMode(SqliteWith::CommonTableExpression::ANY);}
        break;
      case 461: /* wqas ::= AS MATERIALIZED */
{yygotominor.yy640 = new SqliteWith::CommonTableExpression::AsMode(SqliteWith::CommonTableExpression::MATERIALIZED);}
        break;
      case 462: /* wqas ::= AS NOT MATERIALIZED */
{yygotominor.yy640 = new SqliteWith::CommonTableExpression::AsMode(SqliteWith::CommonTableExpression::NOT_MATERIALIZED);}
        break;
      case 463: /* wqlist ::= wqcte */
{
												yygotominor.yy332 = new ParserCteList();
                                                yygotominor.yy332->append(yymsp[0].minor.yy446);
                                            }
        break;
      case 464: /* wqlist ::= wqlist COMMA wqcte */
{
                                                yygotominor.yy332 = yymsp[-2].minor.yy332;
                                                yygotominor.yy332->append(yymsp[0].minor.yy446);
                                                DONT_INHERIT_TOKENS("wqlist");
                                            }
        break;
      case 465: /* wqlist ::= ID_TAB_NEW */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                            }
        break;
      case 466: /* wqcte ::= nm idxlist_opt wqas LP select RP */
{
                                                yygotominor.yy446 = new SqliteWith::CommonTableExpression(*(yymsp[-5].minor.yy259), *(yymsp[-4].minor.yy123), yymsp[-1].minor.yy453, *(yymsp[-3].minor.yy640));
                                                delete yymsp[-5].minor.yy259;
                                                delete yymsp[-4].minor.yy123;
                                                delete yymsp[-3].minor.yy640;
												objectForTokens = yygotominor.yy446;
											}
        break;
      case 467: /* windowdefn_list ::= windowdefn */
{
												yygotominor.yy639 = new ParserWindowDefList();
												yygotominor.yy639->append(yymsp[0].minor.yy646);
											}
        break;
      case 468: /* windowdefn_list ::= windowdefn_list COMMA windowdefn */
{
												yymsp[-2].minor.yy639->append(yymsp[0].minor.yy646);
												yygotominor.yy639 = yymsp[-2].minor.yy639;
												DONT_INHERIT_TOKENS("windowdefn_list");
											}
        break;
      case 469: /* windowdefn ::= nm AS LP window RP */
{
												yygotominor.yy646 = new SqliteWindowDefinition(*(yymsp[-4].minor.yy259), yymsp[-1].minor.yy234);
												delete yymsp[-4].minor.yy259;
												objectForTokens = yygotominor.yy646;
											}
        break;
      case 470: /* window ::= PARTITION BY nexprlist orderby_opt frame_opt */
{
												yygotominor.yy234 = new SqliteWindowDefinition::Window();
												yygotominor.yy234->initPartitionBy(QString(), *(yymsp[-2].minor.yy351), *(yymsp[-1].minor.yy543), yymsp[0].minor.yy41);
												delete yymsp[-2].minor.yy351;
												delete yymsp[-1].minor.yy543;
												objectForTokens = yygotominor.yy234;
											}
        break;
      case 471: /* window ::= nm PARTITION BY nexprlist orderby_opt frame_opt */
{
												yygotominor.yy234 = new SqliteWindowDefinition::Window();
												yygotominor.yy234->initPartitionBy(*(yymsp[-5].minor.yy259), *(yymsp[-2].minor.yy351), *(yymsp[-1].minor.yy543), yymsp[0].minor.yy41);
												delete yymsp[-2].minor.yy351;
												delete yymsp[-5].minor.yy259;
												delete yymsp[-1].minor.yy543;
												objectForTokens = yygotominor.yy234;
											}
        break;
      case 472: /* window ::= ORDER BY sortlist frame_opt */
{
												yygotominor.yy234 = new SqliteWindowDefinition::Window();
												yygotominor.yy234->initOrderBy(QString(), *(yymsp[-1].minor.yy543), yymsp[0].minor.yy41);
												delete yymsp[-1].minor.yy543;
												objectForTokens = yygotominor.yy234;
											}
        break;
      case 473: /* window ::= nm ORDER BY sortlist frame_opt */
{
												yygotominor.yy234 = new SqliteWindowDefinition::Window();
												yygotominor.yy234->initOrderBy(*(yymsp[-4].minor.yy259), *(yymsp[-1].minor.yy543), yymsp[0].minor.yy41);
												delete yymsp[-1].minor.yy543;
												delete yymsp[-4].minor.yy259;
												objectForTokens = yygotominor.yy234;
											}
        break;
      case 474: /* window ::= frame_opt */
{
												yygotominor.yy234 = new SqliteWindowDefinition::Window();
												yygotominor.yy234->init(QString(), yymsp[0].minor.yy41);
												objectForTokens = yygotominor.yy234;
											}
        break;
      case 475: /* window ::= nm frame_opt */
{
												yygotominor.yy234 = new SqliteWindowDefinition::Window();
												yygotominor.yy234->init(QString(), yymsp[0].minor.yy41);
												delete yymsp[-1].minor.yy259;
												objectForTokens = yygotominor.yy234;
											}
        break;
      case 476: /* frame_opt ::= */
{yygotominor.yy41 = nullptr;}
        break;
      case 477: /* frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt */
{
												yygotominor.yy41 = new SqliteWindowDefinition::Window::Frame(*(yymsp[-2].minor.yy358), yymsp[-1].minor.yy81, nullptr, *(yymsp[0].minor.yy603));
												delete yymsp[-2].minor.yy358;
												delete yymsp[0].minor.yy603;
												objectForTokens = yygotominor.yy41;
											}
        break;
      case 478: /* frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt */
{
												yygotominor.yy41 = new SqliteWindowDefinition::Window::Frame(*(yymsp[-5].minor.yy358), yymsp[-3].minor.yy81, yymsp[-1].minor.yy81, *(yymsp[0].minor.yy603));
												delete yymsp[-5].minor.yy358;
												delete yymsp[0].minor.yy603;
												objectForTokens = yygotominor.yy41;
											}
        break;
      case 479: /* range_or_rows ::= RANGE|ROWS|GROUPS */
{
												yygotominor.yy358 = new SqliteWindowDefinition::Window::Frame::RangeOrRows(
													SqliteWindowDefinition::Window::Frame::toRangeOrRows(yymsp[0].minor.yy0->value)
													);
											}
        break;
      case 480: /* frame_bound_s ::= frame_bound */
      case 482: /* frame_bound_e ::= frame_bound */ yytestcase(yyruleno==482);
{
												yygotominor.yy81 = yymsp[0].minor.yy81;
												objectForTokens = yygotominor.yy81;
											}
        break;
      case 481: /* frame_bound_s ::= UNBOUNDED PRECEDING */
      case 483: /* frame_bound_e ::= UNBOUNDED FOLLOWING */ yytestcase(yyruleno==483);
      case 485: /* frame_bound ::= CURRENT ROW */ yytestcase(yyruleno==485);
{
												yygotominor.yy81 = new SqliteWindowDefinition::Window::Frame::Bound(nullptr, yymsp[-1].minor.yy0->value + " " + yymsp[0].minor.yy0->value);
												objectForTokens = yygotominor.yy81;
											}
        break;
      case 484: /* frame_bound ::= expr PRECEDING|FOLLOWING */
{
												yygotominor.yy81 = new SqliteWindowDefinition::Window::Frame::Bound(yymsp[-1].minor.yy252, yymsp[0].minor.yy0->value);
												objectForTokens = yygotominor.yy81;
											}
        break;
      case 486: /* frame_exclude_opt ::= */
{
												yygotominor.yy603 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::null
													);
											}
        break;
      case 487: /* frame_exclude_opt ::= EXCLUDE frame_exclude */
{
												yygotominor.yy603 = yymsp[0].minor.yy603;
											}
        break;
      case 488: /* frame_exclude ::= NO OTHERS */
{
												yygotominor.yy603 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::NO_OTHERS
													);
											}
        break;
      case 489: /* frame_exclude ::= CURRENT ROW */
{
												yygotominor.yy603 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::CURRENT_ROW
													);
											}
        break;
      case 490: /* frame_exclude ::= GROUP */
{
												yygotominor.yy603 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::GROUP
													);
											}
        break;
      case 491: /* frame_exclude ::= TIES */
{
												yygotominor.yy603 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::TIES
													);
											}
        break;
      case 492: /* window_clause ::= WINDOW windowdefn_list */
{
												yygotominor.yy639 = yymsp[0].minor.yy639;
											}
        break;
      case 493: /* filter_over ::= filter_clause over_clause */
{
												yygotominor.yy247 = new SqliteFilterOver(yymsp[-1].minor.yy657, yymsp[0].minor.yy288);
												objectForTokens = yygotominor.yy247;
											}
        break;
      case 494: /* filter_over ::= over_clause */
{
												yygotominor.yy247 = new SqliteFilterOver(nullptr, yymsp[0].minor.yy288);
												objectForTokens = yygotominor.yy247;
											}
        break;
      case 495: /* filter_over ::= filter_clause */
{
												yygotominor.yy247 = new SqliteFilterOver(yymsp[0].minor.yy657, nullptr);
												objectForTokens = yygotominor.yy247;
											}
        break;
      case 496: /* over_clause ::= OVER LP window RP */
{
												yygotominor.yy288 = new SqliteFilterOver::Over(yymsp[-1].minor.yy234);
												objectForTokens = yygotominor.yy288;
											}
        break;
      case 497: /* over_clause ::= OVER nm */
{
												yygotominor.yy288 = new SqliteFilterOver::Over(*(yymsp[0].minor.yy259));
												delete yymsp[0].minor.yy259;
												objectForTokens = yygotominor.yy288;
											}
        break;
      case 498: /* filter_clause ::= FILTER LP WHERE expr RP */
{
												yygotominor.yy657 = new SqliteFilterOver::Filter(yymsp[-1].minor.yy252);
												objectForTokens = yygotominor.yy657;
                                            }
        break;
      default:
      /* (0) input ::= cmdlist */ yytestcase(yyruleno==0);
        break;
      };
  }
  assert( yyruleno>=0 && yyruleno<(int)(sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0])) );
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;

  // Store tokens for the rule in parser context
  QList<Token*> allTokens;
  QList<Token*> allTokensWithAllInherited;
  QString keyForTokensMap;
  int tokensMapKeyCnt;
  if (parserContext->setupTokens)
  {
      if (objectForTokens)
      {
          // In case this is a list with recurrent references we need
          // to clear tokens before adding the new and extended list.
          objectForTokens->tokens.clear();
      }

      QList<Token*> tokens;
      for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
      {
          tokens.clear();
          const char* fieldName = yyTokenName[yypParser->yystack[i].major];

          // Adding token being subject of this reduction. It's usually not includes in the inherited tokens,
          // although if inheriting from simple statements, like "FAIL" or "ROLLBACK", this tends to be redundant with the inherited tokens.
          // That's why we're checking if it's not contained in the inherited tokens and add it only then.
          if (parserContext->isManagedToken(yypParser->yystack[i].minor.yy0) && !yypParser->yystack[i].tokens->contains(yypParser->yystack[i].minor.yy0))
              tokens += yypParser->yystack[i].minor.yy0;

          tokens += *(yypParser->yystack[i].tokens);

          if (!noTokenInheritanceFields.contains(fieldName))
          {
              if (objectForTokens)
              {
                  keyForTokensMap = fieldName;
                  tokensMapKeyCnt = 2;
                  while (objectForTokens->tokensMap.contains(keyForTokensMap))
                      keyForTokensMap = fieldName + QString::number(tokensMapKeyCnt++);

                  objectForTokens->tokensMap[keyForTokensMap] = parserContext->getTokenPtrList(tokens);
              }

              allTokens += tokens;
          }
          else
          {
              // If field is mentioned only once, then only one occurance of it will be ignored.
              // Second one should be inherited. See "anylist" definition for explanation why.
              noTokenInheritanceFields.removeOne(fieldName);
          }
          allTokensWithAllInherited += tokens;
      }
      if (objectForTokens)
      {
          objectForTokens->tokens += parserContext->getTokenPtrList(allTokens);
      }
  }

  // Clear token lists
  for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
  {
      delete yypParser->yystack[i].tokens;
      yypParser->yystack[i].tokens = nullptr;
  }

  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
      if (parserContext->setupTokens)
          *(yypParser->yystack[yypParser->yyidx].tokens) = allTokens;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
      if (parserContext->setupTokens && yypParser->yyidx >= 0)
      {
          QList<Token*>* tokensPtr = yypParser->yystack[yypParser->yyidx].tokens;
          *tokensPtr = allTokensWithAllInherited + *tokensPtr;
      }
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  sqlite3_parseARG_FETCH;
#define TOKEN (yyminor.yy0)

    UNUSED_PARAMETER(yymajor);
    parserContext->error(TOKEN, QObject::tr("Syntax error"));
    //qDebug() << "near " << TOKEN->toString() << ": syntax error";
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "sqlite3_parseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  sqlite3_parseTOKENTYPE yyminor       /* The value for the token */
  sqlite3_parseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
    yypParser->yystack[0].tokens = new QList<Token*>();
  }
  yyminorunion.yy0 = yyminor;
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif
  sqlite3_parseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s [%s] (lemon type: %s)\n",
            yyTracePrompt,
            yyminor->value.toLatin1().data(),
            yyminor->typeString().toLatin1().data(),
            yyTokenName[yymajor]);  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;

#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}

int sqlite3ParserFallback(int iToken) {
    return yyFallback[iToken];
}
