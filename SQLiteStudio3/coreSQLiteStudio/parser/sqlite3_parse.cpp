/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
**
** This version of "lempar.c" is modified, slightly, for use by SQLite.
** The only modifications are the addition of a couple of NEVER()
** macros to disable tests that are needed in the case of a general
** LALR(1) grammar but which are always false in the
** specific grammar used by SQLite.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>

#include "token.h"
#include "parsercontext.h"
#include "parser_helper_stubs.h"
#include "common/utils_sql.h"
#include "common/global.h"
#include "common/unused.h"
#include "parser/ast/sqlitealtertable.h"
#include "parser/ast/sqliteanalyze.h"
#include "parser/ast/sqliteattach.h"
#include "parser/ast/sqlitebegintrans.h"
#include "parser/ast/sqlitecommittrans.h"
#include "parser/ast/sqlitecreateindex.h"
#include "parser/ast/sqlitecreatetable.h"
#include "parser/ast/sqlitecreatetrigger.h"
#include "parser/ast/sqlitecreateview.h"
#include "parser/ast/sqlitecreatevirtualtable.h"
#include "parser/ast/sqlitedelete.h"
#include "parser/ast/sqlitedetach.h"
#include "parser/ast/sqlitedropindex.h"
#include "parser/ast/sqlitedroptable.h"
#include "parser/ast/sqlitedroptrigger.h"
#include "parser/ast/sqlitedropview.h"
#include "parser/ast/sqliteemptyquery.h"
#include "parser/ast/sqliteinsert.h"
#include "parser/ast/sqlitepragma.h"
#include "parser/ast/sqlitereindex.h"
#include "parser/ast/sqliterelease.h"
#include "parser/ast/sqliterollback.h"
#include "parser/ast/sqlitesavepoint.h"
#include "parser/ast/sqliteselect.h"
#include "parser/ast/sqliteupdate.h"
#include "parser/ast/sqlitevacuum.h"
#include "parser/ast/sqliteexpr.h"
#include "parser/ast/sqlitecolumntype.h"
#include "parser/ast/sqliteconflictalgo.h"
#include "parser/ast/sqlitesortorder.h"
#include "parser/ast/sqliteindexedcolumn.h"
#include "parser/ast/sqliteforeignkey.h"
#include "parser/ast/sqlitewith.h"
#include "parser/ast/sqliteupsert.h"
#include "parser/ast/sqlitewindowdefinition.h"
#include "parser/ast/sqlitefilterover.h"
#include "parser/ast/sqlitenulls.h"
#include <QObject>
#include <QDebug>
#include <limits.h>

#define assert(X) Q_ASSERT(X)
#define UNUSED_PARAMETER(X) (void)(X)
#define DONT_INHERIT_TOKENS(X) noTokenInheritanceFields << X

/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/*
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands.
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    sqlite3_parseTOKENTYPE     is the data type used for minor tokens given
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is sqlite3_parseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    sqlite3_parseARG_SDECL     A static variable declaration for the %extra_argument
**    sqlite3_parseARG_PDECL     A parameter declaration for the %extra_argument
**    sqlite3_parseARG_STORE     Code to store %extra_argument into yypParser
**    sqlite3_parseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned short int
#define YYNOCODE 330
#define YYACTIONTYPE unsigned short int
#define YYWILDCARD 80
#define sqlite3_parseTOKENTYPE Token*
typedef union {
  int yyinit;
  sqlite3_parseTOKENTYPE yy0;
  ParserOtherSourceList* yy33;
  SqliteWindowDefinition::Window* yy52;
  SqliteSelect::Core::JoinConstraint* yy71;
  ParserFullName* yy80;
  bool* yy101;
  SqliteForeignKey::Condition::Reaction* yy104;
  SqliteCreateTrigger::Time* yy105;
  ParserIndexedBy* yy108;
  ParserStubTransDetails* yy124;
  SqliteExpr::LikeOp* yy128;
  ParserSetValueList* yy129;
  ParserDeferSubClause* yy133;
  ParserCreateTableConstraintList* yy137;
  SqliteQuery* yy157;
  ParserStubCreateTableOption* yy163;
  QVariant* yy189;
  SqliteExpr* yy198;
  SqliteCreateTable::Column* yy199;
  ParserXFullName* yy208;
  SqliteWith::CommonTableExpression::AsMode* yy221;
  ParserCreateTableColumnList* yy230;
  SqliteInitially* yy238;
  QString* yy245;
  ParserResultColumnList* yy247;
  ParserStubExplain* yy257;
  ParserStubInsertOrReplace* yy258;
  ParserCreateTableColumnConstraintList* yy261;
  SqliteSelect::CompoundOperator* yy266;
  SqliteFilterOver::Filter* yy275;
  ParserQueryList* yy276;
  ParserExprNestedList* yy292;
  SqliteCreateTable::Constraint* yy294;
  SqliteSelect::Core::JoinOp* yy315;
  SqliteSelect::Core* yy338;
  SqliteColumnType* yy341;
  SqliteNulls* yy342;
  SqliteSelect* yy347;
  SqliteSortOrder* yy351;
  SqliteCreateTrigger::Scope* yy367;
  SqliteFilterOver::Over* yy381;
  SqliteUpsert* yy392;
  SqliteFilterOver* yy393;
  ParserFkConditionList* yy394;
  ParserIndexedColumnList* yy419;
  SqliteSelect::Core::JoinSource* yy427;
  SqliteWindowDefinition::Window::Frame* yy428;
  SqliteCreateTable::Column::Constraint* yy430;
  SqliteCreateTrigger::Event* yy481;
  SqliteWith* yy489;
  SqliteIndexedColumn* yy500;
  SqliteLimit* yy512;
  ParserCteList* yy514;
  SqliteForeignKey::Condition* yy515;
  ParserStubAlias* yy522;
  SqliteWindowDefinition::Window::Frame::Exclude* yy525;
  ParserExprList* yy537;
  ParserTermOrLiteral* yy538;
  SqliteWith::CommonTableExpression* yy560;
  SqliteWindowDefinition* yy568;
  ParserCreateTableOptionList* yy577;
  SqliteSelect::Core::SingleSource* yy607;
  ParserOrderByList* yy611;
  QStringList* yy613;
  SqliteWindowDefinition::Window::Frame::Bound* yy633;
  int* yy636;
  SqliteConflictAlgo* yy646;
  ParserWindowDefList* yy647;
  SqliteWindowDefinition::Window::Frame::RangeOrRows* yy656;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define sqlite3_parseARG_SDECL ParserContext* parserContext;
#define sqlite3_parseARG_PDECL ,ParserContext* parserContext
#define sqlite3_parseARG_FETCH ParserContext* parserContext = yypParser->parserContext
#define sqlite3_parseARG_STORE yypParser->parserContext = parserContext
#define YYNSTATE 882
#define YYNRULE 497
#define YYFALLBACK 1
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

#define GET_CONTEXT yyParser* yypParser = pParser; sqlite3_parseARG_FETCH

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (2834)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   538,  164,  879,  783,  464,  461,  460,   27,   67,   68,
 /*    10 */   537,  285,  529,  782,  830,  830,   65,   65,   66,   66,
 /*    20 */    66,   66,  459,   64,   64,   64,   64,   63,   63,   62,
 /*    30 */    62,   62,   61,   59,  265,  472, 1252,  819,   67,   68,
 /*    40 */   537,  285,   58,  363,  830,  830,   65,   65,   66,   66,
 /*    50 */    66,   66,  534,   64,   64,   64,   64,   63,   63,   62,
 /*    60 */    62,   62,   61,   59,  265,  411, 1302,   62,   62,   62,
 /*    70 */    61,   59,  265,  820,  107,   66,   66,   66,   66,   56,
 /*    80 */    64,   64,   64,   64,   63,   63,   62,   62,   62,   61,
 /*    90 */    59,  265,  846,  874,  608,  847,   53,   54,  727,  609,
 /*   100 */    82,  734,  840,  882,   55, 1054,  645,  169,  296,  793,
 /*   110 */   538,  298,    2, 1054,  340,  817,  873,  828, 1054,  855,
 /*   120 */    89,  526,  529,  842,  871,  841,  217,  427,  858,  845,
 /*   130 */  1127,  833,  410,  873,  536,  874,  828,  844,  843,  842,
 /*   140 */   513, 1054,  288,  616,   80,  733,  729,  128,  523,  293,
 /*   150 */   480,  267,  721,  720, 1054,  299, 1054, 1054,  840,  874,
 /*   160 */  1054,  292,  534,   91,  365, 1054, 1054, 1054, 1054, 1054,
 /*   170 */  1054,  828,  873,  617,  828,  619,  818,   12,  618,  842,
 /*   180 */   289,  841,  232,  820,  846,  845,  787,  847, 1054,   56,
 /*   190 */   536,  874,  132,  844,  843,  842,  874,  362,  833,   21,
 /*   200 */   432,  436,  364,  185,  474,   72,   53,   54,  109,  505,
 /*   210 */   735,   81,  880,  127,   55, 1127,  872,  871,  491,  476,
 /*   220 */   538,  504,    2, 1127,  765,  297,   58,  828, 1127,  736,
 /*   230 */   627,  526,  529,  842,  871,  506,  266,  821,  323,  845,
 /*   240 */   874,  325,  378,    8,  735,  174,  828,  844,  843,  842,
 /*   250 */   366, 1127,  183,  142,  833, 1071, 1071,  770,  872,  871,
 /*   260 */   257,  719,  821,  479, 1127,  802, 1127, 1127,  700,  874,
 /*   270 */   116,  837,  534,  513,  568, 1127, 1127, 1127, 1127,  874,
 /*   280 */  1127,  828,  872,  871,  828,  361,  818,   12,  873,  726,
 /*   290 */   746,  379,  699,  820,  569,  570,  821,  135, 1127,   56,
 /*   300 */    64,   64,   64,   64,   63,   63,   62,   62,   62,   61,
 /*   310 */    59,  265,  395,  601,  872,  871,   53,   54,  167,  872,
 /*   320 */   871,  833,  840,  806,   55, 1112,  873,  827,  413,  596,
 /*   330 */   477,  829,    2, 1112,  532,  754,  873,  828, 1112,  696,
 /*   340 */   175,  526,  833,  842,  871,  841,  232,  875,   23,  845,
 /*   350 */    61,   59,  265,  341,  536,  695,  828,  844,  843,  842,
 /*   360 */   771, 1112,  827,  872,  871,  369, 1329,  873,  122,  571,
 /*   370 */   810, 1329,  179,  596, 1112,  840, 1112, 1112,  601,  256,
 /*   380 */  1217, 1217,  491,  478,  272, 1112,  556, 1112, 1112,  873,
 /*   390 */  1112,  828,  872,  871,  828,  723,  818,   12,  841,  217,
 /*   400 */    58,  178,  872,  871,  557,  556,  378,  536, 1112,  369,
 /*   410 */  1328,  716,  716,  849, 1222, 1328,  874,  756,  373,   67,
 /*   420 */    68,  537,  285, 1217, 1217,  830,  830,   65,   65,   66,
 /*   430 */    66,   66,   66,  556,   64,   64,   64,   64,   63,   63,
 /*   440 */    62,   62,   62,   61,   59,  265,   63,   63,   62,   62,
 /*   450 */    62,   61,   59,  265,   39,  143,  174,   74,  622,  787,
 /*   460 */   442,  165,  377, 1217, 1217,  833,  807,  670,  263,   67,
 /*   470 */    68,  537,  285,   69,  873,  830,  830,   65,   65,   66,
 /*   480 */    66,   66,   66,   73,   64,   64,   64,   64,   63,   63,
 /*   490 */    62,   62,   62,   61,   59,  265,  342,  768,   78,  645,
 /*   500 */   196,  746,   67,   68,  537,  285, 1217, 1217,  830,  830,
 /*   510 */    65,   65,   66,   66,   66,   66,  874,   64,   64,   64,
 /*   520 */    64,   63,   63,   62,   62,   62,   61,   59,  265,  800,
 /*   530 */   253,  252,  251,  874,  824,  856,  616,   80,  270,  872,
 /*   540 */   871,  799,  669,   45,  305,  448,  315,  360,  807,  527,
 /*   550 */   263,  855,  655,   92,  287,  481,  873,  874,  539,  329,
 /*   560 */   853, 1217, 1217,  383,  116,  873,  617,   52,  619,   50,
 /*   570 */  1222,  618, 1222,   66,   66,   66,   66,   40,   64,   64,
 /*   580 */    64,   64,   63,   63,   62,   62,   62,   61,   59,  265,
 /*   590 */   457,  874,  823,  433,  593,  116,  874, 1223,  822,  683,
 /*   600 */    67,   68,  537,  285, 1217, 1217,  830,  830,   65,   65,
 /*   610 */    66,   66,   66,   66,  763,   64,   64,   64,   64,   63,
 /*   620 */    63,   62,   62,   62,   61,   59,  265,  874,    1,  468,
 /*   630 */   368,  595,  500,  839,  351,  816,  763,  350,  851,  872,
 /*   640 */   871,  525,  763, 1217, 1217,  682,  677,  467,  873,  592,
 /*   650 */   592,  873,   67,   68,  537,  285,  872,  871,  830,  830,
 /*   660 */    65,   65,   66,   66,   66,   66,  874,   64,   64,   64,
 /*   670 */    64,   63,   63,   62,   62,   62,   61,   59,  265,  122,
 /*   680 */   872,  871,   67,   68,  537,  285, 1217, 1217,  830,  830,
 /*   690 */    65,   65,   66,   66,   66,   66,   57,   64,   64,   64,
 /*   700 */    64,   63,   63,   62,   62,   62,   61,   59,  265,  776,
 /*   710 */   351,  141,  258,  668,  872,  871,  669, 1288,  164,  872,
 /*   720 */   871,  464,  461,  460,  873,  873,  852,   92,  826,  801,
 /*   730 */   873,  561,  776,  870,  398,  763,  610,  611,  429,  459,
 /*   740 */   868,  687,  874,  651,  651,  520,  805,  790,  499,  869,
 /*   750 */   872,  871,  274, 1223,  656, 1223,  874,  763,   67,   68,
 /*   760 */   537,  285,  199,  763,  830,  830,   65,   65,   66,   66,
 /*   770 */    66,   66,   81,   64,   64,   64,   64,   63,   63,   62,
 /*   780 */    62,   62,   61,   59,  265,   67,   68,  537,  285,  872,
 /*   790 */   871,  830,  830,   65,   65,   66,   66,   66,   66,  804,
 /*   800 */    64,   64,   64,   64,   63,   63,   62,   62,   62,   61,
 /*   810 */    59,  265,  538, 1288,  878,  874,  874,  586,  341,  542,
 /*   820 */   465,  524,   44,  790,  529,  341,  182,  508,  758,    4,
 /*   830 */   645,  434,  873,  490,  874,   67,   68,  537,  285,  873,
 /*   840 */   833,  830,  830,   65,   65,   66,   66,   66,   66,  874,
 /*   850 */    64,   64,   64,   64,   63,   63,   62,   62,   62,   61,
 /*   860 */    59,  265,  494,  840,  534,  872,  871,  578,   80,  400,
 /*   870 */    87,  122,  119,  443,  337,  792,  854,  873,  175,  872,
 /*   880 */   871,   81,  840,  278,  435,  820,  841,  217,  704,  489,
 /*   890 */   373,   56,  336,  261,  593,  536,  873,  577,  874,  576,
 /*   900 */   257,  719,  575,  479,  977,  841,  232,  493,   53,   54,
 /*   910 */   441,  248,  247,  757,  536,  175,   55,  181,  126,  338,
 /*   920 */   470,  333,  469,  166,    2, 1229,  715,   71,  545,  828,
 /*   930 */   368,  594,  789,  526,  440,  842,  871,  331,  842,  872,
 /*   940 */   871,  845,  491,  492,  845,  345,   76,  787,  828,  844,
 /*   950 */   843,  842,  844,  843,  842,   79,  141,  872,  871,  874,
 /*   960 */   339,  711, 1224,  833, 1337, 1337,  378,  669,  156,  158,
 /*   970 */   873,  118,  872,  871,  198,  832,   14,  549,   92,  684,
 /*   980 */   685,  873,  343,  828,  659,  765,  828,  689,  818,   12,
 /*   990 */    67,   68,  537,  285,  660,  791,  830,  830,   65,   65,
 /*  1000 */    66,   66,   66,   66,  258,   64,   64,   64,   64,   63,
 /*  1010 */    63,   62,   62,   62,   61,   59,  265,   67,   68,  537,
 /*  1020 */   285,  872,  871,  830,  830,   65,   65,   66,   66,   66,
 /*  1030 */    66,  604,   64,   64,   64,   64,   63,   63,   62,   62,
 /*  1040 */    62,   61,   59,  265,   67,   68,  537,  285,  648,  705,
 /*  1050 */   830,  830,   65,   65,   66,   66,   66,   66,  848,   64,
 /*  1060 */    64,   64,   64,   63,   63,   62,   62,   62,   61,   59,
 /*  1070 */   265,  709,  475,  758,    4,  521,  582,  874,   67,   68,
 /*  1080 */   537,  285,  872,  871,  830,  830,   65,   65,   66,   66,
 /*  1090 */    66,   66,   51,   64,   64,   64,   64,   63,   63,   62,
 /*  1100 */    62,   62,   61,   59,  265,  339,  711,  516,  874,   67,
 /*  1110 */    68,  537,  285,  122,  710,  830,  830,   65,   65,   66,
 /*  1120 */    66,   66,   66,  582,   64,   64,   64,   64,   63,   63,
 /*  1130 */    62,   62,   62,   61,   59,  265, 1380,  192,  543,    3,
 /*  1140 */   874,   67,   68,  537,  285,  708,   48,  830,  830,   65,
 /*  1150 */    65,   66,   66,   66,   66,  442,   64,   64,   64,   64,
 /*  1160 */    63,   63,   62,   62,   62,   61,   59,  265,  788,  873,
 /*  1170 */   156,  155,   67,   68,  537,  285,  384,  691,  830,  830,
 /*  1180 */    65,   65,   66,   66,   66,   66,  514,   64,   64,   64,
 /*  1190 */    64,   63,   63,   62,   62,   62,   61,   59,  265, 1226,
 /*  1200 */   872,  871,  874,   67,   68,  537,  285,  874,  197,  830,
 /*  1210 */   830,   65,   65,   66,   66,   66,   66,  786,   64,   64,
 /*  1220 */    64,   64,   63,   63,   62,   62,   62,   61,   59,  265,
 /*  1230 */   515,  872,  871,  268,   67,   68,  537,  285,   47,  328,
 /*  1240 */   830,  830,   65,   65,   66,   66,   66,   66,  752,   64,
 /*  1250 */    64,   64,   64,   63,   63,   62,   62,   62,   61,   59,
 /*  1260 */   265,   46,  874,  872,  871,  426,   67,   68,  537,  285,
 /*  1270 */   732,   28,  830,  830,   65,   65,   66,   66,   66,   66,
 /*  1280 */    42,   64,   64,   64,   64,   63,   63,   62,   62,   62,
 /*  1290 */    61,   59,  265,  874, 1303,   67,   68,  537,  285,  748,
 /*  1300 */   495,  830,  830,   65,   65,   66,   66,   66,   66,  863,
 /*  1310 */    64,   64,   64,   64,   63,   63,   62,   62,   62,   61,
 /*  1320 */    59,  265,  538, 1301,  800,  872,  871,  307,  751,  605,
 /*  1330 */   872,  871,   44,   20,  529,  423,  799,  502,   67,   68,
 /*  1340 */   537,  285,  873,  678,  830,  830,   65,   65,   66,   66,
 /*  1350 */    66,   66,  840,   64,   64,   64,   64,   63,   63,   62,
 /*  1360 */    62,   62,   61,   59,  265,  840,  873,  510,  538,  861,
 /*  1370 */    44,  874,  116,  517,  534,  841,  232,  351,  117,  873,
 /*  1380 */   529,  873,  751,  502,  536,  872,  871,  501,  841,  232,
 /*  1390 */   874,  873,  751,  874,  693,  820,  873,  536,  600,  402,
 /*  1400 */   840,   56,  654,    6,  649,   72,  873,  510,  874,  747,
 /*  1410 */   735,  122,  491,  482,  873,  509,  872,  871,   53,   54,
 /*  1420 */   534,  873,   77,  841,  123,  407,   55,  156,  154,  736,
 /*  1430 */   833,   19,  536,  501,    2,  773,  378,  833,  309,  828,
 /*  1440 */   122,  820,  122,  526,  735,  842,  871,   56, 1237,  378,
 /*  1450 */   538,  845,  874,  393,  568,  778,  728,  874,  828,  844,
 /*  1460 */   843,  842,  529,  392,   53,   54,  302,  874,  873,  135,
 /*  1470 */   874,   44,   55,  512,  569,  414,  122,  874,  258,    5,
 /*  1480 */     2,  511,  780,  772,  787,  828,  840,  767,  606,  526,
 /*  1490 */   803,  842,  871,  828,  872,  871,  828,  845,  818,   12,
 /*  1500 */   873,  840,  534,  766,  828,  844,  843,  842,  763,  841,
 /*  1510 */   123,   79,  668,  872,  871,  873,  872,  871,  536,   81,
 /*  1520 */   674,  673,  779,  820,  841,  232,  507,  284,  283,   56,
 /*  1530 */   763,  872,  871,  536,  455,  621,  763,  874,  408,  828,
 /*  1540 */   764,  874,  828,   18,  818,   12,   53,   54,  873,  415,
 /*  1550 */   810,  174,  874,  833,   55,  606,  354,  743,  347,  177,
 /*  1560 */   833,  280,    2,  284,  283,  796,  874,  828,  812,  811,
 /*  1570 */   787,  526,   17,  842,  871,  872,  871,  859,  874,  845,
 /*  1580 */   872,  871,   81,  812,  811,  378,  828,  844,  843,  842,
 /*  1590 */   872,  871,  646,  872,  871,  565,  746,   16,  874,  751,
 /*  1600 */   872,  871, 1337, 1337,  812,  811,  598,  538,  567,   11,
 /*  1610 */   566,  370,  998,  873,  731,  833,  643,  657, 1273,  529,
 /*  1620 */   439,  828,  502,  286,  828,  175,  818,   12,   67,   38,
 /*  1630 */   537,  285,  833,   22,  830,  830,   65,   65,   66,   66,
 /*  1640 */    66,   66,  498,   64,   64,   64,   64,   63,   63,   62,
 /*  1650 */    62,   62,   61,   59,  265,  840,  446,   58,  553,  534,
 /*  1660 */   872,  871,  386,  249,  872,  871,   22,  451,  840,  873,
 /*  1670 */   269,  324,  503,  612,  173,  872,  871,  553,  841,  232,
 /*  1680 */   820,  873,  873,  562,  115,  295,   56,  536,  827,  872,
 /*  1690 */   871,  841,  123,  840,  410,  821,  406,  815,  814,  873,
 /*  1700 */   536,  872,  871,   53,   54,  553,  874,  873,  528,  815,
 /*  1710 */   814,   55,  763,  742,  740,  279,  841,  232,  172,    2,
 /*  1720 */   821,  872,  871,  827,  828,  536,  530,   90,  526,  739,
 /*  1730 */   842,  871,  665,  840,  763,   81,  845,  840,  833,  378,
 /*  1740 */   763,  176,  874,  828,  844,  843,  842,  873,  171,  562,
 /*  1750 */   874,  873,  787,  401,  821,  833,  841,  232,  420,  170,
 /*  1760 */   841,  225,  591,  777,    4,  536,  421,  675,  751,  536,
 /*  1770 */   874,  614,  873,  810,  880,  874,  730,  378,  828,  574,
 /*  1780 */   873,  828,  873,  818,   12,  810,   68,  537,  285,  874,
 /*  1790 */   129,  830,  830,   65,   65,   66,   66,   66,   66,  394,
 /*  1800 */    64,   64,   64,   64,   63,   63,   62,   62,   62,   61,
 /*  1810 */    59,  265,  538,  873,  881,    3,  485,  518,  113,   81,
 /*  1820 */   348,  787,  762,    4,  529,  761,    4,  537,  285,  872,
 /*  1830 */   871,  830,  830,   65,   65,   66,   66,   66,   66,  428,
 /*  1840 */    64,   64,   64,   64,   63,   63,   62,   62,   62,   61,
 /*  1850 */    59,  265,  874,  747,  547,  840,  874,  747,  840,  647,
 /*  1860 */   759,    4,   72, 1064,  534,  872,  871,  735,  873,  873,
 /*  1870 */   876,  271,  873,  872,  871,  864,    7,  634,  841,  123,
 /*  1880 */   747,  841,  123,  840,  873,  820,  736,  536,  725,  873,
 /*  1890 */   536,   56,  647,  872,  871,  760,    4,  873,  872,  871,
 /*  1900 */   741,  735, 1337, 1337,  738,  653,  841,  232,   53,   54,
 /*  1910 */   874,  747,  872,  871,  538,  536,   55,  874,  391,  483,
 /*  1920 */   702,  724,  701,  840,    2,  690,  529,  737,  389,  828,
 /*  1930 */   862,  387,  873,  526,  584,  842,  871,  873,  860,  787,
 /*  1940 */   840,  845,  787,  496,  873,  840,  841,  203,  828,  844,
 /*  1950 */   843,  842,  873,   15,  873,  536,  857,  418,  277,  873,
 /*  1960 */   581,  587,  722,  841,  213,  473,  534,  378,  841,  235,
 /*  1970 */   873,  873,  536,  718,  717,  872,  871,  536,  121,  872,
 /*  1980 */   871,  840,  850,  828,  713,  840,  828,  820,  818,   12,
 /*  1990 */   310,  874,  559,   56,   37,  873,  873,  120,  840,  873,
 /*  2000 */   874,  838,  138,  344,  841,  233,  276,  787,  841,  243,
 /*  2010 */    53,   54,  873,  536,   25,  873,  538,  536,   55,  681,
 /*  2020 */   559,  841,  242,  795,  787,  840,    2,  327,  529,  787,
 /*  2030 */   536,  828,  840,  872,  871,  526,   36,  842,  871,  873,
 /*  2040 */   872,  871,  874,  845,  825,  531,  873,  840,  841,  244,
 /*  2050 */   828,  844,  843,  842,  466,  841,  245,  536,  873,  873,
 /*  2060 */   874,  873,  258,  753,  536,  787,  749,  165,  534,  787,
 /*  2070 */   841,  264,  744,  840,  287,  481,  640,  873,  840,  536,
 /*  2080 */   873,  463,  787,  874,  168,  828,  873,  873,  828,  820,
 /*  2090 */   818,   12,  873,  572,  672,   56,  841,  353,  873,   86,
 /*  2100 */   458,  841,  241,  488,   85,  536,  330,  456,  585,  787,
 /*  2110 */   536,  840,   53,   54,  872,  871,  787,  873,  538,   24,
 /*  2120 */    55,   84,  163,  872,  871,  873,  336,  840,    2,  162,
 /*  2130 */   529,  787,  350,  828,  841,  352,  555,  526,  453,  842,
 /*  2140 */   871,  873,  585,  536,  840,  845,  873,  874,  650,  840,
 /*  2150 */   841,  212,  828,  844,  843,  842,  161,  787,  873,  536,
 /*  2160 */   712,  195,  787,  873,  555,  872,  871,  841,  230,  383,
 /*  2170 */   534,  405,  841,  234,  873,  331,  536,  638,  658,  159,
 /*  2180 */   874,  536,   10,  872,  871,  840,  874,  828,  157,  840,
 /*  2190 */   828,  820,  818,   12, 1227,  787,  638,   56,  757,  873,
 /*  2200 */   632,  103,  840,  873,  874,  105,  872,  871,  841,  376,
 /*  2210 */    35,  787,  841,  375,   53,   54,  873,  536,   34,  632,
 /*  2220 */   538,  536,   55,   33,  794,  841,  374,   32,  787,  840,
 /*  2230 */     2, 1229,  529,  787,  536,  828,  840,  102,  637,  526,
 /*  2240 */   701,  842,  871,  873,  874,  390,  388,  845, 1220,  101,
 /*  2250 */   873,  840,  841,  229,  828,  844,  843,  842,  626,  841,
 /*  2260 */   215,  536,  874,  599,  306,  873,  620,  332,  536,  787,
 /*  2270 */   872,  871,  534,  787,  841,  228,  688,  615, 1231,  110,
 /*  2280 */   430,  873,  613,  536,  175,  304,  787,  607,   13,  828,
 /*  2290 */   873,  840,  828,  820,  818,   12,  789,  417,  874,   56,
 /*  2300 */  1231,  583,  550,  872,  871,  873, 1231,  189,  301,  872,
 /*  2310 */   871,  873,  666,  787,  841,  227,   53,   54,  152,  326,
 /*  2320 */   787,  624,  840,  536,   55,  200,  873,  872,  871,  150,
 /*  2330 */   588,  149,    2,  873,  416,  787,  873,  828,  580,  840,
 /*  2340 */   624,  526,  148,  842,  871,  841,  214,  564,  873,  845,
 /*  2350 */   652,  874, 1231,  873,  536,  840,  828,  844,  843,  842,
 /*  2360 */  1231,  579,  841,  240,  873, 1231,  840,  872,  871,  873,
 /*  2370 */   321,  536,  147,  874,  112,  787,  563,   96,  841,  239,
 /*  2380 */   873,  144,  145,  409,  873,  872,  871,  536, 1231,  841,
 /*  2390 */   211,  828,  544,  447,  828,  840,  818,   12,  536,  644,
 /*  2400 */    94, 1231,  275, 1231, 1231,  258,  787,  873,  250,  873,
 /*  2410 */   254,  874, 1231,  873, 1231, 1231,  641, 1231,  841,  124,
 /*  2420 */   840,  872,  871,  787,  840,  382,  114,  536,  350,  579,
 /*  2430 */   873,  381,  874,  633,  873, 1231,  187,  840,  873,  787,
 /*  2440 */   840,  877,  873,  841,  210,  186,  867,  841,  208,  866,
 /*  2450 */   787,  873,  536,  541,  873,  865,  536,  840,  108,  840,
 /*  2460 */   841,  236,  454,  841,  238,  184,  540,  273,  589,  536,
 /*  2470 */    30,  873,  536,  873,  872,  871,  424,  874,  840,  787,
 /*  2480 */   841,  231,  841,  237,   75,  180,  836,  589,  287,  536,
 /*  2490 */   873,  536,  873,  840,   23,  840,  872,  871,  350,  840,
 /*  2500 */   350,  841,  226,  356,  787,  497,  355,  873,  787,  873,
 /*  2510 */   536,  835,  873,  873,  873,  551,  841,  223,  841,  207,
 /*  2520 */   794,  787,  841,  206,  787,  536,  840,  536,  840,  873,
 /*  2530 */   874,  536,  412,  874,  872,  871,  380,  397,  194,  396,
 /*  2540 */   873,  787,  873,  787,  750,  359,  873,  642,   43,  841,
 /*  2550 */   205,  841,  204,  535,  834,  872,  871,  840,  536,  873,
 /*  2560 */   536,  840,  787,  874,  840,  874,  265,  873,  636,   70,
 /*  2570 */   349,  873,   88,  282,  262,  873,  404,  787,  873,  787,
 /*  2580 */   841,  216,  522,  787,  841,  221,  784,  841,  220,  536,
 /*  2590 */   794,  840,  794,  536,  840,  322,  536,  444,  281,  513,
 /*  2600 */   872,  871,  303,   49,  785,  873,  346,  840,  873,  873,
 /*  2610 */   787,  873,  787,  631,  841,  125,  873,  841,  219,  840,
 /*  2620 */   300,  873,  294,  536,  403,  781,  536,  775,  255,  769,
 /*  2630 */   841,  218,  290,  873,  873,  140,  873,  139,  840,  536,
 /*  2640 */   484,  787,  841,  224,  840,  787,  873,  546,  787,  481,
 /*  2650 */   714,  536,  873,  872,  871,  167,  872,  871,  873,  703,
 /*  2660 */   840,  841,  222,  291,  471,  698,  546,  841,  209,  602,
 /*  2670 */   536,  697,  399,  334,  873,  787,  536,  873,  787,  694,
 /*  2680 */   693,  692,  372,  841,   93,  671,  872,  871,  872,  871,
 /*  2690 */   106,  787,  487,  664,  663,  371,  662,  661,  260,  590,
 /*  2700 */   137,  552,  452,  787,  160,  320,  431,   31,  449,  318,
 /*  2710 */   316,  317,  201,  136,  111,  639,  635,  104,  313,  312,
 /*  2720 */   193,  308,  787,  311,  438,  629,  623,  437,  787,  134,
 /*  2730 */   153,  151,  100,  603,  133,  419,   99,   98,   97,  573,
 /*  2740 */    30,  146,  560,  131,  787,   29,  130,  425,  548,  422,
 /*  2750 */   385,  558,  554,  625,   26,  202,  357,  191,  190,  798,
 /*  2760 */   335,  246,  462,  689,  314,    9,  755,  628,  367,  745,
 /*  2770 */   831,  808,  319,  797,   60,  445,  676,   81,  686,  533,
 /*  2780 */   680,  679,   95,  667,  707,  519,  813,  809,  706,  630,
 /*  2790 */    83,  188,  358,  874, 1381,   41, 1381, 1381, 1381, 1381,
 /*  2800 */  1381, 1381, 1381, 1381,  259, 1381,  450, 1381, 1381, 1381,
 /*  2810 */  1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
 /*  2820 */  1381,  597, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
 /*  2830 */  1381, 1381, 1381,  774,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     4,  131,  109,   31,  134,  135,  136,   50,   81,   82,
 /*    10 */    83,   84,   16,   41,   87,   88,   89,   90,   91,   92,
 /*    20 */    93,   94,  152,   96,   97,   98,   99,  100,  101,  102,
 /*    30 */   103,  104,  105,  106,  107,  102,  109,  117,   81,   82,
 /*    40 */    83,   84,  122,  113,   87,   88,   89,   90,   91,   92,
 /*    50 */    93,   94,   56,   96,   97,   98,   99,  100,  101,  102,
 /*    60 */   103,  104,  105,  106,  107,   76,  109,  102,  103,  104,
 /*    70 */   105,  106,  107,   77,  122,   91,   92,   93,   94,   83,
 /*    80 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*    90 */   106,  107,  159,    4,    7,  162,  100,  101,  102,   12,
 /*   100 */   117,  122,  203,    0,  108,  109,  211,  128,   68,   44,
 /*   110 */     4,   71,  116,  117,  122,  117,  217,  121,  122,  203,
 /*   120 */   122,  125,   16,  127,  128,  226,  227,   40,  212,  133,
 /*   130 */    24,    4,   29,  217,  235,    4,  140,  141,  142,  143,
 /*   140 */   169,  145,  153,  248,  249,  166,  167,    9,   83,   11,
 /*   150 */   158,   13,  160,  161,  158,  115,  160,  161,  203,    4,
 /*   160 */   164,   23,   56,  192,   26,  169,  170,  171,  172,  173,
 /*   170 */   174,  175,  217,  278,  178,  280,  180,  181,  283,  127,
 /*   180 */   191,  226,  227,   77,  159,  133,  287,  162,  192,   83,
 /*   190 */   235,    4,   54,  141,  142,  143,    4,   59,    4,  304,
 /*   200 */   305,  148,   64,   65,   79,  116,  100,  101,   70,   19,
 /*   210 */   121,   73,  109,   75,  108,  109,  127,  128,  263,  264,
 /*   220 */     4,  322,  116,  117,  325,  185,  122,  121,  122,  140,
 /*   230 */   177,  125,   16,  127,  128,   45,  116,    5,   68,  133,
 /*   240 */     4,   71,  287,  116,  155,  118,  140,  141,  142,  143,
 /*   250 */   112,  145,  114,  119,  127,  166,  167,   67,  127,  128,
 /*   260 */   250,  251,   30,  253,  158,  117,  160,  161,   36,    4,
 /*   270 */   122,  140,   56,  169,  203,  169,  170,  171,  172,    4,
 /*   280 */   174,  175,  127,  128,  178,  115,  180,  181,  217,  102,
 /*   290 */   163,  153,   60,   77,  223,  224,   64,  122,  192,   83,
 /*   300 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*   310 */   106,  107,  203,  121,  127,  128,  100,  101,  193,  127,
 /*   320 */   128,  127,  203,  129,  108,  109,  217,  140,  190,   80,
 /*   330 */   211,  133,  116,  117,  179,  117,  217,  121,  122,   21,
 /*   340 */   122,  125,    4,  127,  128,  226,  227,  111,  173,  133,
 /*   350 */   105,  106,  107,  203,  235,   37,  140,  141,  142,  143,
 /*   360 */   170,  145,  175,  127,  128,  116,  117,  217,  249,  298,
 /*   370 */   299,  122,  119,   80,  158,  203,  160,  161,  186,  116,
 /*   380 */    42,   43,  263,  264,  275,  169,  121,  171,  172,  217,
 /*   390 */   174,  175,  127,  128,  178,  117,  180,  181,  226,  227,
 /*   400 */   122,  122,  127,  128,  139,  140,  287,  235,  192,  116,
 /*   410 */   117,   42,   43,  138,   26,  122,    4,  267,  268,   81,
 /*   420 */    82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
 /*   430 */    92,   93,   94,  168,   96,   97,   98,   99,  100,  101,
 /*   440 */   102,  103,  104,  105,  106,  107,  100,  101,  102,  103,
 /*   450 */   104,  105,  106,  107,   85,   86,  118,   90,   60,  287,
 /*   460 */   203,   43,  215,   42,   43,  127,  219,  220,  221,   81,
 /*   470 */    82,   83,   84,   52,  217,   87,   88,   89,   90,   91,
 /*   480 */    92,   93,   94,  116,   96,   97,   98,   99,  100,  101,
 /*   490 */   102,  103,  104,  105,  106,  107,  324,  325,  116,  211,
 /*   500 */   118,  163,   81,   82,   83,   84,   85,   86,   87,   88,
 /*   510 */    89,   90,   91,   92,   93,   94,    4,   96,   97,   98,
 /*   520 */    99,  100,  101,  102,  103,  104,  105,  106,  107,   10,
 /*   530 */   146,  147,  148,    4,  117,  123,  248,  249,  281,  127,
 /*   540 */   128,   22,  203,  122,  146,  147,  148,  208,  219,  220,
 /*   550 */   221,  203,  213,  214,  156,  157,  217,    4,  210,  117,
 /*   560 */   212,   42,   43,  145,  122,  217,  278,  182,  280,  184,
 /*   570 */   182,  283,  184,   91,   92,   93,   94,   95,   96,   97,
 /*   580 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   590 */   117,    4,  117,  305,   80,  122,    4,   26,  117,   15,
 /*   600 */    81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
 /*   610 */    91,   92,   93,   94,   35,   96,   97,   98,   99,  100,
 /*   620 */   101,  102,  103,  104,  105,  106,  107,    4,  116,   45,
 /*   630 */   116,  117,   53,  121,  203,  117,   57,  203,  225,  127,
 /*   640 */   128,  211,   63,   42,   43,   61,  233,  234,  217,  120,
 /*   650 */   121,  217,   81,   82,   83,   84,  127,  128,   87,   88,
 /*   660 */    89,   90,   91,   92,   93,   94,    4,   96,   97,   98,
 /*   670 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  249,
 /*   680 */   127,  128,   81,   82,   83,   84,   85,   86,   87,   88,
 /*   690 */    89,   90,   91,   92,   93,   94,  116,   96,   97,   98,
 /*   700 */    99,  100,  101,  102,  103,  104,  105,  106,  107,   32,
 /*   710 */   203,  203,  288,  126,  127,  128,  203,   13,  131,  127,
 /*   720 */   128,  134,  135,  136,  217,  217,  213,  214,  175,  295,
 /*   730 */   217,  307,   55,   21,  150,   35,  146,  147,  148,  152,
 /*   740 */    28,  149,    4,  120,  121,  314,  117,  316,  169,   37,
 /*   750 */   127,  128,  239,  182,  241,  184,    4,   57,   81,   82,
 /*   760 */    83,   84,  116,   63,   87,   88,   89,   90,   91,   92,
 /*   770 */    93,   94,   73,   96,   97,   98,   99,  100,  101,  102,
 /*   780 */   103,  104,  105,  106,  107,   81,   82,   83,   84,  127,
 /*   790 */   128,   87,   88,   89,   90,   91,   92,   93,   94,  117,
 /*   800 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*   810 */   106,  107,    4,  109,  195,    4,    4,  155,  203,  200,
 /*   820 */    34,  314,  122,  316,   16,  203,   74,  319,  320,  321,
 /*   830 */   211,  132,  217,  211,    4,   81,   82,   83,   84,  217,
 /*   840 */     4,   87,   88,   89,   90,   91,   92,   93,   94,    4,
 /*   850 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*   860 */   106,  107,   38,  203,   56,  127,  128,  248,  249,   83,
 /*   870 */    58,  249,  118,  117,  133,   44,  124,  217,  122,  127,
 /*   880 */   128,   73,  203,  268,   24,   77,  226,  227,   77,  267,
 /*   890 */   268,   83,  151,  107,   80,  235,  217,  278,    4,  280,
 /*   900 */   250,  251,  283,  253,  118,  226,  227,   83,  100,  101,
 /*   910 */   117,  100,  101,  122,  235,  122,  108,  131,  132,  133,
 /*   920 */   134,  135,  136,  137,  116,  117,  293,  116,  309,  121,
 /*   930 */   116,  117,  120,  125,  284,  127,  128,  151,  127,  127,
 /*   940 */   128,  133,  263,  264,  133,  229,  116,  287,  140,  141,
 /*   950 */   142,  143,  141,  142,  143,  164,  203,  127,  128,    4,
 /*   960 */   327,  328,   26,  127,  156,  157,  287,  203,  118,  119,
 /*   970 */   217,  122,  127,  128,  116,  139,  116,  213,  214,  132,
 /*   980 */   133,  217,  322,  175,  233,  325,  178,  236,  180,  181,
 /*   990 */    81,   82,   83,   84,  243,  117,   87,   88,   89,   90,
 /*  1000 */    91,   92,   93,   94,  288,   96,   97,   98,   99,  100,
 /*  1010 */   101,  102,  103,  104,  105,  106,  107,   81,   82,   83,
 /*  1020 */    84,  127,  128,   87,   88,   89,   90,   91,   92,   93,
 /*  1030 */    94,  186,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  1040 */   104,  105,  106,  107,   81,   82,   83,   84,  154,  217,
 /*  1050 */    87,   88,   89,   90,   91,   92,   93,   94,  226,   96,
 /*  1060 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1070 */   107,  293,  319,  320,  321,  211,  121,    4,   81,   82,
 /*  1080 */    83,   84,  127,  128,   87,   88,   89,   90,   91,   92,
 /*  1090 */    93,   94,  183,   96,   97,   98,   99,  100,  101,  102,
 /*  1100 */   103,  104,  105,  106,  107,  327,  328,   83,    4,   81,
 /*  1110 */    82,   83,   84,  249,  117,   87,   88,   89,   90,   91,
 /*  1120 */    92,   93,   94,  168,   96,   97,   98,   99,  100,  101,
 /*  1130 */   102,  103,  104,  105,  106,  107,  196,  197,  198,  199,
 /*  1140 */     4,   81,   82,   83,   84,  117,  183,   87,   88,   89,
 /*  1150 */    90,   91,   92,   93,   94,  203,   96,   97,   98,   99,
 /*  1160 */   100,  101,  102,  103,  104,  105,  106,  107,   26,  217,
 /*  1170 */   118,  119,   81,   82,   83,   84,  205,  117,   87,   88,
 /*  1180 */    89,   90,   91,   92,   93,   94,  162,   96,   97,   98,
 /*  1190 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  182,
 /*  1200 */   127,  128,    4,   81,   82,   83,   84,    4,  117,   87,
 /*  1210 */    88,   89,   90,   91,   92,   93,   94,  117,   96,   97,
 /*  1220 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  1230 */   162,  127,  128,  281,   81,   82,   83,   84,  164,  117,
 /*  1240 */    87,   88,   89,   90,   91,   92,   93,   94,  175,   96,
 /*  1250 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1260 */   107,  164,    4,  127,  128,  294,   81,   82,   83,   84,
 /*  1270 */   166,  118,   87,   88,   89,   90,   91,   92,   93,   94,
 /*  1280 */   145,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  1290 */   105,  106,  107,    4,  109,   81,   82,   83,   84,  163,
 /*  1300 */   165,   87,   88,   89,   90,   91,   92,   93,   94,  111,
 /*  1310 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1320 */   106,  107,    4,  109,   10,  127,  128,  117,  203,   66,
 /*  1330 */   127,  128,  122,   14,   16,   72,   22,   19,   81,   82,
 /*  1340 */    83,   84,  217,  140,   87,   88,   89,   90,   91,   92,
 /*  1350 */    93,   94,  203,   96,   97,   98,   99,  100,  101,  102,
 /*  1360 */   103,  104,  105,  106,  107,  203,  217,  203,    4,  111,
 /*  1370 */   122,    4,  122,  211,   56,  226,  227,  203,  122,  217,
 /*  1380 */    16,  217,  203,   19,  235,  127,  128,   69,  226,  227,
 /*  1390 */     4,  217,  203,    4,  144,   77,  217,  235,  135,  274,
 /*  1400 */   203,   83,  211,   85,  211,  116,  217,  203,    4,  219,
 /*  1410 */   121,  249,  263,  264,  217,  118,  127,  128,  100,  101,
 /*  1420 */    56,  217,  116,  226,  227,  263,  108,  118,  119,  140,
 /*  1430 */     4,   14,  235,   69,  116,   47,  287,    4,  211,  121,
 /*  1440 */   249,   77,  249,  125,  155,  127,  128,   83,  185,  287,
 /*  1450 */     4,  133,    4,  274,  203,  117,  266,    4,  140,  141,
 /*  1460 */   142,  143,   16,  274,  100,  101,  117,    4,  217,  122,
 /*  1470 */     4,  122,  108,  276,  223,  224,  249,    4,  288,   82,
 /*  1480 */   116,  317,  318,   62,  287,  121,  203,   32,  121,  125,
 /*  1490 */   316,  127,  128,  175,  127,  128,  178,  133,  180,  181,
 /*  1500 */   217,  203,   56,   62,  140,  141,  142,  143,   35,  226,
 /*  1510 */   227,  164,  126,  127,  128,  217,  127,  128,  235,   73,
 /*  1520 */   217,  218,  318,   77,  226,  227,   53,  100,  101,   83,
 /*  1530 */    57,  127,  128,  235,  203,   26,   63,    4,  207,  175,
 /*  1540 */    55,    4,  178,   14,  180,  181,  100,  101,  217,  298,
 /*  1550 */   299,  118,    4,  127,  108,  188,  260,  168,  262,  276,
 /*  1560 */   127,  263,  116,  100,  101,  139,    4,  121,  141,  142,
 /*  1570 */   287,  125,   14,  127,  128,  127,  128,  111,    4,  133,
 /*  1580 */   127,  128,   73,  141,  142,  287,  140,  141,  142,  143,
 /*  1590 */   127,  128,  188,  127,  128,  132,  163,   14,    4,  203,
 /*  1600 */   127,  128,  156,  157,  141,  142,  117,    4,  145,   14,
 /*  1610 */   147,  122,  117,  217,  166,    4,  163,  122,  109,   16,
 /*  1620 */   117,  175,   19,  255,  178,  122,  180,  181,   81,   82,
 /*  1630 */    83,   84,    4,  265,   87,   88,   89,   90,   91,   92,
 /*  1640 */    93,   94,  169,   96,   97,   98,   99,  100,  101,  102,
 /*  1650 */   103,  104,  105,  106,  107,  203,  255,  122,  121,   56,
 /*  1660 */   127,  128,  310,  311,  127,  128,  265,  203,  203,  217,
 /*  1670 */   274,  207,   69,  140,   14,  127,  128,  140,  226,  227,
 /*  1680 */    77,  217,  217,  121,  116,  203,   83,  235,  140,  127,
 /*  1690 */   128,  226,  227,  203,   29,    5,  222,  223,  224,  217,
 /*  1700 */   235,  127,  128,  100,  101,  168,    4,  217,  222,  223,
 /*  1710 */   224,  108,   35,   38,  140,  263,  226,  227,  117,  116,
 /*  1720 */    30,  127,  128,  175,  121,  235,   36,  116,  125,  155,
 /*  1730 */   127,  128,  138,  203,   57,   73,  133,  203,  127,  287,
 /*  1740 */    63,  276,    4,  140,  141,  142,  143,  217,  117,  187,
 /*  1750 */     4,  217,  287,  263,   64,  127,  226,  227,  203,  117,
 /*  1760 */   226,  227,  207,  320,  321,  235,  203,  139,  203,  235,
 /*  1770 */     4,  109,  217,  299,  109,    4,  166,  287,  175,  297,
 /*  1780 */   217,  178,  217,  180,  181,  299,   82,   83,   84,    4,
 /*  1790 */   119,   87,   88,   89,   90,   91,   92,   93,   94,  203,
 /*  1800 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1810 */   106,  107,    4,  217,  198,  199,  119,  287,  116,   73,
 /*  1820 */   290,  287,  320,  321,   16,  320,  321,   83,   84,  127,
 /*  1830 */   128,   87,   88,   89,   90,   91,   92,   93,   94,  274,
 /*  1840 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1850 */   106,  107,    4,  219,  203,  203,    4,  219,  203,  121,
 /*  1860 */   320,  321,  116,  117,   56,  127,  128,  121,  217,  217,
 /*  1870 */   203,  275,  217,  127,  128,  203,  116,  175,  226,  227,
 /*  1880 */   219,  226,  227,  203,  217,   77,  140,  235,  102,  217,
 /*  1890 */   235,   83,  154,  127,  128,  320,  321,  217,  127,  128,
 /*  1900 */   266,  155,  156,  157,  266,  120,  226,  227,  100,  101,
 /*  1910 */     4,  219,  127,  128,    4,  235,  108,    4,  203,  122,
 /*  1920 */   244,  117,  246,  203,  116,  117,   16,  266,  276,  121,
 /*  1930 */   203,  276,  217,  125,  168,  127,  128,  217,  203,  287,
 /*  1940 */   203,  133,  287,  263,  217,  203,  226,  227,  140,  141,
 /*  1950 */   142,  143,  217,  116,  217,  235,  203,  203,  266,  217,
 /*  1960 */   189,  207,  159,  226,  227,  116,   56,  287,  226,  227,
 /*  1970 */   217,  217,  235,  117,  117,  127,  128,  235,  117,  127,
 /*  1980 */   128,  203,  203,  175,  117,  203,  178,   77,  180,  181,
 /*  1990 */   275,    4,  140,   83,  173,  217,  217,  117,  203,  217,
 /*  2000 */     4,  203,   18,  229,  226,  227,   50,  287,  226,  227,
 /*  2010 */   100,  101,  217,  235,  116,  217,    4,  235,  108,    6,
 /*  2020 */   168,  226,  227,  175,  287,  203,  116,  117,   16,  287,
 /*  2030 */   235,  121,  203,  127,  128,  125,  116,  127,  128,  217,
 /*  2040 */   127,  128,    4,  133,  203,  203,  217,  203,  226,  227,
 /*  2050 */   140,  141,  142,  143,  118,  226,  227,  235,  217,  217,
 /*  2060 */     4,  217,  288,  203,  235,  287,  203,   43,   56,  287,
 /*  2070 */   226,  227,  203,  203,  156,  157,  163,  217,  203,  235,
 /*  2080 */   217,   50,  287,    4,  203,  175,  217,  217,  178,   77,
 /*  2090 */   180,  181,  217,  187,    8,   83,  226,  227,  217,  116,
 /*  2100 */    50,  226,  227,  203,  116,  235,  117,   83,  121,  287,
 /*  2110 */   235,  203,  100,  101,  127,  128,  287,  217,    4,  116,
 /*  2120 */   108,  116,  137,  127,  128,  217,  151,  203,  116,  119,
 /*  2130 */    16,  287,  203,  121,  226,  227,  140,  125,   83,  127,
 /*  2140 */   128,  217,  155,  235,  203,  133,  217,    4,  125,  203,
 /*  2150 */   226,  227,  140,  141,  142,  143,  119,  287,  217,  235,
 /*  2160 */   203,  118,  287,  217,  168,  127,  128,  226,  227,  145,
 /*  2170 */    56,  242,  226,  227,  217,  151,  235,  121,  140,  145,
 /*  2180 */     4,  235,   13,  127,  128,  203,    4,  175,  118,  203,
 /*  2190 */   178,   77,  180,  181,  182,  287,  140,   83,  122,  217,
 /*  2200 */   121,  150,  203,  217,    4,  164,  127,  128,  226,  227,
 /*  2210 */    90,  287,  226,  227,  100,  101,  217,  235,   90,  140,
 /*  2220 */     4,  235,  108,   90,  295,  226,  227,   90,  287,  203,
 /*  2230 */   116,  117,   16,  287,  235,  121,  203,  176,  244,  125,
 /*  2240 */   246,  127,  128,  217,    4,   18,   24,  133,  109,  150,
 /*  2250 */   217,  203,  226,  227,  140,  141,  142,  143,  177,  226,
 /*  2260 */   227,  235,    4,  120,  157,  217,  109,  203,  235,  287,
 /*  2270 */   127,  128,   56,  287,  226,  227,  203,  109,   35,   51,
 /*  2280 */    25,  217,   62,  235,  122,  185,  287,   51,  116,  175,
 /*  2290 */   217,  203,  178,   77,  180,  181,  120,  203,    4,   83,
 /*  2300 */    57,  207,  120,  127,  128,  217,   63,  165,  115,  127,
 /*  2310 */   128,  217,  203,  287,  226,  227,  100,  101,  145,  203,
 /*  2320 */   287,  121,  203,  235,  108,  116,  217,  127,  128,  119,
 /*  2330 */   125,  119,  116,  217,  203,  287,  217,  121,  207,  203,
 /*  2340 */   140,  125,  119,  127,  128,  226,  227,  117,  217,  133,
 /*  2350 */   203,    4,  109,  217,  235,  203,  140,  141,  142,  143,
 /*  2360 */   117,  121,  226,  227,  217,  122,  203,  127,  128,  217,
 /*  2370 */   203,  235,  119,    4,  116,  287,  117,  115,  226,  227,
 /*  2380 */   217,  113,  119,   49,  217,  127,  128,  235,  145,  226,
 /*  2390 */   227,  175,   48,  203,  178,  203,  180,  181,  235,  203,
 /*  2400 */   216,  158,  232,  160,  161,  288,  287,  217,  311,  217,
 /*  2410 */   269,    4,  169,  217,  171,  172,  203,  174,  226,  227,
 /*  2420 */   203,  127,  128,  287,  203,  313,  232,  235,  203,  189,
 /*  2430 */   217,  313,    4,  175,  217,  192,  110,  203,  217,  287,
 /*  2440 */   203,  202,  217,  226,  227,  204,  202,  226,  227,  202,
 /*  2450 */   287,  217,  235,  202,  217,   65,  235,  203,  206,  203,
 /*  2460 */   226,  227,   78,  226,  227,  204,  209,  242,  121,  235,
 /*  2470 */   176,  217,  235,  217,  127,  128,  203,    4,  203,  287,
 /*  2480 */   226,  227,  226,  227,  122,  119,  272,  140,  156,  235,
 /*  2490 */   217,  235,  217,  203,  173,  203,  127,  128,  203,  203,
 /*  2500 */   203,  226,  227,  257,  287,  170,  258,  217,  287,  217,
 /*  2510 */   235,  251,  217,  217,  217,  203,  226,  227,  226,  227,
 /*  2520 */   295,  287,  226,  227,  287,  235,  203,  235,  203,  217,
 /*  2530 */     4,  235,  203,    4,  127,  128,  207,  242,  259,  242,
 /*  2540 */   217,  287,  217,  287,  175,  203,  217,  140,  171,  226,
 /*  2550 */   227,  226,  227,  203,  261,  127,  128,  203,  235,  217,
 /*  2560 */   235,  203,  287,    4,  203,    4,  107,  217,  140,  172,
 /*  2570 */   231,  217,  116,  296,  107,  217,  118,  287,  217,  287,
 /*  2580 */   226,  227,  315,  287,  226,  227,  277,  226,  227,  235,
 /*  2590 */   295,  203,  295,  235,  203,  203,  235,  203,  291,  169,
 /*  2600 */   127,  128,  203,  182,  261,  217,  260,  203,  217,  217,
 /*  2610 */   287,  217,  287,  140,  226,  227,  217,  226,  227,  203,
 /*  2620 */   203,  217,  203,  235,   46,  277,  235,  323,   27,  323,
 /*  2630 */   226,  227,  203,  217,  217,  272,  217,  119,  203,  235,
 /*  2640 */   253,  287,  226,  227,  203,  287,  217,  121,  287,  157,
 /*  2650 */   328,  235,  217,  127,  128,  193,  127,  128,  217,  228,
 /*  2660 */   203,  226,  227,  203,  145,  228,  140,  226,  227,  140,
 /*  2670 */   235,  238,   39,  228,  217,  287,  235,  217,  287,  230,
 /*  2680 */   144,  228,  231,  226,  227,  238,  127,  128,  127,  128,
 /*  2690 */   206,  287,  235,  228,  228,  231,  228,  228,  272,  140,
 /*  2700 */   206,  140,  231,  287,  119,  302,   33,  182,  303,  257,
 /*  2710 */   260,  279,  174,   81,  116,  261,  261,  245,  257,  279,
 /*  2720 */   282,  285,  287,  260,  145,  279,  245,  257,  287,  206,
 /*  2730 */   119,  119,  247,  257,  206,   78,  247,  247,  247,  297,
 /*  2740 */   176,  119,   20,  119,  287,  306,  119,  272,   17,  272,
 /*  2750 */   272,  272,  272,  279,  306,  254,  256,  260,  260,  229,
 /*  2760 */   229,  240,  230,  236,  256,  254,  271,  257,  201,  273,
 /*  2770 */   219,  219,  273,  219,  288,  273,  219,   73,  237,  246,
 /*  2780 */   237,  237,  270,  241,  226,  292,  299,  299,  226,  286,
 /*  2790 */   308,  308,  252,    4,  329,  289,  329,  329,  329,  329,
 /*  2800 */   329,  329,  329,  329,  300,  329,  301,  329,  329,  329,
 /*  2810 */   329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
 /*  2820 */   329,  312,  329,  329,  329,  329,  329,  329,  329,  329,
 /*  2830 */   329,  329,  329,  326,
};
#define YY_SHIFT_USE_DFLT (-131)
#define YY_SHIFT_COUNT (542)
#define YY_SHIFT_MIN   (-130)
#define YY_SHIFT_MAX   (2789)
static const short yy_shift_ofst[] = {
 /*     0 */  1665,  808, 1446,  138, 1318, 1603, 1364, 2114, 2114, 2114,
 /*    10 */  1662,  216, 2012, 2216, 2216, 2216, 2216, 2216, 2216, 2216,
 /*    20 */  2216, 1509,   -4,  106, 1910, 1808, 2216, 2216, 2216, 2216,
 /*    30 */  2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216,
 /*    40 */  2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216,
 /*    50 */  2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216,
 /*    60 */  2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216,
 /*    70 */  2216, 2216, 1746, 1463, 1463,  587, 1473, 1473, 1386,   89,
 /*    80 */   398,  812,  752, 1386, 1848, 1848, 1848, 2176, 1848, 1427,
 /*    90 */  1427,  738,  194,  338,  786, 1289, 2526, 2240,  955, 1987,
 /*   100 */  2347, 2258, 2200, 2258, 2079, 2056, 1738,  752,  623, 2294,
 /*   110 */  2369, 2369, 2369, 2369, 2024, 2369, 1848,  738,  738,  194,
 /*   120 */   125,  125, 1918,  519,  519,  -43,  811,  265, 1537,  187,
 /*   130 */  1996, 1852, 1562,  529,  192, 1702,  232, 1367,  232, 1574,
 /*   140 */   127,  579, 1548,  512, 2182, 2561, 1906, 1771, 1766,  662,
 /*   150 */  2559, 2143, 2529,  845, 2473, 2428, 1913, 1453, 2407, 1533,
 /*   160 */  1404,  894, 1785, 2038, 1594,  592, 1203,  830, 1448, 1104,
 /*   170 */  1433, 1433, 1433, 1389, 1136, 1073,  700,  700,  155,  553,
 /*   180 */   131,  275,  412, 1263, 1466, 1258, 1198,  236,  738,  738,
 /*   190 */  1677, 1677,  103,  699,  -29, 2704, 2704, 2789, 2704, 2704,
 /*   200 */  -131, -131, -131,  421,  601,  601,  601,  601,  601,  601,
 /*   210 */   601,  601,  601,  601,  571,  388,  704,  677, 1214, 1185,
 /*   220 */  1153,  -73, 1122, 1091, 1060, 1028,  997,  963,  936,  909,
 /*   230 */   754, 1547, 1257, 1704, 1744, 1744,  482,  -16,  -16,  -16,
 /*   240 */   -16,  -16,  -16,  204,  346,  -35, -130,   52,   52,  293,
 /*   250 */   249,  584,  584,  584,  -21,  190, 1690,   -8,  369,  590,
 /*   260 */    87, 1628, 1426, 1611,  245,  836,  -67,  712,  175, 1503,
 /*   270 */  1347,  824,  824, 1250, 1495,  418, 1314,  824, 1135,  104,
 /*   280 */   104,  385, 1314, 1442, 1442, 1024,  791,   25, 2731, 2731,
 /*   290 */  2627, 2624, 2722, 2722, 2622, 2564, 2657, 2657, 2657, 2657,
 /*   300 */  2612, 2384, 2321, 2611, 2384, 2632, 2538, 2321, 2538, 2579,
 /*   310 */  2598, 2397, 2430, 2538, 2321, 2632, 2397, 2430, 2538, 2321,
 /*   320 */  2525, 2673, 2585, 2384, 2456, 2384, 2456, 2519, 2519, 2519,
 /*   330 */  2519, 2633, 2456, 2519, 2536, 2519, 2633, 2519, 2519, 2462,
 /*   340 */  2492, 2518, 2601, 2601, 2578, 2578, 2397, 2430, 2421, 2458,
 /*   350 */  2467, 2456, 2459, 2459, 2397, 2377, 2335, 2321, 2332, 2366,
 /*   360 */  2362, 2384, 2390, 2390, 2326, 2326, 2326, 2326, -131, -131,
 /*   370 */  -131, -131, -131, -131, -131, -131, -131, -131, 2243,   40,
 /*   380 */   -11,  814,  514,  384,  170,  367, 1489, 1349,   53, 1210,
 /*   390 */   860, 1309,  793,  756, 1052,  850,  473,  442,  847,  318,
 /*   400 */   741,  278,  218,  -28,   65,  148,   -2,  -80,  382, 2344,
 /*   410 */  2334, 2268, 2263, 2262, 2259, 2230, 2253, 2223, 2212, 2205,
 /*   420 */  2210, 2209, 2142, 2193, 2172, 2173, 2100, 2236, 2162, 2228,
 /*   430 */  2220, 2255, 2168, 2157, 2107, 2081, 2099, 2222, 2227, 2139,
 /*   440 */  2061, 2137, 2133, 2128, 2120, 2051, 2076, 2070, 2041, 2169,
 /*   450 */  2034, 2037, 2043, 2023, 2055, 2010, 1975, 1985, 2005, 2050,
 /*   460 */  2003, 1988, 1989, 1983, 2031, 2086, 1920, 1936, 2013, 1898,
 /*   470 */  1956, 1984, 1880, 1821, 1849, 1867, 1861, 1857, 1856, 1797,
 /*   480 */  1803, 1837, 1804, 1760, 1797, 1786, 1697, 1671, 1610, 1642,
 /*   490 */  1631, 1535, 1601, 1675, 1660, 1568, 1535, 1595, 1583, 1558,
 /*   500 */  1529, 1485, 1441, 1455, 1397, 1421, 1388, 1417, 1338, 1306,
 /*   510 */  1297, 1256, 1248, 1319, 1097, 1074, 1068, 1100, 1017, 1142,
 /*   520 */   849,  878,  858,  831,  849,  682,  646,  629,  518,  580,
 /*   530 */   481,  475,  417,  279,  263,  253,  134,  198,  120,  -48,
 /*   540 */   -17,  -70, -107,
};
#define YY_REDUCE_USE_DFLT (-106)
#define YY_REDUCE_COUNT (377)
#define YY_REDUCE_MIN   (-105)
#define YY_REDUCE_MAX   (2567)
static const short yy_reduce_ofst[] = {
 /*     0 */   940,  119, 1162,  619,  660,  172, -101, 1149,  679,  -45,
 /*    10 */  -105, 1680, 1530, 1655, 1652, 1490, 1465, 1283, 1452, 1298,
 /*    20 */  1197,  288, 2457, 2441, 2435, 2416, 2404, 2391, 2388, 2361,
 /*    30 */  2358, 2354, 2325, 2323, 2296, 2292, 2290, 2275, 2256, 2254,
 /*    40 */  2237, 2234, 2221, 2217, 2192, 2163, 2152, 2136, 2119, 2088,
 /*    50 */  2048, 2033, 2026, 1999, 1986, 1982, 1946, 1941, 1924, 1908,
 /*    60 */  1875, 1870, 1844, 1829, 1822, 1795, 1782, 1778, 1742, 1737,
 /*    70 */  1720, 1534,  622, 1251,   71,  513,  753,  508,  339,  150,
 /*    80 */   650,  507,  348,  764, 2297, 2295, 2225,  431, 1929, 1486,
 /*    90 */  1474, 1164,  247, 1190,  413,  615, 2329, 2131, 2094, 1754,
 /*   100 */  1555,  952, 1715,  257, 1596,  109, 1464,  -84, 1331, 1482,
 /*   110 */  1565, 1396, 1189, 1179,  751, 1125,  434, 1204, 1174,  329,
 /*   120 */   778,  633,   10, 1774,  716,  424,  832, 2460, 2429, 2350,
 /*   130 */  1798, 1798, 2419, 2417, 2399, 2394, 1994, 2392, 1676, 1798,
 /*   140 */  1692, 1575, 2350, 2342, 2312, 2147, 1798, 2147, 2147, 2147,
 /*   150 */  2147, 1798, 2273, 1798, 2190, 2190, 2213, 2196, 2190, 2167,
 /*   160 */  1798, 2147, 2147, 2116, 2109, 2073, 2064, 1957, 1900, 1881,
 /*   170 */  1661, 1638, 1634, 1869, 1863, 1860, 1540, 1505, 1842, 1841,
 /*   180 */  1798, 1779, 1753,  971, 1735, 1727, 1672, 1667, 1651, 1563,
 /*   190 */  1502, 1443, 1616, 1227, 1296, 1193, 1191, 1303,  864,  430,
 /*   200 */  1352, 1401, 1368, 2117, 2117, 2117, 2117, 2117, 2117, 2117,
 /*   210 */  2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117,
 /*   220 */  2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117,
 /*   230 */  2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117,
 /*   240 */  2117, 2117, 2117, 2117, 2117, 2117, 2542, 2562, 2558, 2509,
 /*   250 */  2509, 2544, 2543, 2541, 2512, 2507, 2533, 2540, 2506, 2505,
 /*   260 */  2504, 2557, 2554, 2552, 2117, 2551, 2511, 2567, 2510, 2503,
 /*   270 */  2508, 2502, 2499, 2532, 2521, 2527, 2531, 2496, 2495, 2498,
 /*   280 */  2497, 2493, 2530, 2488, 2487, 2486, 2500, 2501, 2483, 2482,
 /*   290 */  2480, 2479, 2448, 2439, 2478, 2442, 2491, 2490, 2489, 2485,
 /*   300 */  2477, 2528, 2476, 2475, 2523, 2481, 2474, 2470, 2446, 2436,
 /*   310 */  2438, 2455, 2463, 2440, 2461, 2472, 2454, 2450, 2432, 2452,
 /*   320 */  2405, 2403, 2426, 2494, 2471, 2484, 2464, 2469, 2468, 2466,
 /*   330 */  2465, 2447, 2451, 2453, 2449, 2445, 2433, 2437, 2431, 2322,
 /*   340 */  2387, 2363, 2306, 2304, 2348, 2309, 2343, 2346, 2307, 2267,
 /*   350 */  2277, 2339, 2117, 2117, 2293, 2279, 2248, 2246, 2260, 2214,
 /*   360 */  2257, 2252, 2261, 2241, 2251, 2247, 2244, 2239, 2118, 2112,
 /*   370 */  2097, 2194, 2170, 2141, 2117, 2117, 2117, 2184,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   887, 1215, 1215, 1337, 1215, 1215, 1215, 1215, 1215, 1215,
 /*    10 */  1337, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
 /*    20 */  1215, 1337, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
 /*    30 */  1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
 /*    40 */  1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
 /*    50 */  1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
 /*    60 */  1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
 /*    70 */  1215, 1215, 1071, 1379, 1379, 1379, 1356, 1356, 1379, 1064,
 /*    80 */  1379, 1379,  915, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
 /*    90 */  1379, 1379,  938, 1060,  928, 1071, 1379, 1379, 1379, 1379,
 /*   100 */  1379, 1140, 1155, 1140, 1132, 1121, 1379, 1379, 1379, 1253,
 /*   110 */  1148, 1148, 1148, 1148, 1011, 1148, 1379, 1379, 1379, 1379,
 /*   120 */  1183, 1182, 1379, 1106, 1106, 1217, 1379, 1306, 1311, 1176,
 /*   130 */  1379, 1379, 1379, 1379, 1379, 1141, 1379, 1379, 1379, 1072,
 /*   140 */  1060, 1356, 1176, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
 /*   150 */  1379, 1379, 1379, 1379, 1156, 1133, 1379, 1379, 1122, 1379,
 /*   160 */  1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
 /*   170 */  1060, 1060, 1060, 1379, 1379, 1379, 1356, 1356, 1379, 1178,
 /*   180 */  1379, 1379, 1379,  925, 1379, 1379, 1379,  893, 1379, 1379,
 /*   190 */  1356, 1356,  887, 1337, 1100, 1337, 1337,  933, 1337, 1337,
 /*   200 */  1330, 1050, 1050, 1116, 1139, 1138, 1137, 1136, 1077, 1126,
 /*   210 */  1114, 1118, 1230, 1117, 1217, 1217, 1217, 1217, 1217, 1217,
 /*   220 */  1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
 /*   230 */  1217, 1217, 1217, 1185, 1199, 1184, 1192, 1204, 1193, 1198,
 /*   240 */  1197, 1196, 1187, 1186, 1188, 1189, 1379, 1379, 1379, 1379,
 /*   250 */  1379, 1379, 1379, 1379, 1063, 1379, 1379, 1033, 1379, 1379,
 /*   260 */  1280, 1379, 1379,  940, 1190, 1379, 1048,  896, 1125, 1219,
 /*   270 */  1061, 1096, 1096,  978, 1002,  962, 1106, 1096, 1079, 1100,
 /*   280 */  1100, 1225, 1106, 1379, 1379, 1217, 1061, 1048, 1321, 1321,
 /*   290 */  1080, 1080, 1305, 1305, 1080, 1253, 1024, 1024, 1024, 1024,
 /*   300 */  1080,  922, 1125, 1080,  922, 1015, 1128, 1125, 1128, 1161,
 /*   310 */  1144, 1115, 1100, 1128, 1125, 1015, 1115, 1100, 1128, 1125,
 /*   320 */  1287, 1285, 1080,  922, 1238,  922, 1238, 1013, 1013, 1013,
 /*   330 */  1013,  994, 1238, 1013,  978, 1013,  994, 1013, 1013, 1375,
 /*   340 */  1379, 1080, 1366, 1366, 1109, 1109, 1115, 1100, 1379, 1379,
 /*   350 */  1244, 1238, 1203, 1191, 1115, 1113, 1110, 1125, 1379, 1080,
 /*   360 */   997,  922,  904,  904,  892,  892,  892,  892, 1334, 1334,
 /*   370 */  1330,  980,  980, 1066, 1202, 1201, 1200,  949, 1216, 1379,
 /*   380 */  1379, 1379, 1379, 1379, 1379, 1254, 1379, 1379, 1379, 1379,
 /*   390 */  1379, 1084, 1379, 1379, 1084, 1084, 1379, 1379, 1379, 1379,
 /*   400 */  1379, 1379, 1379, 1379, 1340, 1379, 1379, 1379, 1379, 1379,
 /*   410 */   888, 1379, 1082, 1379, 1379, 1379, 1082, 1082, 1082, 1379,
 /*   420 */  1082, 1324, 1379, 1379, 1379, 1379, 1379, 1379, 1284, 1283,
 /*   430 */  1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1145,
 /*   440 */  1379, 1379, 1379, 1379, 1379, 1379, 1129, 1085, 1379, 1272,
 /*   450 */  1379, 1082, 1379, 1379, 1379, 1082, 1379, 1379, 1379, 1379,
 /*   460 */  1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
 /*   470 */  1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1036,
 /*   480 */  1042, 1379, 1379, 1379, 1037, 1379, 1379, 1174, 1379, 1379,
 /*   490 */  1379, 1228, 1379, 1379, 1379, 1379, 1111, 1379, 1379, 1379,
 /*   500 */  1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
 /*   510 */  1379, 1372, 1101, 1379, 1379, 1379, 1218, 1379, 1216, 1379,
 /*   520 */  1339, 1379, 1379, 1379, 1338, 1379, 1379, 1379, 1379, 1379,
 /*   530 */  1379, 1379, 1379, 1379, 1379, 1175, 1174, 1218,  931,  911,
 /*   540 */  1379,  902, 1379,  884,  889, 1323, 1320, 1317, 1322, 1316,
 /*   550 */  1318, 1315, 1319, 1314, 1312, 1313, 1310, 1308, 1307, 1309,
 /*   560 */  1304, 1300, 1260, 1258, 1256, 1265, 1264, 1263, 1262, 1261,
 /*   570 */  1257, 1255, 1259, 1251, 1250, 1151, 1130, 1119, 1031, 1299,
 /*   580 */  1297, 1298, 1249, 1247, 1248, 1030, 1029, 1028, 1023, 1022,
 /*   590 */  1021, 1020, 1327, 1336, 1335, 1333, 1332, 1331, 1325, 1326,
 /*   600 */  1236, 1235, 1233, 1232, 1234,  924, 1276, 1279, 1278, 1277,
 /*   610 */  1282, 1281, 1274, 1286, 1291, 1290, 1295, 1294, 1293, 1292,
 /*   620 */  1289, 1271, 1160, 1159, 1157, 1153, 1164, 1163, 1162, 1152,
 /*   630 */  1154, 1158, 1135, 1143, 1142, 1131, 1134, 1016, 1124, 1120,
 /*   640 */  1089, 1087, 1123, 1088, 1086, 1032, 1275, 1027, 1026, 1025,
 /*   650 */   923,  914, 1083,  913,  912,  927, 1000, 1001, 1009, 1012,
 /*   660 */  1007, 1010, 1006, 1005, 1004, 1008, 1003,  999,  930,  929,
 /*   670 */   939,  993,  976,  965,  932,  967,  964,  963,  968,  985,
 /*   680 */   984,  991,  990,  989,  988,  987,  983,  986,  982,  981,
 /*   690 */   969,  961,  960,  979,  959,  996,  995,  992,  958, 1019,
 /*   700 */  1018, 1017, 1014,  957,  956,  955,  954,  953,  952, 1214,
 /*   710 */  1378, 1374, 1377, 1376, 1373, 1213, 1221, 1207, 1205, 1034,
 /*   720 */  1045, 1044, 1043, 1040, 1041, 1055, 1053, 1052, 1051, 1095,
 /*   730 */  1094, 1093, 1092, 1091, 1090, 1076, 1074, 1069, 1068, 1075,
 /*   740 */  1073, 1070, 1098, 1099, 1097, 1067, 1059, 1057, 1058, 1056,
 /*   750 */  1150, 1147, 1149, 1146, 1078, 1065, 1062, 1049, 1354, 1352,
 /*   760 */  1355, 1353, 1351, 1359, 1361, 1360, 1365, 1363, 1362, 1358,
 /*   770 */  1371, 1370, 1369, 1368, 1367, 1357, 1364, 1350, 1349, 1348,
 /*   780 */  1347, 1103, 1108, 1107, 1102, 1039, 1206, 1216, 1210, 1345,
 /*   790 */  1343, 1346, 1342, 1341, 1241, 1243, 1246, 1245, 1242, 1105,
 /*   800 */  1104, 1240, 1239, 1344, 1209, 1181,  945,  943,  944, 1268,
 /*   810 */  1267, 1270, 1269, 1266,  947,  946,  942,  941, 1179, 1173,
 /*   820 */  1172, 1296, 1211, 1212, 1171, 1177, 1169, 1168, 1167, 1195,
 /*   830 */  1194, 1180, 1170,  934, 1038, 1035, 1208, 1166, 1081, 1165,
 /*   840 */   975,  974,  973,  972,  971,  970, 1047, 1046,  951,  966,
 /*   850 */   950,  948,  926,  916,  921,  919,  920,  918,  917,  909,
 /*   860 */   906,  908,  905,  910,  907,  903,  901,  900,  899,  898,
 /*   870 */   897,  937,  936,  935,  931,  895,  894,  891,  890,  886,
 /*   880 */   885,  883,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
**
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
    0,  /*          $ => nothing */
    0,  /*    ILLEGAL => nothing */
    0,  /*    COMMENT => nothing */
    0,  /*      SPACE => nothing */
    0,  /*         ID => nothing */
    4,  /*      ABORT => ID */
    4,  /*     ACTION => ID */
    4,  /*      AFTER => ID */
    4,  /*     ALWAYS => ID */
    4,  /*    ANALYZE => ID */
    4,  /*        ASC => ID */
    4,  /*     ATTACH => ID */
    4,  /*     BEFORE => ID */
    4,  /*      BEGIN => ID */
    4,  /*         BY => ID */
    4,  /*    CASCADE => ID */
    4,  /*       CAST => ID */
    4,  /*   COLUMNKW => ID */
    4,  /*   CONFLICT => ID */
    4,  /*    CURRENT => ID */
    4,  /*   DATABASE => ID */
    4,  /*   DEFERRED => ID */
    4,  /*       DESC => ID */
    4,  /*     DETACH => ID */
    4,  /*         DO => ID */
    4,  /*       EACH => ID */
    4,  /*        END => ID */
    4,  /*    EXCLUDE => ID */
    4,  /*  EXCLUSIVE => ID */
    4,  /*    EXPLAIN => ID */
    4,  /*       FAIL => ID */
    4,  /*      FIRST => ID */
    4,  /*  FOLLOWING => ID */
    4,  /*        FOR => ID */
    4,  /*  GENERATED => ID */
    4,  /*     GROUPS => ID */
    4,  /*     IGNORE => ID */
    4,  /*  IMMEDIATE => ID */
    4,  /*    INDEXED => ID */
    4,  /*  INITIALLY => ID */
    4,  /*    INSTEAD => ID */
    4,  /*       LAST => ID */
    4,  /*    LIKE_KW => ID */
    4,  /*      MATCH => ID */
    4,  /* MATERIALIZED => ID */
    4,  /*         NO => ID */
    4,  /*      NULLS => ID */
    4,  /*     OTHERS => ID */
    4,  /*       PLAN => ID */
    4,  /*      QUERY => ID */
    4,  /*        KEY => ID */
    4,  /*         OF => ID */
    4,  /*     OFFSET => ID */
    4,  /*  PARTITION => ID */
    4,  /*     PRAGMA => ID */
    4,  /*  PRECEDING => ID */
    4,  /*      RAISE => ID */
    4,  /*      RANGE => ID */
    4,  /*  RECURSIVE => ID */
    4,  /*    RELEASE => ID */
    4,  /*    REPLACE => ID */
    4,  /*   RESTRICT => ID */
    4,  /*        ROW => ID */
    4,  /*       ROWS => ID */
    4,  /*   ROLLBACK => ID */
    4,  /*  SAVEPOINT => ID */
    4,  /*       TEMP => ID */
    4,  /*       TIES => ID */
    4,  /*    TRIGGER => ID */
    4,  /*  UNBOUNDED => ID */
    4,  /*     VACUUM => ID */
    4,  /*       VIEW => ID */
    4,  /*    VIRTUAL => ID */
    4,  /*       WITH => ID */
    4,  /*    WITHOUT => ID */
    4,  /*    REINDEX => ID */
    4,  /*     RENAME => ID */
    4,  /*   CTIME_KW => ID */
    4,  /*         IF => ID */
    4,  /*     FILTER => ID */
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
  QList<Token*>* tokens = nullptr;
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  sqlite3_parseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

void *sqlite3_parseCopyParserState(void* other)
{
  yyParser *pParser;
  yyParser *otherParser = (yyParser*)other;

  // Copy parser
  pParser = (yyParser*)malloc((size_t)sizeof(yyParser));
  memcpy(pParser, other, (size_t)sizeof(yyParser));

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = malloc((size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)other)->yystack, (size_t)stackSize);
#endif

  for (int i = 0; i <= pParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(otherParser->yystack[i].tokens);
  }

  return pParser;
}

void sqlite3_parseAddToken(void* other, Token* token)
{
    yyParser *otherParser = (yyParser*)other;
    if (otherParser->yyidx < 0)
        return; // Nothing on stack yet. Might happen when parsing just whitespaces, nothing else.

    otherParser->yystack[otherParser->yyidx].tokens->append(token);
}

void sqlite3_parseRestoreParserState(void* saved, void* target)
{
  yyParser *pParser = (yyParser*)target;
  yyParser *savedParser = (yyParser*)saved;

  for (int i = 0; i <= pParser->yyidx; i++)
      delete pParser->yystack[i].tokens;

  memcpy(pParser, saved, (size_t)sizeof(yyParser));

  for (int i = 0; i <= savedParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(savedParser->yystack[i].tokens);
  }

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = relloc(pParser->yystack, (size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)saved)->yystack, (size_t)stackSize);
#endif
}

void sqlite3_parseFreeSavedState(void* other)
{
    yyParser *pParser = (yyParser*)other;
    for (int i = 0; i <= pParser->yyidx; i++)
        delete pParser->yystack[i].tokens;

#if YYSTACKDEPTH<=0
    free(pParser->yystack);
#endif
    free(other);
}

#ifndef NDEBUG
/*
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = {
  "$",             "ILLEGAL",       "COMMENT",       "SPACE",       
  "ID",            "ABORT",         "ACTION",        "AFTER",       
  "ALWAYS",        "ANALYZE",       "ASC",           "ATTACH",      
  "BEFORE",        "BEGIN",         "BY",            "CASCADE",     
  "CAST",          "COLUMNKW",      "CONFLICT",      "CURRENT",     
  "DATABASE",      "DEFERRED",      "DESC",          "DETACH",      
  "DO",            "EACH",          "END",           "EXCLUDE",     
  "EXCLUSIVE",     "EXPLAIN",       "FAIL",          "FIRST",       
  "FOLLOWING",     "FOR",           "GENERATED",     "GROUPS",      
  "IGNORE",        "IMMEDIATE",     "INDEXED",       "INITIALLY",   
  "INSTEAD",       "LAST",          "LIKE_KW",       "MATCH",       
  "MATERIALIZED",  "NO",            "NULLS",         "OTHERS",      
  "PLAN",          "QUERY",         "KEY",           "OF",          
  "OFFSET",        "PARTITION",     "PRAGMA",        "PRECEDING",   
  "RAISE",         "RANGE",         "RECURSIVE",     "RELEASE",     
  "REPLACE",       "RESTRICT",      "ROW",           "ROWS",        
  "ROLLBACK",      "SAVEPOINT",     "TEMP",          "TIES",        
  "TRIGGER",       "UNBOUNDED",     "VACUUM",        "VIEW",        
  "VIRTUAL",       "WITH",          "WITHOUT",       "REINDEX",     
  "RENAME",        "CTIME_KW",      "IF",            "FILTER",      
  "ANY",           "OR",            "AND",           "NOT",         
  "IS",            "BETWEEN",       "IN",            "ISNULL",      
  "NOTNULL",       "NE",            "EQ",            "GT",          
  "LE",            "LT",            "GE",            "ESCAPE",      
  "BITAND",        "BITOR",         "LSHIFT",        "RSHIFT",      
  "PLUS",          "MINUS",         "STAR",          "SLASH",       
  "REM",           "CONCAT",        "PTR",           "COLLATE",     
  "BITNOT",        "SEMI",          "TRANSACTION",   "ID_TRANS",    
  "COMMIT",        "TO",            "CREATE",        "TABLE",       
  "LP",            "RP",            "AS",            "DOT",         
  "ID_TAB_NEW",    "ID_DB",         "COMMA",         "CTX_ROWID_KW",
  "CTX_STRICT_KW",  "EXISTS",        "ID_COL_NEW",    "STRING",      
  "JOIN_KW",       "ID_COL_TYPE",   "RIGHT_ASSOC",   "CONSTRAINT",  
  "DEFAULT",       "NULL",          "PRIMARY",       "UNIQUE",      
  "CHECK",         "REFERENCES",    "ID_CONSTR",     "ID_COLLATE",  
  "ID_TAB",        "INTEGER",       "FLOAT",         "BLOB",        
  "AUTOINCR",      "ON",            "INSERT",        "DELETE",      
  "UPDATE",        "ID_FK_MATCH",   "SET",           "DEFERRABLE",  
  "FOREIGN",       "DROP",          "ID_VIEW_NEW",   "ID_VIEW",     
  "SELECT",        "VALUES",        "UNION",         "ALL",         
  "EXCEPT",        "INTERSECT",     "DISTINCT",      "ID_ALIAS",    
  "FROM",          "USING",         "JOIN",          "ID_JOIN_OPTS",
  "ID_IDX",        "ORDER",         "GROUP",         "HAVING",      
  "LIMIT",         "WHERE",         "RETURNING",     "ID_COL",      
  "INTO",          "NOTHING",       "ID_FN",         "ID_ERR_MSG",  
  "VARIABLE",      "CASE",          "WHEN",          "THEN",        
  "ELSE",          "INDEX",         "ID_IDX_NEW",    "ID_PRAGMA",   
  "ID_TRIG_NEW",   "ID_TRIG",       "ALTER",         "ADD",         
  "WINDOW",        "OVER",          "error",         "cmd",         
  "input",         "cmdlist",       "ecmd",          "explain",     
  "cmdx",          "transtype",     "trans_opt",     "nm",          
  "savepoint_opt",  "temp",          "ifnotexists",   "fullname",    
  "columnlist",    "conslist_opt",  "table_options",  "select",      
  "table_option",  "column",        "columnid",      "type",        
  "carglist",      "id",            "id_opt",        "ids",         
  "typetoken",     "typename",      "signed",        "plus_num",    
  "minus_num",     "ccons",         "term",          "expr",        
  "onconf",        "sortorder",     "autoinc",       "idxlist_opt", 
  "refargs",       "defer_subclause",  "gen_always",    "tnm",         
  "refarg",        "refact",        "init_deferred_pred_opt",  "conslist",    
  "tconscomma",    "tcons",         "idxlist",       "defer_subclause_opt",
  "resolvetype",   "orconf",        "raisetype",     "ifexists",    
  "select_stmt",   "with",          "selectnowith",  "oneselect",   
  "multiselect_op",  "values",        "distinct",      "selcollist",  
  "from",          "where_opt",     "groupby_opt",   "having_opt",  
  "orderby_opt",   "limit_opt",     "window_clause",  "nexprlist",   
  "exprlist",      "sclp",          "as",            "joinsrc",     
  "singlesrc",     "seltablist",    "joinop",        "joinconstr_opt",
  "dbnm",          "indexed_opt",   "idlist",        "xfullname",   
  "sortlist",      "nulls",         "delete_stmt",   "returning",   
  "update_stmt",   "setlist",       "idlist_opt",    "insert_stmt", 
  "insert_cmd",    "upsert",        "rp_opt",        "exprx",       
  "not_opt",       "likeop",        "case_operand",  "case_exprlist",
  "case_else",     "filter_over",   "uniqueflag",    "idxlist_single",
  "collate",       "vinto",         "nmnum",         "number",      
  "trigger_time",  "trigger_event",  "foreach_clause",  "when_clause", 
  "trigger_cmd_list",  "trigger_cmd",   "database_kw_opt",  "key_opt",     
  "kwcolumn_opt",  "create_vtab",   "vtabarglist",   "vtabarg",     
  "vtabargtoken",  "anylist",       "wqlist",        "wqas",        
  "wqcte",         "windowdefn_list",  "windowdefn",    "window",      
  "frame_opt",     "range_or_rows",  "frame_bound_s",  "frame_exclude_opt",
  "frame_bound_e",  "frame_bound",   "frame_exclude",  "filter_clause",
  "over_clause", 
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "input ::= cmdlist",
 /*   1 */ "cmdlist ::= cmdlist ecmd",
 /*   2 */ "cmdlist ::= ecmd",
 /*   3 */ "ecmd ::= SEMI",
 /*   4 */ "ecmd ::= explain cmdx SEMI",
 /*   5 */ "explain ::=",
 /*   6 */ "explain ::= EXPLAIN",
 /*   7 */ "explain ::= EXPLAIN QUERY PLAN",
 /*   8 */ "cmdx ::= cmd",
 /*   9 */ "cmd ::= BEGIN transtype trans_opt",
 /*  10 */ "trans_opt ::=",
 /*  11 */ "trans_opt ::= TRANSACTION",
 /*  12 */ "trans_opt ::= TRANSACTION nm",
 /*  13 */ "trans_opt ::= TRANSACTION ID_TRANS",
 /*  14 */ "transtype ::=",
 /*  15 */ "transtype ::= DEFERRED",
 /*  16 */ "transtype ::= IMMEDIATE",
 /*  17 */ "transtype ::= EXCLUSIVE",
 /*  18 */ "cmd ::= COMMIT trans_opt",
 /*  19 */ "cmd ::= END trans_opt",
 /*  20 */ "cmd ::= ROLLBACK trans_opt",
 /*  21 */ "savepoint_opt ::= SAVEPOINT",
 /*  22 */ "savepoint_opt ::=",
 /*  23 */ "cmd ::= SAVEPOINT nm",
 /*  24 */ "cmd ::= RELEASE savepoint_opt nm",
 /*  25 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt nm",
 /*  26 */ "cmd ::= SAVEPOINT ID_TRANS",
 /*  27 */ "cmd ::= RELEASE savepoint_opt ID_TRANS",
 /*  28 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS",
 /*  29 */ "cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options",
 /*  30 */ "cmd ::= CREATE temp TABLE ifnotexists fullname AS select",
 /*  31 */ "cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW",
 /*  32 */ "cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /*  33 */ "table_options ::=",
 /*  34 */ "table_options ::= table_option",
 /*  35 */ "table_options ::= table_options COMMA table_option",
 /*  36 */ "table_option ::= WITHOUT nm",
 /*  37 */ "table_option ::= nm",
 /*  38 */ "table_option ::= WITHOUT CTX_ROWID_KW",
 /*  39 */ "table_option ::= CTX_STRICT_KW",
 /*  40 */ "ifnotexists ::=",
 /*  41 */ "ifnotexists ::= IF NOT EXISTS",
 /*  42 */ "temp ::= TEMP",
 /*  43 */ "temp ::=",
 /*  44 */ "columnlist ::= columnlist COMMA column",
 /*  45 */ "columnlist ::= column",
 /*  46 */ "column ::= columnid type carglist",
 /*  47 */ "columnid ::= nm",
 /*  48 */ "columnid ::= ID_COL_NEW",
 /*  49 */ "id ::= ID",
 /*  50 */ "id_opt ::= id",
 /*  51 */ "id_opt ::=",
 /*  52 */ "ids ::= ID|STRING",
 /*  53 */ "nm ::= id",
 /*  54 */ "nm ::= STRING",
 /*  55 */ "nm ::= JOIN_KW",
 /*  56 */ "type ::=",
 /*  57 */ "type ::= typetoken",
 /*  58 */ "typetoken ::= typename",
 /*  59 */ "typetoken ::= typename LP signed RP",
 /*  60 */ "typetoken ::= typename LP signed COMMA signed RP",
 /*  61 */ "typename ::= ids",
 /*  62 */ "typename ::= typename ids",
 /*  63 */ "typename ::= ID_COL_TYPE",
 /*  64 */ "signed ::= plus_num",
 /*  65 */ "signed ::= minus_num",
 /*  66 */ "carglist ::= carglist ccons",
 /*  67 */ "carglist ::=",
 /*  68 */ "ccons ::= CONSTRAINT nm",
 /*  69 */ "ccons ::= DEFAULT term",
 /*  70 */ "ccons ::= DEFAULT LP expr RP",
 /*  71 */ "ccons ::= DEFAULT PLUS term",
 /*  72 */ "ccons ::= DEFAULT MINUS term",
 /*  73 */ "ccons ::= DEFAULT id",
 /*  74 */ "ccons ::= DEFAULT CTIME_KW",
 /*  75 */ "ccons ::= NULL onconf",
 /*  76 */ "ccons ::= NOT NULL onconf",
 /*  77 */ "ccons ::= PRIMARY KEY sortorder onconf autoinc",
 /*  78 */ "ccons ::= UNIQUE onconf",
 /*  79 */ "ccons ::= CHECK LP expr RP",
 /*  80 */ "ccons ::= REFERENCES nm idxlist_opt refargs",
 /*  81 */ "ccons ::= defer_subclause",
 /*  82 */ "ccons ::= COLLATE ids",
 /*  83 */ "ccons ::= gen_always AS LP expr RP id_opt",
 /*  84 */ "ccons ::= CONSTRAINT ID_CONSTR",
 /*  85 */ "ccons ::= COLLATE ID_COLLATE",
 /*  86 */ "ccons ::= REFERENCES ID_TAB",
 /*  87 */ "ccons ::= CHECK LP RP",
 /*  88 */ "term ::= NULL",
 /*  89 */ "term ::= INTEGER",
 /*  90 */ "term ::= FLOAT",
 /*  91 */ "term ::= STRING|BLOB",
 /*  92 */ "tnm ::= term",
 /*  93 */ "tnm ::= nm",
 /*  94 */ "gen_always ::= GENERATED ALWAYS",
 /*  95 */ "gen_always ::=",
 /*  96 */ "autoinc ::=",
 /*  97 */ "autoinc ::= AUTOINCR",
 /*  98 */ "refargs ::=",
 /*  99 */ "refargs ::= refargs refarg",
 /* 100 */ "refarg ::= MATCH nm",
 /* 101 */ "refarg ::= ON INSERT refact",
 /* 102 */ "refarg ::= ON DELETE refact",
 /* 103 */ "refarg ::= ON UPDATE refact",
 /* 104 */ "refarg ::= MATCH ID_FK_MATCH",
 /* 105 */ "refact ::= SET NULL",
 /* 106 */ "refact ::= SET DEFAULT",
 /* 107 */ "refact ::= CASCADE",
 /* 108 */ "refact ::= RESTRICT",
 /* 109 */ "refact ::= NO ACTION",
 /* 110 */ "defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt",
 /* 111 */ "defer_subclause ::= DEFERRABLE init_deferred_pred_opt",
 /* 112 */ "init_deferred_pred_opt ::=",
 /* 113 */ "init_deferred_pred_opt ::= INITIALLY DEFERRED",
 /* 114 */ "init_deferred_pred_opt ::= INITIALLY IMMEDIATE",
 /* 115 */ "conslist_opt ::=",
 /* 116 */ "conslist_opt ::= COMMA conslist",
 /* 117 */ "conslist ::= conslist tconscomma tcons",
 /* 118 */ "conslist ::= tcons",
 /* 119 */ "tconscomma ::= COMMA",
 /* 120 */ "tconscomma ::=",
 /* 121 */ "tcons ::= CONSTRAINT nm",
 /* 122 */ "tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf",
 /* 123 */ "tcons ::= UNIQUE LP idxlist RP onconf",
 /* 124 */ "tcons ::= CHECK LP expr RP onconf",
 /* 125 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt",
 /* 126 */ "tcons ::= CONSTRAINT ID_CONSTR",
 /* 127 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB",
 /* 128 */ "tcons ::= CHECK LP RP onconf",
 /* 129 */ "defer_subclause_opt ::=",
 /* 130 */ "defer_subclause_opt ::= defer_subclause",
 /* 131 */ "onconf ::=",
 /* 132 */ "onconf ::= ON CONFLICT resolvetype",
 /* 133 */ "orconf ::=",
 /* 134 */ "orconf ::= OR resolvetype",
 /* 135 */ "resolvetype ::= raisetype",
 /* 136 */ "resolvetype ::= IGNORE",
 /* 137 */ "resolvetype ::= REPLACE",
 /* 138 */ "cmd ::= DROP TABLE ifexists fullname",
 /* 139 */ "cmd ::= DROP TABLE ifexists nm DOT ID_TAB",
 /* 140 */ "cmd ::= DROP TABLE ifexists ID_DB|ID_TAB",
 /* 141 */ "ifexists ::= IF EXISTS",
 /* 142 */ "ifexists ::=",
 /* 143 */ "cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select",
 /* 144 */ "cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW",
 /* 145 */ "cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW",
 /* 146 */ "cmd ::= DROP VIEW ifexists fullname",
 /* 147 */ "cmd ::= DROP VIEW ifexists nm DOT ID_VIEW",
 /* 148 */ "cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW",
 /* 149 */ "cmd ::= select_stmt",
 /* 150 */ "select_stmt ::= select",
 /* 151 */ "select ::= with selectnowith",
 /* 152 */ "selectnowith ::= oneselect",
 /* 153 */ "selectnowith ::= selectnowith multiselect_op oneselect",
 /* 154 */ "selectnowith ::= values",
 /* 155 */ "selectnowith ::= selectnowith COMMA values",
 /* 156 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt",
 /* 157 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt",
 /* 158 */ "values ::= VALUES LP nexprlist RP",
 /* 159 */ "values ::= values COMMA LP exprlist RP",
 /* 160 */ "multiselect_op ::= UNION",
 /* 161 */ "multiselect_op ::= UNION ALL",
 /* 162 */ "multiselect_op ::= EXCEPT",
 /* 163 */ "multiselect_op ::= INTERSECT",
 /* 164 */ "distinct ::= DISTINCT",
 /* 165 */ "distinct ::= ALL",
 /* 166 */ "distinct ::=",
 /* 167 */ "sclp ::= selcollist COMMA",
 /* 168 */ "sclp ::=",
 /* 169 */ "selcollist ::= sclp expr as",
 /* 170 */ "selcollist ::= sclp STAR",
 /* 171 */ "selcollist ::= sclp tnm DOT STAR",
 /* 172 */ "selcollist ::= sclp",
 /* 173 */ "selcollist ::= sclp ID_TAB DOT STAR",
 /* 174 */ "as ::= AS nm",
 /* 175 */ "as ::= ids",
 /* 176 */ "as ::= AS ID_ALIAS",
 /* 177 */ "as ::= ID_ALIAS",
 /* 178 */ "as ::=",
 /* 179 */ "from ::=",
 /* 180 */ "from ::= FROM joinsrc",
 /* 181 */ "joinsrc ::= singlesrc seltablist",
 /* 182 */ "joinsrc ::=",
 /* 183 */ "seltablist ::= seltablist joinop singlesrc joinconstr_opt",
 /* 184 */ "seltablist ::=",
 /* 185 */ "singlesrc ::= nm dbnm as indexed_opt",
 /* 186 */ "singlesrc ::= LP select RP as",
 /* 187 */ "singlesrc ::= LP joinsrc RP as",
 /* 188 */ "singlesrc ::= nm dbnm LP exprlist RP as",
 /* 189 */ "singlesrc ::=",
 /* 190 */ "singlesrc ::= nm DOT",
 /* 191 */ "singlesrc ::= nm DOT ID_TAB",
 /* 192 */ "singlesrc ::= ID_DB|ID_TAB",
 /* 193 */ "singlesrc ::= nm DOT ID_VIEW",
 /* 194 */ "singlesrc ::= ID_DB|ID_VIEW",
 /* 195 */ "joinconstr_opt ::= ON expr",
 /* 196 */ "joinconstr_opt ::= USING LP idlist RP",
 /* 197 */ "joinconstr_opt ::=",
 /* 198 */ "dbnm ::=",
 /* 199 */ "dbnm ::= DOT nm",
 /* 200 */ "fullname ::= nm",
 /* 201 */ "fullname ::= nm DOT nm",
 /* 202 */ "xfullname ::= nm",
 /* 203 */ "xfullname ::= nm DOT nm",
 /* 204 */ "xfullname ::= nm DOT nm AS nm",
 /* 205 */ "xfullname ::= nm AS nm",
 /* 206 */ "xfullname ::= nm DOT nm AS ID_ALIAS",
 /* 207 */ "xfullname ::= nm AS ID_ALIAS",
 /* 208 */ "joinop ::= COMMA",
 /* 209 */ "joinop ::= JOIN",
 /* 210 */ "joinop ::= JOIN_KW JOIN",
 /* 211 */ "joinop ::= JOIN_KW nm JOIN",
 /* 212 */ "joinop ::= JOIN_KW nm nm JOIN",
 /* 213 */ "joinop ::= ID_JOIN_OPTS",
 /* 214 */ "indexed_opt ::=",
 /* 215 */ "indexed_opt ::= INDEXED BY nm",
 /* 216 */ "indexed_opt ::= NOT INDEXED",
 /* 217 */ "indexed_opt ::= INDEXED BY ID_IDX",
 /* 218 */ "orderby_opt ::=",
 /* 219 */ "orderby_opt ::= ORDER BY sortlist",
 /* 220 */ "sortlist ::= sortlist COMMA expr sortorder nulls",
 /* 221 */ "sortlist ::= expr sortorder nulls",
 /* 222 */ "sortorder ::= ASC",
 /* 223 */ "sortorder ::= DESC",
 /* 224 */ "sortorder ::=",
 /* 225 */ "nulls ::= NULLS FIRST",
 /* 226 */ "nulls ::= NULLS LAST",
 /* 227 */ "nulls ::=",
 /* 228 */ "groupby_opt ::=",
 /* 229 */ "groupby_opt ::= GROUP BY nexprlist",
 /* 230 */ "groupby_opt ::= GROUP BY",
 /* 231 */ "having_opt ::=",
 /* 232 */ "having_opt ::= HAVING expr",
 /* 233 */ "limit_opt ::=",
 /* 234 */ "limit_opt ::= LIMIT expr",
 /* 235 */ "limit_opt ::= LIMIT expr OFFSET expr",
 /* 236 */ "limit_opt ::= LIMIT expr COMMA expr",
 /* 237 */ "cmd ::= delete_stmt",
 /* 238 */ "delete_stmt ::= with DELETE FROM xfullname indexed_opt where_opt returning orderby_opt limit_opt",
 /* 239 */ "delete_stmt ::= with DELETE FROM",
 /* 240 */ "delete_stmt ::= with DELETE FROM nm DOT",
 /* 241 */ "delete_stmt ::= with DELETE FROM nm DOT ID_TAB",
 /* 242 */ "delete_stmt ::= with DELETE FROM ID_DB|ID_TAB",
 /* 243 */ "where_opt ::=",
 /* 244 */ "where_opt ::= WHERE expr",
 /* 245 */ "where_opt ::= WHERE",
 /* 246 */ "returning ::=",
 /* 247 */ "returning ::= RETURNING selcollist",
 /* 248 */ "cmd ::= update_stmt",
 /* 249 */ "update_stmt ::= with UPDATE orconf xfullname indexed_opt SET setlist from where_opt returning orderby_opt limit_opt",
 /* 250 */ "update_stmt ::= with UPDATE orconf",
 /* 251 */ "update_stmt ::= with UPDATE orconf nm DOT",
 /* 252 */ "update_stmt ::= with UPDATE orconf nm DOT ID_TAB",
 /* 253 */ "update_stmt ::= with UPDATE orconf ID_DB|ID_TAB",
 /* 254 */ "setlist ::= setlist COMMA nm EQ expr",
 /* 255 */ "setlist ::= setlist COMMA LP idlist RP EQ expr",
 /* 256 */ "setlist ::= nm EQ expr",
 /* 257 */ "setlist ::= LP idlist RP EQ expr",
 /* 258 */ "setlist ::=",
 /* 259 */ "setlist ::= setlist COMMA",
 /* 260 */ "setlist ::= setlist COMMA ID_COL",
 /* 261 */ "setlist ::= ID_COL",
 /* 262 */ "idlist_opt ::=",
 /* 263 */ "idlist_opt ::= LP idlist RP",
 /* 264 */ "idlist ::= idlist COMMA nm",
 /* 265 */ "idlist ::= nm",
 /* 266 */ "idlist ::=",
 /* 267 */ "idlist ::= idlist COMMA ID_COL",
 /* 268 */ "idlist ::= ID_COL",
 /* 269 */ "cmd ::= insert_stmt",
 /* 270 */ "insert_stmt ::= with insert_cmd INTO xfullname idlist_opt select upsert returning",
 /* 271 */ "insert_stmt ::= with insert_cmd INTO xfullname idlist_opt DEFAULT VALUES returning",
 /* 272 */ "insert_stmt ::= with insert_cmd INTO xfullname LP idlist rp_opt",
 /* 273 */ "insert_stmt ::= with insert_cmd INTO",
 /* 274 */ "insert_stmt ::= with insert_cmd INTO nm DOT",
 /* 275 */ "insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB",
 /* 276 */ "insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB",
 /* 277 */ "insert_cmd ::= INSERT orconf",
 /* 278 */ "insert_cmd ::= REPLACE",
 /* 279 */ "upsert ::=",
 /* 280 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt",
 /* 281 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING",
 /* 282 */ "upsert ::= ON CONFLICT DO NOTHING",
 /* 283 */ "exprx ::= expr not_opt IN ID_DB",
 /* 284 */ "exprx ::= expr not_opt IN nm DOT ID_TAB",
 /* 285 */ "exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN",
 /* 286 */ "exprx ::= tnm DOT ID_TAB|ID_COL",
 /* 287 */ "exprx ::= tnm DOT nm DOT ID_COL",
 /* 288 */ "exprx ::= expr COLLATE ID_COLLATE",
 /* 289 */ "exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP",
 /* 290 */ "exprx ::= CTIME_KW",
 /* 291 */ "exprx ::= LP nexprlist RP",
 /* 292 */ "exprx ::= tnm",
 /* 293 */ "exprx ::= tnm DOT nm",
 /* 294 */ "exprx ::= tnm DOT",
 /* 295 */ "exprx ::= tnm DOT nm DOT nm",
 /* 296 */ "exprx ::= tnm DOT nm DOT",
 /* 297 */ "exprx ::= VARIABLE",
 /* 298 */ "exprx ::= expr COLLATE ids",
 /* 299 */ "exprx ::= CAST LP expr AS typetoken RP",
 /* 300 */ "exprx ::= ID LP distinct exprlist RP",
 /* 301 */ "exprx ::= ID LP STAR RP",
 /* 302 */ "exprx ::= expr AND expr",
 /* 303 */ "exprx ::= expr OR expr",
 /* 304 */ "exprx ::= expr LT|GT|GE|LE expr",
 /* 305 */ "exprx ::= expr EQ|NE expr",
 /* 306 */ "exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr",
 /* 307 */ "exprx ::= expr PLUS|MINUS expr",
 /* 308 */ "exprx ::= expr STAR|SLASH|REM expr",
 /* 309 */ "exprx ::= expr CONCAT expr",
 /* 310 */ "exprx ::= expr not_opt likeop expr",
 /* 311 */ "exprx ::= expr not_opt likeop expr ESCAPE expr",
 /* 312 */ "exprx ::= expr ISNULL|NOTNULL",
 /* 313 */ "exprx ::= expr NOT NULL",
 /* 314 */ "exprx ::= expr IS not_opt expr",
 /* 315 */ "exprx ::= expr IS NOT DISTINCT FROM expr",
 /* 316 */ "exprx ::= expr IS DISTINCT FROM expr",
 /* 317 */ "exprx ::= NOT expr",
 /* 318 */ "exprx ::= BITNOT expr",
 /* 319 */ "exprx ::= MINUS expr",
 /* 320 */ "exprx ::= PLUS expr",
 /* 321 */ "exprx ::= expr PTR expr",
 /* 322 */ "exprx ::= expr not_opt BETWEEN expr AND expr",
 /* 323 */ "exprx ::= expr not_opt IN LP exprlist RP",
 /* 324 */ "exprx ::= LP select RP",
 /* 325 */ "exprx ::= expr not_opt IN LP select RP",
 /* 326 */ "exprx ::= expr not_opt IN nm dbnm",
 /* 327 */ "exprx ::= EXISTS LP select RP",
 /* 328 */ "exprx ::= CASE case_operand case_exprlist case_else END",
 /* 329 */ "exprx ::= RAISE LP IGNORE RP",
 /* 330 */ "exprx ::= RAISE LP raisetype COMMA nm RP",
 /* 331 */ "exprx ::= ID LP distinct exprlist RP filter_over",
 /* 332 */ "exprx ::= ID LP STAR RP filter_over",
 /* 333 */ "expr ::=",
 /* 334 */ "expr ::= exprx",
 /* 335 */ "not_opt ::=",
 /* 336 */ "not_opt ::= NOT",
 /* 337 */ "rp_opt ::=",
 /* 338 */ "rp_opt ::= RP",
 /* 339 */ "likeop ::= LIKE_KW|MATCH",
 /* 340 */ "case_exprlist ::= case_exprlist WHEN expr THEN expr",
 /* 341 */ "case_exprlist ::= WHEN expr THEN expr",
 /* 342 */ "case_else ::= ELSE expr",
 /* 343 */ "case_else ::=",
 /* 344 */ "case_operand ::= exprx",
 /* 345 */ "case_operand ::=",
 /* 346 */ "exprlist ::= nexprlist",
 /* 347 */ "exprlist ::=",
 /* 348 */ "nexprlist ::= nexprlist COMMA expr",
 /* 349 */ "nexprlist ::= exprx",
 /* 350 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt",
 /* 351 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB",
 /* 352 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW",
 /* 353 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW",
 /* 354 */ "uniqueflag ::= UNIQUE",
 /* 355 */ "uniqueflag ::=",
 /* 356 */ "idxlist_opt ::=",
 /* 357 */ "idxlist_opt ::= LP idxlist RP",
 /* 358 */ "idxlist ::= idxlist COMMA idxlist_single",
 /* 359 */ "idxlist ::= idxlist_single",
 /* 360 */ "idxlist_single ::= nm collate sortorder",
 /* 361 */ "idxlist_single ::= ID_COL",
 /* 362 */ "collate ::=",
 /* 363 */ "collate ::= COLLATE ids",
 /* 364 */ "collate ::= COLLATE ID_COLLATE",
 /* 365 */ "cmd ::= DROP INDEX ifexists fullname",
 /* 366 */ "cmd ::= DROP INDEX ifexists nm DOT ID_IDX",
 /* 367 */ "cmd ::= DROP INDEX ifexists ID_DB|ID_IDX",
 /* 368 */ "cmd ::= VACUUM vinto",
 /* 369 */ "cmd ::= VACUUM nm vinto",
 /* 370 */ "vinto ::= INTO expr",
 /* 371 */ "vinto ::=",
 /* 372 */ "cmd ::= PRAGMA nm dbnm",
 /* 373 */ "cmd ::= PRAGMA nm dbnm EQ nmnum",
 /* 374 */ "cmd ::= PRAGMA nm dbnm LP nmnum RP",
 /* 375 */ "cmd ::= PRAGMA nm dbnm EQ minus_num",
 /* 376 */ "cmd ::= PRAGMA nm dbnm LP minus_num RP",
 /* 377 */ "cmd ::= PRAGMA nm DOT ID_PRAGMA",
 /* 378 */ "cmd ::= PRAGMA ID_DB|ID_PRAGMA",
 /* 379 */ "nmnum ::= plus_num",
 /* 380 */ "nmnum ::= nm",
 /* 381 */ "nmnum ::= ON",
 /* 382 */ "nmnum ::= DELETE",
 /* 383 */ "nmnum ::= DEFAULT",
 /* 384 */ "plus_num ::= PLUS number",
 /* 385 */ "plus_num ::= number",
 /* 386 */ "minus_num ::= MINUS number",
 /* 387 */ "number ::= INTEGER",
 /* 388 */ "number ::= FLOAT",
 /* 389 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END",
 /* 390 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause",
 /* 391 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list",
 /* 392 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB",
 /* 393 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW",
 /* 394 */ "cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW",
 /* 395 */ "trigger_time ::= BEFORE",
 /* 396 */ "trigger_time ::= AFTER",
 /* 397 */ "trigger_time ::= INSTEAD OF",
 /* 398 */ "trigger_time ::=",
 /* 399 */ "trigger_event ::= DELETE",
 /* 400 */ "trigger_event ::= INSERT",
 /* 401 */ "trigger_event ::= UPDATE",
 /* 402 */ "trigger_event ::= UPDATE OF idlist",
 /* 403 */ "foreach_clause ::=",
 /* 404 */ "foreach_clause ::= FOR EACH ROW",
 /* 405 */ "when_clause ::=",
 /* 406 */ "when_clause ::= WHEN expr",
 /* 407 */ "trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI",
 /* 408 */ "trigger_cmd_list ::= trigger_cmd SEMI",
 /* 409 */ "trigger_cmd_list ::= SEMI",
 /* 410 */ "trigger_cmd ::= update_stmt",
 /* 411 */ "trigger_cmd ::= insert_stmt",
 /* 412 */ "trigger_cmd ::= delete_stmt",
 /* 413 */ "trigger_cmd ::= select_stmt",
 /* 414 */ "raisetype ::= ROLLBACK|ABORT|FAIL",
 /* 415 */ "cmd ::= DROP TRIGGER ifexists fullname",
 /* 416 */ "cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG",
 /* 417 */ "cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG",
 /* 418 */ "cmd ::= ATTACH database_kw_opt expr AS expr key_opt",
 /* 419 */ "cmd ::= DETACH database_kw_opt expr",
 /* 420 */ "key_opt ::=",
 /* 421 */ "key_opt ::= KEY expr",
 /* 422 */ "database_kw_opt ::= DATABASE",
 /* 423 */ "database_kw_opt ::=",
 /* 424 */ "cmd ::= REINDEX",
 /* 425 */ "cmd ::= REINDEX nm dbnm",
 /* 426 */ "cmd ::= REINDEX ID_COLLATE",
 /* 427 */ "cmd ::= REINDEX nm DOT ID_TAB|ID_IDX",
 /* 428 */ "cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB",
 /* 429 */ "cmd ::= ANALYZE",
 /* 430 */ "cmd ::= ANALYZE nm dbnm",
 /* 431 */ "cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX",
 /* 432 */ "cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB",
 /* 433 */ "cmd ::= ALTER TABLE fullname RENAME TO nm",
 /* 434 */ "cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column",
 /* 435 */ "cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm",
 /* 436 */ "cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW",
 /* 437 */ "cmd ::= ALTER TABLE nm DOT ID_TAB",
 /* 438 */ "cmd ::= ALTER TABLE ID_DB|ID_TAB",
 /* 439 */ "kwcolumn_opt ::=",
 /* 440 */ "kwcolumn_opt ::= COLUMNKW",
 /* 441 */ "cmd ::= create_vtab",
 /* 442 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm",
 /* 443 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP",
 /* 444 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW",
 /* 445 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /* 446 */ "vtabarglist ::= vtabarg",
 /* 447 */ "vtabarglist ::= vtabarglist COMMA vtabarg",
 /* 448 */ "vtabarg ::=",
 /* 449 */ "vtabarg ::= vtabarg vtabargtoken",
 /* 450 */ "vtabargtoken ::= ANY",
 /* 451 */ "vtabargtoken ::= LP anylist RP",
 /* 452 */ "anylist ::=",
 /* 453 */ "anylist ::= anylist LP anylist RP",
 /* 454 */ "anylist ::= anylist ANY",
 /* 455 */ "with ::=",
 /* 456 */ "with ::= WITH wqlist",
 /* 457 */ "with ::= WITH RECURSIVE wqlist",
 /* 458 */ "wqas ::= AS",
 /* 459 */ "wqas ::= AS MATERIALIZED",
 /* 460 */ "wqas ::= AS NOT MATERIALIZED",
 /* 461 */ "wqlist ::= wqcte",
 /* 462 */ "wqlist ::= wqlist COMMA wqcte",
 /* 463 */ "wqlist ::= ID_TAB_NEW",
 /* 464 */ "wqcte ::= nm idxlist_opt wqas LP select RP",
 /* 465 */ "windowdefn_list ::= windowdefn",
 /* 466 */ "windowdefn_list ::= windowdefn_list COMMA windowdefn",
 /* 467 */ "windowdefn ::= nm AS LP window RP",
 /* 468 */ "window ::= PARTITION BY nexprlist orderby_opt frame_opt",
 /* 469 */ "window ::= nm PARTITION BY nexprlist orderby_opt frame_opt",
 /* 470 */ "window ::= ORDER BY sortlist frame_opt",
 /* 471 */ "window ::= nm ORDER BY sortlist frame_opt",
 /* 472 */ "window ::= frame_opt",
 /* 473 */ "window ::= nm frame_opt",
 /* 474 */ "frame_opt ::=",
 /* 475 */ "frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt",
 /* 476 */ "frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt",
 /* 477 */ "range_or_rows ::= RANGE|ROWS|GROUPS",
 /* 478 */ "frame_bound_s ::= frame_bound",
 /* 479 */ "frame_bound_s ::= UNBOUNDED PRECEDING",
 /* 480 */ "frame_bound_e ::= frame_bound",
 /* 481 */ "frame_bound_e ::= UNBOUNDED FOLLOWING",
 /* 482 */ "frame_bound ::= expr PRECEDING|FOLLOWING",
 /* 483 */ "frame_bound ::= CURRENT ROW",
 /* 484 */ "frame_exclude_opt ::=",
 /* 485 */ "frame_exclude_opt ::= EXCLUDE frame_exclude",
 /* 486 */ "frame_exclude ::= NO OTHERS",
 /* 487 */ "frame_exclude ::= CURRENT ROW",
 /* 488 */ "frame_exclude ::= GROUP",
 /* 489 */ "frame_exclude ::= TIES",
 /* 490 */ "window_clause ::= WINDOW windowdefn_list",
 /* 491 */ "filter_over ::= filter_clause over_clause",
 /* 492 */ "filter_over ::= over_clause",
 /* 493 */ "filter_over ::= filter_clause",
 /* 494 */ "over_clause ::= OVER LP window RP",
 /* 495 */ "over_clause ::= OVER nm",
 /* 496 */ "filter_clause ::= FILTER LP WHERE expr RP",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/*
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to sqlite3_parse and sqlite3_parseFree.
*/
void *sqlite3_parseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  sqlite3_parseARG_FETCH;
  if (parserContext->executeRules)
  {
      switch( yymajor ){
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
    case 195: /* cmd */
    case 198: /* ecmd */
    case 200: /* cmdx */
    case 248: /* select_stmt */
    case 278: /* delete_stmt */
    case 280: /* update_stmt */
    case 283: /* insert_stmt */
    case 305: /* trigger_cmd */
    case 309: /* create_vtab */
{
parser_safe_delete((yypminor->yy157));
}
      break;
    case 199: /* explain */
{
parser_safe_delete((yypminor->yy257));
}
      break;
    case 201: /* transtype */
    case 202: /* trans_opt */
{
parser_safe_delete((yypminor->yy124));
}
      break;
    case 203: /* nm */
    case 214: /* columnid */
    case 217: /* id */
    case 218: /* id_opt */
    case 219: /* ids */
    case 221: /* typename */
    case 272: /* dbnm */
    case 296: /* collate */
    case 311: /* vtabarg */
    case 312: /* vtabargtoken */
    case 313: /* anylist */
{
parser_safe_delete((yypminor->yy245));
}
      break;
    case 204: /* savepoint_opt */
    case 206: /* ifnotexists */
    case 230: /* autoinc */
    case 234: /* gen_always */
    case 240: /* tconscomma */
    case 247: /* ifexists */
    case 286: /* rp_opt */
    case 288: /* not_opt */
    case 294: /* uniqueflag */
    case 306: /* database_kw_opt */
    case 308: /* kwcolumn_opt */
{
parser_safe_delete((yypminor->yy101));
}
      break;
    case 205: /* temp */
    case 254: /* distinct */
{
parser_safe_delete((yypminor->yy636));
}
      break;
    case 207: /* fullname */
{
parser_safe_delete((yypminor->yy80));
}
      break;
    case 208: /* columnlist */
{
parser_safe_delete((yypminor->yy230));
}
      break;
    case 209: /* conslist_opt */
    case 239: /* conslist */
{
parser_safe_delete((yypminor->yy137));
}
      break;
    case 210: /* table_options */
{
parser_safe_delete((yypminor->yy577));
}
      break;
    case 211: /* select */
    case 250: /* selectnowith */
{
parser_safe_delete((yypminor->yy347));
}
      break;
    case 212: /* table_option */
{
parser_safe_delete((yypminor->yy163));
}
      break;
    case 213: /* column */
{
parser_safe_delete((yypminor->yy199));
}
      break;
    case 215: /* type */
    case 220: /* typetoken */
{
parser_safe_delete((yypminor->yy341));
}
      break;
    case 216: /* carglist */
{
parser_safe_delete((yypminor->yy261));
}
      break;
    case 222: /* signed */
    case 223: /* plus_num */
    case 224: /* minus_num */
    case 226: /* term */
    case 298: /* nmnum */
    case 299: /* number */
{
parser_safe_delete((yypminor->yy189));
}
      break;
    case 225: /* ccons */
{
parser_safe_delete((yypminor->yy430));
}
      break;
    case 227: /* expr */
    case 257: /* where_opt */
    case 259: /* having_opt */
    case 287: /* exprx */
    case 290: /* case_operand */
    case 292: /* case_else */
    case 297: /* vinto */
    case 303: /* when_clause */
    case 307: /* key_opt */
{
parser_safe_delete((yypminor->yy198));
}
      break;
    case 228: /* onconf */
    case 244: /* resolvetype */
    case 245: /* orconf */
{
parser_safe_delete((yypminor->yy646));
}
      break;
    case 229: /* sortorder */
{
parser_safe_delete((yypminor->yy351));
}
      break;
    case 231: /* idxlist_opt */
    case 242: /* idxlist */
{
parser_safe_delete((yypminor->yy419));
}
      break;
    case 232: /* refargs */
{
parser_safe_delete((yypminor->yy394));
}
      break;
    case 233: /* defer_subclause */
    case 243: /* defer_subclause_opt */
{
parser_safe_delete((yypminor->yy133));
}
      break;
    case 235: /* tnm */
{
parser_safe_delete((yypminor->yy538));
}
      break;
    case 236: /* refarg */
{
parser_safe_delete((yypminor->yy515));
}
      break;
    case 237: /* refact */
{
parser_safe_delete((yypminor->yy104));
}
      break;
    case 238: /* init_deferred_pred_opt */
{
parser_safe_delete((yypminor->yy238));
}
      break;
    case 241: /* tcons */
{
parser_safe_delete((yypminor->yy294));
}
      break;
    case 249: /* with */
{
parser_safe_delete((yypminor->yy489));
}
      break;
    case 251: /* oneselect */
{
parser_safe_delete((yypminor->yy338));
}
      break;
    case 252: /* multiselect_op */
{
parser_safe_delete((yypminor->yy266));
}
      break;
    case 253: /* values */
{
parser_safe_delete((yypminor->yy292));
}
      break;
    case 255: /* selcollist */
    case 265: /* sclp */
    case 279: /* returning */
{
parser_safe_delete((yypminor->yy247));
}
      break;
    case 256: /* from */
    case 267: /* joinsrc */
{
parser_safe_delete((yypminor->yy427));
}
      break;
    case 258: /* groupby_opt */
    case 263: /* nexprlist */
    case 264: /* exprlist */
    case 291: /* case_exprlist */
{
parser_safe_delete((yypminor->yy537));
}
      break;
    case 260: /* orderby_opt */
    case 276: /* sortlist */
{
parser_safe_delete((yypminor->yy611));
}
      break;
    case 261: /* limit_opt */
{
parser_safe_delete((yypminor->yy512));
}
      break;
    case 262: /* window_clause */
    case 317: /* windowdefn_list */
{
parser_safe_delete((yypminor->yy647));
}
      break;
    case 266: /* as */
{
parser_safe_delete((yypminor->yy522));
}
      break;
    case 268: /* singlesrc */
{
parser_safe_delete((yypminor->yy607));
}
      break;
    case 269: /* seltablist */
{
parser_safe_delete((yypminor->yy33));
}
      break;
    case 270: /* joinop */
{
parser_safe_delete((yypminor->yy315));
}
      break;
    case 271: /* joinconstr_opt */
{
parser_safe_delete((yypminor->yy71));
}
      break;
    case 273: /* indexed_opt */
{
parser_safe_delete((yypminor->yy108));
}
      break;
    case 274: /* idlist */
    case 282: /* idlist_opt */
    case 310: /* vtabarglist */
{
parser_safe_delete((yypminor->yy613));
}
      break;
    case 275: /* xfullname */
{
parser_safe_delete((yypminor->yy208));
}
      break;
    case 277: /* nulls */
{
parser_safe_delete((yypminor->yy342));
}
      break;
    case 281: /* setlist */
{
parser_safe_delete((yypminor->yy129));
}
      break;
    case 284: /* insert_cmd */
{
parser_safe_delete((yypminor->yy258));
}
      break;
    case 285: /* upsert */
{
parser_safe_delete((yypminor->yy392));
}
      break;
    case 289: /* likeop */
{
parser_safe_delete((yypminor->yy128));
}
      break;
    case 293: /* filter_over */
{
parser_safe_delete((yypminor->yy393));
}
      break;
    case 295: /* idxlist_single */
{
parser_safe_delete((yypminor->yy500));
}
      break;
    case 300: /* trigger_time */
{
parser_safe_delete((yypminor->yy105));
}
      break;
    case 301: /* trigger_event */
{
parser_safe_delete((yypminor->yy481));
}
      break;
    case 302: /* foreach_clause */
{
parser_safe_delete((yypminor->yy367));
}
      break;
    case 304: /* trigger_cmd_list */
{
parser_safe_delete((yypminor->yy276));
}
      break;
    case 314: /* wqlist */
{
parser_safe_delete((yypminor->yy514));
}
      break;
    case 315: /* wqas */
{
parser_safe_delete((yypminor->yy221));
}
      break;
    case 316: /* wqcte */
{
parser_safe_delete((yypminor->yy560));
}
      break;
    case 318: /* windowdefn */
{
parser_safe_delete((yypminor->yy568));
}
      break;
    case 319: /* window */
{
parser_safe_delete((yypminor->yy52));
}
      break;
    case 320: /* frame_opt */
{
parser_safe_delete((yypminor->yy428));
}
      break;
    case 321: /* range_or_rows */
{
parser_safe_delete((yypminor->yy656));
}
      break;
    case 322: /* frame_bound_s */
    case 324: /* frame_bound_e */
{
parser_safe_delete((yypminor->yy633));
}
      break;
    case 325: /* frame_bound */
{
parser_safe_delete((yypminor->yy633));parser_safe_delete((yypminor->yy633));parser_safe_delete((yypminor->yy633));
}
      break;
    case 327: /* filter_clause */
{
parser_safe_delete((yypminor->yy275));
}
      break;
    case 328: /* over_clause */
{
parser_safe_delete((yypminor->yy381));
}
      break;
        default:  break;   /* If no destructor action specified: do nothing */
      }
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  /* There is no mechanism by which the parser stack can be popped below
  ** empty in SQLite.  */
  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  delete yytos->tokens;
  yytos->tokens = nullptr;
  pParser->yyidx--;
  return yymajor;
}

/*
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from sqlite3_parseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void sqlite3_parseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  /* In SQLite, we never try to destroy a parser that was not successfully
  ** created in the first place. */
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int sqlite3_parseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
  GET_CONTEXT;

  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0
             && parserContext->doFallbacks ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if(
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   UNUSED(yypMinor);
   sqlite3_parseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */

    parserContext->error(QObject::tr("Parser stack overflow"));
   sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
  yytos->tokens = new QList<Token*>();
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 196, 1 },
  { 197, 2 },
  { 197, 1 },
  { 198, 1 },
  { 198, 3 },
  { 199, 0 },
  { 199, 1 },
  { 199, 3 },
  { 200, 1 },
  { 195, 3 },
  { 202, 0 },
  { 202, 1 },
  { 202, 2 },
  { 202, 2 },
  { 201, 0 },
  { 201, 1 },
  { 201, 1 },
  { 201, 1 },
  { 195, 2 },
  { 195, 2 },
  { 195, 2 },
  { 204, 1 },
  { 204, 0 },
  { 195, 2 },
  { 195, 3 },
  { 195, 5 },
  { 195, 2 },
  { 195, 3 },
  { 195, 5 },
  { 195, 10 },
  { 195, 7 },
  { 195, 7 },
  { 195, 5 },
  { 210, 0 },
  { 210, 1 },
  { 210, 3 },
  { 212, 2 },
  { 212, 1 },
  { 212, 2 },
  { 212, 1 },
  { 206, 0 },
  { 206, 3 },
  { 205, 1 },
  { 205, 0 },
  { 208, 3 },
  { 208, 1 },
  { 213, 3 },
  { 214, 1 },
  { 214, 1 },
  { 217, 1 },
  { 218, 1 },
  { 218, 0 },
  { 219, 1 },
  { 203, 1 },
  { 203, 1 },
  { 203, 1 },
  { 215, 0 },
  { 215, 1 },
  { 220, 1 },
  { 220, 4 },
  { 220, 6 },
  { 221, 1 },
  { 221, 2 },
  { 221, 1 },
  { 222, 1 },
  { 222, 1 },
  { 216, 2 },
  { 216, 0 },
  { 225, 2 },
  { 225, 2 },
  { 225, 4 },
  { 225, 3 },
  { 225, 3 },
  { 225, 2 },
  { 225, 2 },
  { 225, 2 },
  { 225, 3 },
  { 225, 5 },
  { 225, 2 },
  { 225, 4 },
  { 225, 4 },
  { 225, 1 },
  { 225, 2 },
  { 225, 6 },
  { 225, 2 },
  { 225, 2 },
  { 225, 2 },
  { 225, 3 },
  { 226, 1 },
  { 226, 1 },
  { 226, 1 },
  { 226, 1 },
  { 235, 1 },
  { 235, 1 },
  { 234, 2 },
  { 234, 0 },
  { 230, 0 },
  { 230, 1 },
  { 232, 0 },
  { 232, 2 },
  { 236, 2 },
  { 236, 3 },
  { 236, 3 },
  { 236, 3 },
  { 236, 2 },
  { 237, 2 },
  { 237, 2 },
  { 237, 1 },
  { 237, 1 },
  { 237, 2 },
  { 233, 3 },
  { 233, 2 },
  { 238, 0 },
  { 238, 2 },
  { 238, 2 },
  { 209, 0 },
  { 209, 2 },
  { 239, 3 },
  { 239, 1 },
  { 240, 1 },
  { 240, 0 },
  { 241, 2 },
  { 241, 7 },
  { 241, 5 },
  { 241, 5 },
  { 241, 10 },
  { 241, 2 },
  { 241, 7 },
  { 241, 4 },
  { 243, 0 },
  { 243, 1 },
  { 228, 0 },
  { 228, 3 },
  { 245, 0 },
  { 245, 2 },
  { 244, 1 },
  { 244, 1 },
  { 244, 1 },
  { 195, 4 },
  { 195, 6 },
  { 195, 4 },
  { 247, 2 },
  { 247, 0 },
  { 195, 8 },
  { 195, 7 },
  { 195, 5 },
  { 195, 4 },
  { 195, 6 },
  { 195, 4 },
  { 195, 1 },
  { 248, 1 },
  { 211, 2 },
  { 250, 1 },
  { 250, 3 },
  { 250, 1 },
  { 250, 3 },
  { 251, 9 },
  { 251, 10 },
  { 253, 4 },
  { 253, 5 },
  { 252, 1 },
  { 252, 2 },
  { 252, 1 },
  { 252, 1 },
  { 254, 1 },
  { 254, 1 },
  { 254, 0 },
  { 265, 2 },
  { 265, 0 },
  { 255, 3 },
  { 255, 2 },
  { 255, 4 },
  { 255, 1 },
  { 255, 4 },
  { 266, 2 },
  { 266, 1 },
  { 266, 2 },
  { 266, 1 },
  { 266, 0 },
  { 256, 0 },
  { 256, 2 },
  { 267, 2 },
  { 267, 0 },
  { 269, 4 },
  { 269, 0 },
  { 268, 4 },
  { 268, 4 },
  { 268, 4 },
  { 268, 6 },
  { 268, 0 },
  { 268, 2 },
  { 268, 3 },
  { 268, 1 },
  { 268, 3 },
  { 268, 1 },
  { 271, 2 },
  { 271, 4 },
  { 271, 0 },
  { 272, 0 },
  { 272, 2 },
  { 207, 1 },
  { 207, 3 },
  { 275, 1 },
  { 275, 3 },
  { 275, 5 },
  { 275, 3 },
  { 275, 5 },
  { 275, 3 },
  { 270, 1 },
  { 270, 1 },
  { 270, 2 },
  { 270, 3 },
  { 270, 4 },
  { 270, 1 },
  { 273, 0 },
  { 273, 3 },
  { 273, 2 },
  { 273, 3 },
  { 260, 0 },
  { 260, 3 },
  { 276, 5 },
  { 276, 3 },
  { 229, 1 },
  { 229, 1 },
  { 229, 0 },
  { 277, 2 },
  { 277, 2 },
  { 277, 0 },
  { 258, 0 },
  { 258, 3 },
  { 258, 2 },
  { 259, 0 },
  { 259, 2 },
  { 261, 0 },
  { 261, 2 },
  { 261, 4 },
  { 261, 4 },
  { 195, 1 },
  { 278, 9 },
  { 278, 3 },
  { 278, 5 },
  { 278, 6 },
  { 278, 4 },
  { 257, 0 },
  { 257, 2 },
  { 257, 1 },
  { 279, 0 },
  { 279, 2 },
  { 195, 1 },
  { 280, 12 },
  { 280, 3 },
  { 280, 5 },
  { 280, 6 },
  { 280, 4 },
  { 281, 5 },
  { 281, 7 },
  { 281, 3 },
  { 281, 5 },
  { 281, 0 },
  { 281, 2 },
  { 281, 3 },
  { 281, 1 },
  { 282, 0 },
  { 282, 3 },
  { 274, 3 },
  { 274, 1 },
  { 274, 0 },
  { 274, 3 },
  { 274, 1 },
  { 195, 1 },
  { 283, 8 },
  { 283, 8 },
  { 283, 7 },
  { 283, 3 },
  { 283, 5 },
  { 283, 4 },
  { 283, 6 },
  { 284, 2 },
  { 284, 1 },
  { 285, 0 },
  { 285, 11 },
  { 285, 8 },
  { 285, 4 },
  { 287, 4 },
  { 287, 6 },
  { 287, 1 },
  { 287, 3 },
  { 287, 5 },
  { 287, 3 },
  { 287, 6 },
  { 287, 1 },
  { 287, 3 },
  { 287, 1 },
  { 287, 3 },
  { 287, 2 },
  { 287, 5 },
  { 287, 4 },
  { 287, 1 },
  { 287, 3 },
  { 287, 6 },
  { 287, 5 },
  { 287, 4 },
  { 287, 3 },
  { 287, 3 },
  { 287, 3 },
  { 287, 3 },
  { 287, 3 },
  { 287, 3 },
  { 287, 3 },
  { 287, 3 },
  { 287, 4 },
  { 287, 6 },
  { 287, 2 },
  { 287, 3 },
  { 287, 4 },
  { 287, 6 },
  { 287, 5 },
  { 287, 2 },
  { 287, 2 },
  { 287, 2 },
  { 287, 2 },
  { 287, 3 },
  { 287, 6 },
  { 287, 6 },
  { 287, 3 },
  { 287, 6 },
  { 287, 5 },
  { 287, 4 },
  { 287, 5 },
  { 287, 4 },
  { 287, 6 },
  { 287, 6 },
  { 287, 5 },
  { 227, 0 },
  { 227, 1 },
  { 288, 0 },
  { 288, 1 },
  { 286, 0 },
  { 286, 1 },
  { 289, 1 },
  { 291, 5 },
  { 291, 4 },
  { 292, 2 },
  { 292, 0 },
  { 290, 1 },
  { 290, 0 },
  { 264, 1 },
  { 264, 0 },
  { 263, 3 },
  { 263, 1 },
  { 195, 12 },
  { 195, 8 },
  { 195, 7 },
  { 195, 5 },
  { 294, 1 },
  { 294, 0 },
  { 231, 0 },
  { 231, 3 },
  { 242, 3 },
  { 242, 1 },
  { 295, 3 },
  { 295, 1 },
  { 296, 0 },
  { 296, 2 },
  { 296, 2 },
  { 195, 4 },
  { 195, 6 },
  { 195, 4 },
  { 195, 2 },
  { 195, 3 },
  { 297, 2 },
  { 297, 0 },
  { 195, 3 },
  { 195, 5 },
  { 195, 6 },
  { 195, 5 },
  { 195, 6 },
  { 195, 4 },
  { 195, 2 },
  { 298, 1 },
  { 298, 1 },
  { 298, 1 },
  { 298, 1 },
  { 298, 1 },
  { 223, 2 },
  { 223, 1 },
  { 224, 2 },
  { 299, 1 },
  { 299, 1 },
  { 195, 15 },
  { 195, 12 },
  { 195, 14 },
  { 195, 10 },
  { 195, 7 },
  { 195, 5 },
  { 300, 1 },
  { 300, 1 },
  { 300, 2 },
  { 300, 0 },
  { 301, 1 },
  { 301, 1 },
  { 301, 1 },
  { 301, 3 },
  { 302, 0 },
  { 302, 3 },
  { 303, 0 },
  { 303, 2 },
  { 304, 3 },
  { 304, 2 },
  { 304, 1 },
  { 305, 1 },
  { 305, 1 },
  { 305, 1 },
  { 305, 1 },
  { 246, 1 },
  { 195, 4 },
  { 195, 6 },
  { 195, 4 },
  { 195, 6 },
  { 195, 3 },
  { 307, 0 },
  { 307, 2 },
  { 306, 1 },
  { 306, 0 },
  { 195, 1 },
  { 195, 3 },
  { 195, 2 },
  { 195, 4 },
  { 195, 2 },
  { 195, 1 },
  { 195, 3 },
  { 195, 4 },
  { 195, 2 },
  { 195, 6 },
  { 195, 6 },
  { 195, 6 },
  { 195, 6 },
  { 195, 5 },
  { 195, 3 },
  { 308, 0 },
  { 308, 1 },
  { 195, 1 },
  { 309, 8 },
  { 309, 11 },
  { 309, 7 },
  { 309, 5 },
  { 310, 1 },
  { 310, 3 },
  { 311, 0 },
  { 311, 2 },
  { 312, 1 },
  { 312, 3 },
  { 313, 0 },
  { 313, 4 },
  { 313, 2 },
  { 249, 0 },
  { 249, 2 },
  { 249, 3 },
  { 315, 1 },
  { 315, 2 },
  { 315, 3 },
  { 314, 1 },
  { 314, 3 },
  { 314, 1 },
  { 316, 6 },
  { 317, 1 },
  { 317, 3 },
  { 318, 5 },
  { 319, 5 },
  { 319, 6 },
  { 319, 4 },
  { 319, 5 },
  { 319, 1 },
  { 319, 2 },
  { 320, 0 },
  { 320, 3 },
  { 320, 6 },
  { 321, 1 },
  { 322, 1 },
  { 322, 2 },
  { 324, 1 },
  { 324, 2 },
  { 325, 2 },
  { 325, 2 },
  { 323, 0 },
  { 323, 2 },
  { 326, 2 },
  { 326, 2 },
  { 326, 1 },
  { 326, 1 },
  { 262, 2 },
  { 293, 2 },
  { 293, 1 },
  { 293, 1 },
  { 328, 4 },
  { 328, 2 },
  { 327, 5 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  sqlite3_parseARG_FETCH;
  SqliteStatement* objectForTokens = 0;
  QStringList noTokenInheritanceFields;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  if (parserContext->executeRules)
  {
      switch( yyruleno ){
      /* Beginning here are the reduction cases.  A typical example
      ** follows:
      **   case 0:
      **  #line <lineno> <grammarfile>
      **     { ... }           // User supplied code
      **  #line <lineno> <thisfile>
      **     break;
      */
      case 1: /* cmdlist ::= cmdlist ecmd */
{parserContext->addQuery(yymsp[0].minor.yy157); DONT_INHERIT_TOKENS("cmdlist");}
        break;
      case 2: /* cmdlist ::= ecmd */
{parserContext->addQuery(yymsp[0].minor.yy157);}
        break;
      case 3: /* ecmd ::= SEMI */
{yygotominor.yy157 = new SqliteEmptyQuery();}
        break;
      case 4: /* ecmd ::= explain cmdx SEMI */
{
                                                yygotominor.yy157 = yymsp[-1].minor.yy157;
                                                yygotominor.yy157->explain = yymsp[-2].minor.yy257->explain;
                                                yygotominor.yy157->queryPlan = yymsp[-2].minor.yy257->queryPlan;
                                                delete yymsp[-2].minor.yy257;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 5: /* explain ::= */
{yygotominor.yy257 = new ParserStubExplain(false, false);}
        break;
      case 6: /* explain ::= EXPLAIN */
{yygotominor.yy257 = new ParserStubExplain(true, false);}
        break;
      case 7: /* explain ::= EXPLAIN QUERY PLAN */
{yygotominor.yy257 = new ParserStubExplain(true, true);}
        break;
      case 8: /* cmdx ::= cmd */
      case 410: /* trigger_cmd ::= update_stmt */ yytestcase(yyruleno==410);
      case 411: /* trigger_cmd ::= insert_stmt */ yytestcase(yyruleno==411);
      case 412: /* trigger_cmd ::= delete_stmt */ yytestcase(yyruleno==412);
      case 413: /* trigger_cmd ::= select_stmt */ yytestcase(yyruleno==413);
      case 441: /* cmd ::= create_vtab */ yytestcase(yyruleno==441);
{yygotominor.yy157 = yymsp[0].minor.yy157;}
        break;
      case 9: /* cmd ::= BEGIN transtype trans_opt */
{
                                                yygotominor.yy157 = new SqliteBeginTrans(
                                                        yymsp[-1].minor.yy124->type,
                                                        yymsp[0].minor.yy124->transactionKw,
                                                        yymsp[0].minor.yy124->name
                                                    );
                                                delete yymsp[0].minor.yy124;
                                                delete yymsp[-1].minor.yy124;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 10: /* trans_opt ::= */
      case 14: /* transtype ::= */ yytestcase(yyruleno==14);
{yygotominor.yy124 = new ParserStubTransDetails();}
        break;
      case 11: /* trans_opt ::= TRANSACTION */
{
                                                yygotominor.yy124 = new ParserStubTransDetails();
                                                yygotominor.yy124->transactionKw = true;
                                            }
        break;
      case 12: /* trans_opt ::= TRANSACTION nm */
      case 13: /* trans_opt ::= TRANSACTION ID_TRANS */ yytestcase(yyruleno==13);
{
                                                yygotominor.yy124 = new ParserStubTransDetails();
                                                yygotominor.yy124->transactionKw = true;
                                                yygotominor.yy124->name = *(yymsp[0].minor.yy245);
                                                delete yymsp[0].minor.yy245;
                                            }
        break;
      case 15: /* transtype ::= DEFERRED */
{
                                                yygotominor.yy124 = new ParserStubTransDetails();
                                                yygotominor.yy124->type = SqliteBeginTrans::Type::DEFERRED;
                                            }
        break;
      case 16: /* transtype ::= IMMEDIATE */
{
                                                yygotominor.yy124 = new ParserStubTransDetails();
                                                yygotominor.yy124->type = SqliteBeginTrans::Type::IMMEDIATE;
                                            }
        break;
      case 17: /* transtype ::= EXCLUSIVE */
{
                                                yygotominor.yy124 = new ParserStubTransDetails();
                                                yygotominor.yy124->type = SqliteBeginTrans::Type::EXCLUSIVE;
                                            }
        break;
      case 18: /* cmd ::= COMMIT trans_opt */
{
                                                yygotominor.yy157 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy124->transactionKw,
                                                        yymsp[0].minor.yy124->name,
                                                        false
                                                    );
                                                delete yymsp[0].minor.yy124;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 19: /* cmd ::= END trans_opt */
{
                                                yygotominor.yy157 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy124->transactionKw,
                                                        yymsp[0].minor.yy124->name,
                                                        true
                                                    );
                                                delete yymsp[0].minor.yy124;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 20: /* cmd ::= ROLLBACK trans_opt */
{
                                                yygotominor.yy157 = new SqliteRollback(
                                                        yymsp[0].minor.yy124->transactionKw,
                                                        yymsp[0].minor.yy124->name
                                                    );
                                                delete yymsp[0].minor.yy124;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 21: /* savepoint_opt ::= SAVEPOINT */
      case 41: /* ifnotexists ::= IF NOT EXISTS */ yytestcase(yyruleno==41);
      case 94: /* gen_always ::= GENERATED ALWAYS */ yytestcase(yyruleno==94);
      case 97: /* autoinc ::= AUTOINCR */ yytestcase(yyruleno==97);
      case 119: /* tconscomma ::= COMMA */ yytestcase(yyruleno==119);
      case 141: /* ifexists ::= IF EXISTS */ yytestcase(yyruleno==141);
      case 336: /* not_opt ::= NOT */ yytestcase(yyruleno==336);
      case 338: /* rp_opt ::= RP */ yytestcase(yyruleno==338);
      case 354: /* uniqueflag ::= UNIQUE */ yytestcase(yyruleno==354);
      case 422: /* database_kw_opt ::= DATABASE */ yytestcase(yyruleno==422);
      case 439: /* kwcolumn_opt ::= */ yytestcase(yyruleno==439);
{yygotominor.yy101 = new bool(true);}
        break;
      case 22: /* savepoint_opt ::= */
      case 40: /* ifnotexists ::= */ yytestcase(yyruleno==40);
      case 95: /* gen_always ::= */ yytestcase(yyruleno==95);
      case 96: /* autoinc ::= */ yytestcase(yyruleno==96);
      case 120: /* tconscomma ::= */ yytestcase(yyruleno==120);
      case 142: /* ifexists ::= */ yytestcase(yyruleno==142);
      case 335: /* not_opt ::= */ yytestcase(yyruleno==335);
      case 337: /* rp_opt ::= */ yytestcase(yyruleno==337);
      case 355: /* uniqueflag ::= */ yytestcase(yyruleno==355);
      case 423: /* database_kw_opt ::= */ yytestcase(yyruleno==423);
      case 440: /* kwcolumn_opt ::= COLUMNKW */ yytestcase(yyruleno==440);
{yygotominor.yy101 = new bool(false);}
        break;
      case 23: /* cmd ::= SAVEPOINT nm */
{
                                                yygotominor.yy157 = new SqliteSavepoint(*(yymsp[0].minor.yy245));
                                                delete yymsp[0].minor.yy245;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 24: /* cmd ::= RELEASE savepoint_opt nm */
{
                                                yygotominor.yy157 = new SqliteRelease(*(yymsp[-1].minor.yy101), *(yymsp[0].minor.yy245));
                                                delete yymsp[0].minor.yy245;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 25: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt nm */
      case 26: /* cmd ::= SAVEPOINT ID_TRANS */ yytestcase(yyruleno==26);
{
                                                yygotominor.yy157 = new SqliteRollback(
                                                        yymsp[-3].minor.yy124->transactionKw,
                                                        *(yymsp[-1].minor.yy101),
                                                        *(yymsp[0].minor.yy245)
                                                    );
                                                delete yymsp[-1].minor.yy101;
                                                delete yymsp[-3].minor.yy124;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 27: /* cmd ::= RELEASE savepoint_opt ID_TRANS */
      case 28: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS */ yytestcase(yyruleno==28);
{  yy_destructor(yypParser,204,&yymsp[-1].minor);
}
        break;
      case 29: /* cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options */
{
                                                yygotominor.yy157 = new SqliteCreateTable(
                                                        *(yymsp[-6].minor.yy101),
                                                        *(yymsp[-8].minor.yy636),
                                                        yymsp[-5].minor.yy80->name1,
                                                        yymsp[-5].minor.yy80->name2,
                                                        *(yymsp[-3].minor.yy230),
                                                        *(yymsp[-2].minor.yy137),
                                                        *(yymsp[0].minor.yy577)
                                                    );
                                                delete yymsp[-6].minor.yy101;
                                                delete yymsp[-8].minor.yy636;
                                                delete yymsp[-3].minor.yy230;
                                                delete yymsp[-2].minor.yy137;
                                                delete yymsp[-5].minor.yy80;
                                                delete yymsp[0].minor.yy577;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 30: /* cmd ::= CREATE temp TABLE ifnotexists fullname AS select */
{
                                                yygotominor.yy157 = new SqliteCreateTable(
                                                        *(yymsp[-3].minor.yy101),
                                                        *(yymsp[-5].minor.yy636),
                                                        yymsp[-2].minor.yy80->name1,
                                                        yymsp[-2].minor.yy80->name2,
                                                        yymsp[0].minor.yy347
                                                    );
                                                delete yymsp[-3].minor.yy101;
                                                delete yymsp[-5].minor.yy636;
                                                delete yymsp[-2].minor.yy80;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 31: /* cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW */
      case 144: /* cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW */ yytestcase(yyruleno==144);
      case 393: /* cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW */ yytestcase(yyruleno==393);
{  yy_destructor(yypParser,205,&yymsp[-5].minor);
  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 32: /* cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW */
      case 145: /* cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW */ yytestcase(yyruleno==145);
      case 394: /* cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW */ yytestcase(yyruleno==394);
{  yy_destructor(yypParser,205,&yymsp[-3].minor);
}
        break;
      case 33: /* table_options ::= */
{yygotominor.yy577 = new ParserCreateTableOptionList();}
        break;
      case 34: /* table_options ::= table_option */
{
                                                yygotominor.yy577 = new ParserCreateTableOptionList();
                                                yygotominor.yy577->append(yymsp[0].minor.yy163);
                                            }
        break;
      case 35: /* table_options ::= table_options COMMA table_option */
{
                                                yymsp[-2].minor.yy577->append(yymsp[0].minor.yy163);
                                                yygotominor.yy577 = yymsp[-2].minor.yy577;
                                                DONT_INHERIT_TOKENS("table_options");
                                            }
        break;
      case 36: /* table_option ::= WITHOUT nm */
{
                                                if (yymsp[0].minor.yy245->toLower() != "rowid")
                                                    parserContext->errorAtToken(QString("Invalid table option: %1").arg(*(yymsp[0].minor.yy245)));

                                                yygotominor.yy163 = new ParserStubCreateTableOption(ParserStubCreateTableOption::WITHOUT_ROWID);
                                                delete yymsp[0].minor.yy245;
                                            }
        break;
      case 37: /* table_option ::= nm */
      case 38: /* table_option ::= WITHOUT CTX_ROWID_KW */ yytestcase(yyruleno==38);
      case 39: /* table_option ::= CTX_STRICT_KW */ yytestcase(yyruleno==39);
{
                                                if (yymsp[0].minor.yy245->toLower() != "strict")
                                                    parserContext->errorAtToken(QString("Invalid table option: %1").arg(*(yymsp[0].minor.yy245)));

                                                yygotominor.yy163 = new ParserStubCreateTableOption(ParserStubCreateTableOption::STRICT);
                                                delete yymsp[0].minor.yy245;
                                            }
        break;
      case 42: /* temp ::= TEMP */
{yygotominor.yy636 = new int( (yymsp[0].minor.yy0->value.length() > 4) ? 2 : 1 );}
        break;
      case 43: /* temp ::= */
      case 166: /* distinct ::= */ yytestcase(yyruleno==166);
{yygotominor.yy636 = new int(0);}
        break;
      case 44: /* columnlist ::= columnlist COMMA column */
{
                                                yymsp[-2].minor.yy230->append(yymsp[0].minor.yy199);
                                                yygotominor.yy230 = yymsp[-2].minor.yy230;
                                                DONT_INHERIT_TOKENS("columnlist");
                                            }
        break;
      case 45: /* columnlist ::= column */
{
                                                yygotominor.yy230 = new ParserCreateTableColumnList();
                                                yygotominor.yy230->append(yymsp[0].minor.yy199);
                                            }
        break;
      case 46: /* column ::= columnid type carglist */
{
                                                yygotominor.yy199 = new SqliteCreateTable::Column(*(yymsp[-2].minor.yy245), yymsp[-1].minor.yy341, *(yymsp[0].minor.yy261));
                                                delete yymsp[-2].minor.yy245;
                                                delete yymsp[0].minor.yy261;
                                                objectForTokens = yygotominor.yy199;
                                            }
        break;
      case 47: /* columnid ::= nm */
      case 48: /* columnid ::= ID_COL_NEW */ yytestcase(yyruleno==48);
      case 53: /* nm ::= id */ yytestcase(yyruleno==53);
      case 61: /* typename ::= ids */ yytestcase(yyruleno==61);
      case 199: /* dbnm ::= DOT nm */ yytestcase(yyruleno==199);
      case 363: /* collate ::= COLLATE ids */ yytestcase(yyruleno==363);
      case 364: /* collate ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==364);
{yygotominor.yy245 = yymsp[0].minor.yy245;}
        break;
      case 49: /* id ::= ID */
{
                                                yygotominor.yy245 = new QString(
                                                    stripObjName(
                                                        yymsp[0].minor.yy0->value
                                                    )
                                                );
                                            }
        break;
      case 50: /* id_opt ::= id */
{
                                                yygotominor.yy245 = yymsp[0].minor.yy245;
                                            }
        break;
      case 51: /* id_opt ::= */
{
                                                yygotominor.yy245 = new QString();
                                            }
        break;
      case 52: /* ids ::= ID|STRING */
      case 55: /* nm ::= JOIN_KW */ yytestcase(yyruleno==55);
{yygotominor.yy245 = new QString(yymsp[0].minor.yy0->value);}
        break;
      case 54: /* nm ::= STRING */
{yygotominor.yy245 = new QString(stripString(yymsp[0].minor.yy0->value));}
        break;
      case 56: /* type ::= */
{yygotominor.yy341 = nullptr;}
        break;
      case 57: /* type ::= typetoken */
{yygotominor.yy341 = yymsp[0].minor.yy341;}
        break;
      case 58: /* typetoken ::= typename */
{
                                                yygotominor.yy341 = new SqliteColumnType(*(yymsp[0].minor.yy245));
                                                delete yymsp[0].minor.yy245;
                                                objectForTokens = yygotominor.yy341;
                                            }
        break;
      case 59: /* typetoken ::= typename LP signed RP */
{
                                                yygotominor.yy341 = new SqliteColumnType(*(yymsp[-3].minor.yy245), *(yymsp[-1].minor.yy189));
                                                delete yymsp[-3].minor.yy245;
                                                delete yymsp[-1].minor.yy189;
                                                objectForTokens = yygotominor.yy341;
                                            }
        break;
      case 60: /* typetoken ::= typename LP signed COMMA signed RP */
{
                                                yygotominor.yy341 = new SqliteColumnType(*(yymsp[-5].minor.yy245), *(yymsp[-3].minor.yy189), *(yymsp[-1].minor.yy189));
                                                delete yymsp[-5].minor.yy245;
                                                delete yymsp[-3].minor.yy189;
                                                delete yymsp[-1].minor.yy189;
                                                objectForTokens = yygotominor.yy341;
                                            }
        break;
      case 62: /* typename ::= typename ids */
      case 63: /* typename ::= ID_COL_TYPE */ yytestcase(yyruleno==63);
{
                                                yymsp[-1].minor.yy245->append(" " + *(yymsp[0].minor.yy245));
                                                delete yymsp[0].minor.yy245;
                                                yygotominor.yy245 = yymsp[-1].minor.yy245;
                                            }
        break;
      case 64: /* signed ::= plus_num */
      case 65: /* signed ::= minus_num */ yytestcase(yyruleno==65);
      case 379: /* nmnum ::= plus_num */ yytestcase(yyruleno==379);
      case 384: /* plus_num ::= PLUS number */ yytestcase(yyruleno==384);
      case 385: /* plus_num ::= number */ yytestcase(yyruleno==385);
{yygotominor.yy189 = yymsp[0].minor.yy189;}
        break;
      case 66: /* carglist ::= carglist ccons */
{
                                                yymsp[-1].minor.yy261->append(yymsp[0].minor.yy430);
                                                yygotominor.yy261 = yymsp[-1].minor.yy261;
                                                DONT_INHERIT_TOKENS("carglist");
                                            }
        break;
      case 67: /* carglist ::= */
{yygotominor.yy261 = new ParserCreateTableColumnConstraintList();}
        break;
      case 68: /* ccons ::= CONSTRAINT nm */
{
                                                yygotominor.yy430 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy430->initDefNameOnly(*(yymsp[0].minor.yy245));
                                                delete yymsp[0].minor.yy245;
                                                objectForTokens = yygotominor.yy430;
                                            }
        break;
      case 69: /* ccons ::= DEFAULT term */
{
                                                yygotominor.yy430 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy430->initDefTerm(*(yymsp[0].minor.yy189));
                                                delete yymsp[0].minor.yy189;
                                                objectForTokens = yygotominor.yy430;
                                            }
        break;
      case 70: /* ccons ::= DEFAULT LP expr RP */
{
                                                yygotominor.yy430 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy430->initDefExpr(yymsp[-1].minor.yy198);
                                                objectForTokens = yygotominor.yy430;
                                            }
        break;
      case 71: /* ccons ::= DEFAULT PLUS term */
{
                                                yygotominor.yy430 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy430->initDefTerm(*(yymsp[0].minor.yy189), false);
                                                delete yymsp[0].minor.yy189;
                                                objectForTokens = yygotominor.yy430;
                                            }
        break;
      case 72: /* ccons ::= DEFAULT MINUS term */
{
                                                yygotominor.yy430 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy430->initDefTerm(*(yymsp[0].minor.yy189), true);
                                                delete yymsp[0].minor.yy189;
                                                objectForTokens = yygotominor.yy430;
                                            }
        break;
      case 73: /* ccons ::= DEFAULT id */
{
                                                yygotominor.yy430 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy430->initDefId(*(yymsp[0].minor.yy245));
                                                delete yymsp[0].minor.yy245;
                                                objectForTokens = yygotominor.yy430;
                                            }
        break;
      case 74: /* ccons ::= DEFAULT CTIME_KW */
{
                                                yygotominor.yy430 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy430->initDefCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy430;
                                            }
        break;
      case 75: /* ccons ::= NULL onconf */
{
                                                yygotominor.yy430 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy430->initNull(*(yymsp[0].minor.yy646));
                                                delete yymsp[0].minor.yy646;
                                                objectForTokens = yygotominor.yy430;
                                            }
        break;
      case 76: /* ccons ::= NOT NULL onconf */
{
                                                yygotominor.yy430 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy430->initNotNull(*(yymsp[0].minor.yy646));
                                                delete yymsp[0].minor.yy646;
                                                objectForTokens = yygotominor.yy430;
                                            }
        break;
      case 77: /* ccons ::= PRIMARY KEY sortorder onconf autoinc */
{
                                                yygotominor.yy430 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy430->initPk(*(yymsp[-2].minor.yy351), *(yymsp[-1].minor.yy646), *(yymsp[0].minor.yy101));
                                                delete yymsp[-2].minor.yy351;
                                                delete yymsp[0].minor.yy101;
                                                delete yymsp[-1].minor.yy646;
                                                objectForTokens = yygotominor.yy430;
                                            }
        break;
      case 78: /* ccons ::= UNIQUE onconf */
{
                                                yygotominor.yy430 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy430->initUnique(*(yymsp[0].minor.yy646));
                                                delete yymsp[0].minor.yy646;
                                                objectForTokens = yygotominor.yy430;
                                            }
        break;
      case 79: /* ccons ::= CHECK LP expr RP */
{
                                                yygotominor.yy430 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy430->initCheck(yymsp[-1].minor.yy198);
                                                objectForTokens = yygotominor.yy430;
                                            }
        break;
      case 80: /* ccons ::= REFERENCES nm idxlist_opt refargs */
{
                                                yygotominor.yy430 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy430->initFk(*(yymsp[-2].minor.yy245), *(yymsp[-1].minor.yy419), *(yymsp[0].minor.yy394));
                                                delete yymsp[-2].minor.yy245;
                                                delete yymsp[0].minor.yy394;
                                                delete yymsp[-1].minor.yy419;
                                                objectForTokens = yygotominor.yy430;
                                            }
        break;
      case 81: /* ccons ::= defer_subclause */
{
                                                yygotominor.yy430 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy430->initDefer(yymsp[0].minor.yy133->initially, yymsp[0].minor.yy133->deferrable);
                                                delete yymsp[0].minor.yy133;
                                                objectForTokens = yygotominor.yy430;
                                            }
        break;
      case 82: /* ccons ::= COLLATE ids */
{
                                                yygotominor.yy430 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy430->initColl(*(yymsp[0].minor.yy245));
                                                delete yymsp[0].minor.yy245;
                                                objectForTokens = yygotominor.yy430;
                                            }
        break;
      case 83: /* ccons ::= gen_always AS LP expr RP id_opt */
      case 84: /* ccons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==84);
      case 85: /* ccons ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==85);
      case 86: /* ccons ::= REFERENCES ID_TAB */ yytestcase(yyruleno==86);
{
                                                if (!yymsp[0].minor.yy245->isNull() && yymsp[0].minor.yy245->toLower() != "stored" && yymsp[0].minor.yy245->toLower() != "virtual")
                                                    parserContext->errorAtToken(QString("Invalid generated column type: %1").arg(*(yymsp[0].minor.yy245)));

                                                yygotominor.yy430 = new SqliteCreateTable::Column::Constraint();
												yygotominor.yy430->initGeneratedAs(yymsp[-2].minor.yy198, *(yymsp[-5].minor.yy101), *(yymsp[0].minor.yy245));
												delete yymsp[-5].minor.yy101;
												delete yymsp[0].minor.yy245;
												objectForTokens = yygotominor.yy430;
											}
        break;
      case 87: /* ccons ::= CHECK LP RP */
{
                                                yygotominor.yy430 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy430->initCheck();
                                                objectForTokens = yygotominor.yy430;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 88: /* term ::= NULL */
{yygotominor.yy189 = new QVariant();}
        break;
      case 89: /* term ::= INTEGER */
      case 387: /* number ::= INTEGER */ yytestcase(yyruleno==387);
{yygotominor.yy189 = parserContext->handleNumberToken(yymsp[0].minor.yy0->value);}
        break;
      case 90: /* term ::= FLOAT */
      case 388: /* number ::= FLOAT */ yytestcase(yyruleno==388);
{yygotominor.yy189 = new QVariant(QVariant(yymsp[0].minor.yy0->value).toDouble());}
        break;
      case 91: /* term ::= STRING|BLOB */
{
                                                if (yymsp[0].minor.yy0->value.length() >= 3 && yymsp[0].minor.yy0->value.startsWith("x'", Qt::CaseInsensitive))
                                                    yygotominor.yy189 = new QVariant(blobFromLiteral(yymsp[0].minor.yy0->value));
                                                else
                                                    yygotominor.yy189 = new QVariant(stripString(yymsp[0].minor.yy0->value));
                                            }
        break;
      case 92: /* tnm ::= term */
{
												yygotominor.yy538 = new ParserTermOrLiteral(*(yymsp[0].minor.yy189));
												delete yymsp[0].minor.yy189;
											}
        break;
      case 93: /* tnm ::= nm */
{
												yygotominor.yy538 = new ParserTermOrLiteral(*(yymsp[0].minor.yy245));
												delete yymsp[0].minor.yy245;
											}
        break;
      case 98: /* refargs ::= */
{yygotominor.yy394 = new ParserFkConditionList();}
        break;
      case 99: /* refargs ::= refargs refarg */
{
                                                yymsp[-1].minor.yy394->append(yymsp[0].minor.yy515);
                                                yygotominor.yy394 = yymsp[-1].minor.yy394;
                                                DONT_INHERIT_TOKENS("refargs");
                                            }
        break;
      case 100: /* refarg ::= MATCH nm */
{
                                                yygotominor.yy515 = new SqliteForeignKey::Condition(*(yymsp[0].minor.yy245));
                                                delete yymsp[0].minor.yy245;
                                            }
        break;
      case 101: /* refarg ::= ON INSERT refact */
{yygotominor.yy515 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::INSERT, *(yymsp[0].minor.yy104)); delete yymsp[0].minor.yy104;}
        break;
      case 102: /* refarg ::= ON DELETE refact */
{yygotominor.yy515 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::DELETE, *(yymsp[0].minor.yy104)); delete yymsp[0].minor.yy104;}
        break;
      case 103: /* refarg ::= ON UPDATE refact */
      case 104: /* refarg ::= MATCH ID_FK_MATCH */ yytestcase(yyruleno==104);
{yygotominor.yy515 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::UPDATE, *(yymsp[0].minor.yy104)); delete yymsp[0].minor.yy104;}
        break;
      case 105: /* refact ::= SET NULL */
{yygotominor.yy104 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_NULL);}
        break;
      case 106: /* refact ::= SET DEFAULT */
{yygotominor.yy104 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_DEFAULT);}
        break;
      case 107: /* refact ::= CASCADE */
{yygotominor.yy104 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::CASCADE);}
        break;
      case 108: /* refact ::= RESTRICT */
{yygotominor.yy104 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::RESTRICT);}
        break;
      case 109: /* refact ::= NO ACTION */
{yygotominor.yy104 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::NO_ACTION);}
        break;
      case 110: /* defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy133 = new ParserDeferSubClause(SqliteDeferrable::NOT_DEFERRABLE, *(yymsp[0].minor.yy238));
                                                delete yymsp[0].minor.yy238;
                                            }
        break;
      case 111: /* defer_subclause ::= DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy133 = new ParserDeferSubClause(SqliteDeferrable::DEFERRABLE, *(yymsp[0].minor.yy238));
                                                delete yymsp[0].minor.yy238;
                                            }
        break;
      case 112: /* init_deferred_pred_opt ::= */
{yygotominor.yy238 = new SqliteInitially(SqliteInitially::null);}
        break;
      case 113: /* init_deferred_pred_opt ::= INITIALLY DEFERRED */
{yygotominor.yy238 = new SqliteInitially(SqliteInitially::DEFERRED);}
        break;
      case 114: /* init_deferred_pred_opt ::= INITIALLY IMMEDIATE */
{yygotominor.yy238 = new SqliteInitially(SqliteInitially::IMMEDIATE);}
        break;
      case 115: /* conslist_opt ::= */
{yygotominor.yy137 = new ParserCreateTableConstraintList();}
        break;
      case 116: /* conslist_opt ::= COMMA conslist */
{yygotominor.yy137 = yymsp[0].minor.yy137;}
        break;
      case 117: /* conslist ::= conslist tconscomma tcons */
{
                                                yymsp[0].minor.yy294->afterComma = *(yymsp[-1].minor.yy101);
                                                yymsp[-2].minor.yy137->append(yymsp[0].minor.yy294);
                                                yygotominor.yy137 = yymsp[-2].minor.yy137;
                                                delete yymsp[-1].minor.yy101;
                                                DONT_INHERIT_TOKENS("conslist");
                                            }
        break;
      case 118: /* conslist ::= tcons */
{
                                                yygotominor.yy137 = new ParserCreateTableConstraintList();
                                                yygotominor.yy137->append(yymsp[0].minor.yy294);
                                            }
        break;
      case 121: /* tcons ::= CONSTRAINT nm */
{
                                                yygotominor.yy294 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy294->initNameOnly(*(yymsp[0].minor.yy245));
                                                delete yymsp[0].minor.yy245;
                                                objectForTokens = yygotominor.yy294;
                                            }
        break;
      case 122: /* tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf */
{
                                                yygotominor.yy294 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy294->initPk(*(yymsp[-3].minor.yy419), *(yymsp[-2].minor.yy101), *(yymsp[0].minor.yy646));
                                                delete yymsp[-2].minor.yy101;
                                                delete yymsp[0].minor.yy646;
                                                delete yymsp[-3].minor.yy419;
                                                objectForTokens = yygotominor.yy294;
                                            }
        break;
      case 123: /* tcons ::= UNIQUE LP idxlist RP onconf */
{
                                                yygotominor.yy294 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy294->initUnique(*(yymsp[-2].minor.yy419), *(yymsp[0].minor.yy646));
                                                delete yymsp[0].minor.yy646;
                                                delete yymsp[-2].minor.yy419;
                                                objectForTokens = yygotominor.yy294;
                                            }
        break;
      case 124: /* tcons ::= CHECK LP expr RP onconf */
{
                                                yygotominor.yy294 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy294->initCheck(yymsp[-2].minor.yy198, *(yymsp[0].minor.yy646));
                                                objectForTokens = yygotominor.yy294;
                                            }
        break;
      case 125: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt */
      case 126: /* tcons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==126);
      case 127: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB */ yytestcase(yyruleno==127);
{
                                                yygotominor.yy294 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy294->initFk(
                                                    *(yymsp[-6].minor.yy419),
                                                    *(yymsp[-3].minor.yy245),
                                                    *(yymsp[-2].minor.yy419),
                                                    *(yymsp[-1].minor.yy394),
                                                    yymsp[0].minor.yy133->initially,
                                                    yymsp[0].minor.yy133->deferrable
                                                );
                                                delete yymsp[-3].minor.yy245;
                                                delete yymsp[-1].minor.yy394;
                                                delete yymsp[0].minor.yy133;
                                                delete yymsp[-2].minor.yy419;
                                                delete yymsp[-6].minor.yy419;
                                                objectForTokens = yygotominor.yy294;
                                            }
        break;
      case 128: /* tcons ::= CHECK LP RP onconf */
{
                                                yygotominor.yy294 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy294->initCheck();
                                                objectForTokens = yygotominor.yy294;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                              yy_destructor(yypParser,228,&yymsp[0].minor);
}
        break;
      case 129: /* defer_subclause_opt ::= */
{yygotominor.yy133 = new ParserDeferSubClause(SqliteDeferrable::null, SqliteInitially::null);}
        break;
      case 130: /* defer_subclause_opt ::= defer_subclause */
{yygotominor.yy133 = yymsp[0].minor.yy133;}
        break;
      case 131: /* onconf ::= */
      case 133: /* orconf ::= */ yytestcase(yyruleno==133);
{yygotominor.yy646 = new SqliteConflictAlgo(SqliteConflictAlgo::null);}
        break;
      case 132: /* onconf ::= ON CONFLICT resolvetype */
      case 134: /* orconf ::= OR resolvetype */ yytestcase(yyruleno==134);
{yygotominor.yy646 = yymsp[0].minor.yy646;}
        break;
      case 135: /* resolvetype ::= raisetype */
      case 136: /* resolvetype ::= IGNORE */ yytestcase(yyruleno==136);
      case 137: /* resolvetype ::= REPLACE */ yytestcase(yyruleno==137);
{yygotominor.yy646 = new SqliteConflictAlgo(sqliteConflictAlgo(yymsp[0].minor.yy0->value));}
        break;
      case 138: /* cmd ::= DROP TABLE ifexists fullname */
{
                                                yygotominor.yy157 = new SqliteDropTable(*(yymsp[-1].minor.yy101), yymsp[0].minor.yy80->name1, yymsp[0].minor.yy80->name2);
                                                delete yymsp[-1].minor.yy101;
                                                delete yymsp[0].minor.yy80;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 139: /* cmd ::= DROP TABLE ifexists nm DOT ID_TAB */
      case 140: /* cmd ::= DROP TABLE ifexists ID_DB|ID_TAB */ yytestcase(yyruleno==140);
      case 147: /* cmd ::= DROP VIEW ifexists nm DOT ID_VIEW */ yytestcase(yyruleno==147);
      case 148: /* cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW */ yytestcase(yyruleno==148);
      case 191: /* singlesrc ::= nm DOT ID_TAB */ yytestcase(yyruleno==191);
      case 192: /* singlesrc ::= ID_DB|ID_TAB */ yytestcase(yyruleno==192);
      case 193: /* singlesrc ::= nm DOT ID_VIEW */ yytestcase(yyruleno==193);
      case 194: /* singlesrc ::= ID_DB|ID_VIEW */ yytestcase(yyruleno==194);
      case 352: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW */ yytestcase(yyruleno==352);
      case 353: /* cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW */ yytestcase(yyruleno==353);
      case 366: /* cmd ::= DROP INDEX ifexists nm DOT ID_IDX */ yytestcase(yyruleno==366);
      case 367: /* cmd ::= DROP INDEX ifexists ID_DB|ID_IDX */ yytestcase(yyruleno==367);
      case 377: /* cmd ::= PRAGMA nm DOT ID_PRAGMA */ yytestcase(yyruleno==377);
      case 378: /* cmd ::= PRAGMA ID_DB|ID_PRAGMA */ yytestcase(yyruleno==378);
      case 416: /* cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG */ yytestcase(yyruleno==416);
      case 417: /* cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG */ yytestcase(yyruleno==417);
      case 427: /* cmd ::= REINDEX nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==427);
      case 428: /* cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==428);
      case 431: /* cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==431);
      case 432: /* cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==432);
      case 437: /* cmd ::= ALTER TABLE nm DOT ID_TAB */ yytestcase(yyruleno==437);
      case 438: /* cmd ::= ALTER TABLE ID_DB|ID_TAB */ yytestcase(yyruleno==438);
      case 444: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW */ yytestcase(yyruleno==444);
      case 445: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW */ yytestcase(yyruleno==445);
{  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 143: /* cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select */
{
                                                yygotominor.yy157 = new SqliteCreateView(*(yymsp[-6].minor.yy636), *(yymsp[-4].minor.yy101), yymsp[-3].minor.yy80->name1, yymsp[-3].minor.yy80->name2, yymsp[0].minor.yy347, *(yymsp[-2].minor.yy419));
                                                delete yymsp[-6].minor.yy636;
                                                delete yymsp[-4].minor.yy101;
                                                delete yymsp[-3].minor.yy80;
                                                delete yymsp[-2].minor.yy419;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 146: /* cmd ::= DROP VIEW ifexists fullname */
{
                                                yygotominor.yy157 = new SqliteDropView(*(yymsp[-1].minor.yy101), yymsp[0].minor.yy80->name1, yymsp[0].minor.yy80->name2);
                                                delete yymsp[-1].minor.yy101;
                                                delete yymsp[0].minor.yy80;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 149: /* cmd ::= select_stmt */
      case 237: /* cmd ::= delete_stmt */ yytestcase(yyruleno==237);
      case 248: /* cmd ::= update_stmt */ yytestcase(yyruleno==248);
      case 269: /* cmd ::= insert_stmt */ yytestcase(yyruleno==269);
{
                                                yygotominor.yy157 = yymsp[0].minor.yy157;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 150: /* select_stmt ::= select */
{
                                                yygotominor.yy157 = yymsp[0].minor.yy347;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 151: /* select ::= with selectnowith */
{
                                                yygotominor.yy347 = yymsp[0].minor.yy347;
                                                yymsp[0].minor.yy347->setWith(yymsp[-1].minor.yy489);
                                                objectForTokens = yygotominor.yy347;
                                            }
        break;
      case 152: /* selectnowith ::= oneselect */
{
                                                yygotominor.yy347 = SqliteSelect::append(yymsp[0].minor.yy338);
                                                objectForTokens = yygotominor.yy347;
                                            }
        break;
      case 153: /* selectnowith ::= selectnowith multiselect_op oneselect */
{
                                                yygotominor.yy347 = SqliteSelect::append(yymsp[-2].minor.yy347, *(yymsp[-1].minor.yy266), yymsp[0].minor.yy338);
                                                delete yymsp[-1].minor.yy266;
                                                objectForTokens = yygotominor.yy347;
                                            }
        break;
      case 154: /* selectnowith ::= values */
{
                                                yygotominor.yy347 = SqliteSelect::append(*(yymsp[0].minor.yy292));
                                                delete yymsp[0].minor.yy292;
                                                objectForTokens = yygotominor.yy347;
                                            }
        break;
      case 155: /* selectnowith ::= selectnowith COMMA values */
{
                                                yygotominor.yy347 = SqliteSelect::append(yymsp[-2].minor.yy347, SqliteSelect::CompoundOperator::UNION_ALL, *(yymsp[0].minor.yy292));
                                                delete yymsp[0].minor.yy292;
                                                objectForTokens = yygotominor.yy347;
                                            }
        break;
      case 156: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt */
{
                                                yygotominor.yy338 = new SqliteSelect::Core(
                                                        *(yymsp[-7].minor.yy636),
                                                        *(yymsp[-6].minor.yy247),
                                                        yymsp[-5].minor.yy427,
                                                        yymsp[-4].minor.yy198,
                                                        *(yymsp[-3].minor.yy537),
                                                        yymsp[-2].minor.yy198,
                                                        *(yymsp[-1].minor.yy611),
                                                        yymsp[0].minor.yy512
                                                    );
                                                delete yymsp[-6].minor.yy247;
                                                delete yymsp[-7].minor.yy636;
                                                delete yymsp[-3].minor.yy537;
                                                delete yymsp[-1].minor.yy611;
                                                objectForTokens = yygotominor.yy338;
                                            }
        break;
      case 157: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt */
{
                                                yygotominor.yy338 = new SqliteSelect::Core(
                                                        *(yymsp[-8].minor.yy636),
                                                        *(yymsp[-7].minor.yy247),
                                                        yymsp[-6].minor.yy427,
                                                        yymsp[-5].minor.yy198,
                                                        *(yymsp[-4].minor.yy537),
                                                        yymsp[-3].minor.yy198,
                                                        *(yymsp[-2].minor.yy647),
                                                        *(yymsp[-1].minor.yy611),
                                                        yymsp[0].minor.yy512
                                                    );
                                                delete yymsp[-7].minor.yy247;
                                                delete yymsp[-8].minor.yy636;
                                                delete yymsp[-4].minor.yy537;
                                                delete yymsp[-1].minor.yy611;
                                                delete yymsp[-2].minor.yy647;
                                                objectForTokens = yygotominor.yy338;
                                            }
        break;
      case 158: /* values ::= VALUES LP nexprlist RP */
{
                                                yygotominor.yy292 = new ParserExprNestedList();
                                                yygotominor.yy292->append(*(yymsp[-1].minor.yy537));
                                                delete yymsp[-1].minor.yy537;
                                            }
        break;
      case 159: /* values ::= values COMMA LP exprlist RP */
{
                                                yymsp[-4].minor.yy292->append(*(yymsp[-1].minor.yy537));
                                                yygotominor.yy292 = yymsp[-4].minor.yy292;
                                                delete yymsp[-1].minor.yy537;
                                                DONT_INHERIT_TOKENS("values");
                                            }
        break;
      case 160: /* multiselect_op ::= UNION */
{yygotominor.yy266 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION);}
        break;
      case 161: /* multiselect_op ::= UNION ALL */
{yygotominor.yy266 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION_ALL);}
        break;
      case 162: /* multiselect_op ::= EXCEPT */
{yygotominor.yy266 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::EXCEPT);}
        break;
      case 163: /* multiselect_op ::= INTERSECT */
{yygotominor.yy266 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::INTERSECT);}
        break;
      case 164: /* distinct ::= DISTINCT */
{yygotominor.yy636 = new int(1);}
        break;
      case 165: /* distinct ::= ALL */
{yygotominor.yy636 = new int(2);}
        break;
      case 167: /* sclp ::= selcollist COMMA */
{yygotominor.yy247 = yymsp[-1].minor.yy247;}
        break;
      case 168: /* sclp ::= */
      case 246: /* returning ::= */ yytestcase(yyruleno==246);
{yygotominor.yy247 = new ParserResultColumnList();}
        break;
      case 169: /* selcollist ::= sclp expr as */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        yymsp[-1].minor.yy198,
                                                        yymsp[0].minor.yy522 ? yymsp[0].minor.yy522->asKw : false,
                                                        yymsp[0].minor.yy522 ? yymsp[0].minor.yy522->name : QString()
                                                    );

                                                yymsp[-2].minor.yy247->append(obj);
                                                yygotominor.yy247 = yymsp[-2].minor.yy247;
                                                delete yymsp[0].minor.yy522;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 170: /* selcollist ::= sclp STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(true);

                                                yymsp[-1].minor.yy247->append(obj);
                                                yygotominor.yy247 = yymsp[-1].minor.yy247;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 171: /* selcollist ::= sclp tnm DOT STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        true,
                                                        yymsp[-2].minor.yy538->toName()
                                                    );
													
												if (!yymsp[-2].minor.yy538->isName())
													parserContext->errorAtToken("Syntax error <expected name, not literal value>", -3);
													
                                                yymsp[-3].minor.yy247->append(obj);
                                                yygotominor.yy247 = yymsp[-3].minor.yy247;
                                                delete yymsp[-2].minor.yy538;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 172: /* selcollist ::= sclp */
      case 173: /* selcollist ::= sclp ID_TAB DOT STAR */ yytestcase(yyruleno==173);
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy247 = yymsp[0].minor.yy247;
                                            }
        break;
      case 174: /* as ::= AS nm */
{
                                                yygotominor.yy522 = new ParserStubAlias(*(yymsp[0].minor.yy245), true);
                                                delete yymsp[0].minor.yy245;
                                            }
        break;
      case 175: /* as ::= ids */
      case 176: /* as ::= AS ID_ALIAS */ yytestcase(yyruleno==176);
      case 177: /* as ::= ID_ALIAS */ yytestcase(yyruleno==177);
{
                                                yygotominor.yy522 = new ParserStubAlias(*(yymsp[0].minor.yy245), false);
                                                delete yymsp[0].minor.yy245;
                                            }
        break;
      case 178: /* as ::= */
{yygotominor.yy522 = nullptr;}
        break;
      case 179: /* from ::= */
{yygotominor.yy427 = nullptr;}
        break;
      case 180: /* from ::= FROM joinsrc */
{yygotominor.yy427 = yymsp[0].minor.yy427;}
        break;
      case 181: /* joinsrc ::= singlesrc seltablist */
{
                                                yygotominor.yy427 = new SqliteSelect::Core::JoinSource(
                                                        yymsp[-1].minor.yy607,
                                                        *(yymsp[0].minor.yy33)
                                                    );
                                                delete yymsp[0].minor.yy33;
                                                objectForTokens = yygotominor.yy427;
                                            }
        break;
      case 182: /* joinsrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy427 = new SqliteSelect::Core::JoinSource();
                                                objectForTokens = yygotominor.yy427;
                                            }
        break;
      case 183: /* seltablist ::= seltablist joinop singlesrc joinconstr_opt */
{
                                                SqliteSelect::Core::JoinSourceOther* src =
                                                    new SqliteSelect::Core::JoinSourceOther(yymsp[-2].minor.yy315, yymsp[-1].minor.yy607, yymsp[0].minor.yy71);

                                                yymsp[-3].minor.yy33->append(src);
                                                yygotominor.yy33 = yymsp[-3].minor.yy33;
                                                objectForTokens = src;
                                                DONT_INHERIT_TOKENS("seltablist");
                                            }
        break;
      case 184: /* seltablist ::= */
{
                                                yygotominor.yy33 = new ParserOtherSourceList();
                                            }
        break;
      case 185: /* singlesrc ::= nm dbnm as indexed_opt */
{
                                                yygotominor.yy607 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-3].minor.yy245),
                                                        *(yymsp[-2].minor.yy245),
                                                        yymsp[-1].minor.yy522 ? yymsp[-1].minor.yy522->asKw : false,
                                                        yymsp[-1].minor.yy522 ? yymsp[-1].minor.yy522->name : QString(),
                                                        yymsp[0].minor.yy108 ? yymsp[0].minor.yy108->notIndexedKw : false,
                                                        yymsp[0].minor.yy108 ? yymsp[0].minor.yy108->indexedBy : QString()
                                                    );
                                                delete yymsp[-3].minor.yy245;
                                                delete yymsp[-2].minor.yy245;
                                                delete yymsp[-1].minor.yy522;
                                                if (yymsp[0].minor.yy108)
                                                    delete yymsp[0].minor.yy108;
                                                objectForTokens = yygotominor.yy607;
                                            }
        break;
      case 186: /* singlesrc ::= LP select RP as */
{
                                                yygotominor.yy607 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy347,
                                                        yymsp[0].minor.yy522 ? yymsp[0].minor.yy522->asKw : false,
                                                        yymsp[0].minor.yy522 ? yymsp[0].minor.yy522->name : QString()
                                                    );
                                                delete yymsp[0].minor.yy522;
                                                objectForTokens = yygotominor.yy607;
                                            }
        break;
      case 187: /* singlesrc ::= LP joinsrc RP as */
{
                                                yygotominor.yy607 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy427,
                                                        yymsp[0].minor.yy522 ? yymsp[0].minor.yy522->asKw : false,
                                                        yymsp[0].minor.yy522 ? yymsp[0].minor.yy522->name : QString()
                                                    );
                                                delete yymsp[0].minor.yy522;
                                                objectForTokens = yygotominor.yy607;
                                            }
        break;
      case 188: /* singlesrc ::= nm dbnm LP exprlist RP as */
{
                                                yygotominor.yy607 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-5].minor.yy245),
                                                        *(yymsp[-4].minor.yy245),
                                                        yymsp[0].minor.yy522 ? yymsp[0].minor.yy522->asKw : false,
                                                        yymsp[0].minor.yy522 ? yymsp[0].minor.yy522->name : QString(),
                                                        *(yymsp[-2].minor.yy537)
                                                    );
                                                delete yymsp[-5].minor.yy245;
                                                delete yymsp[-4].minor.yy245;
                                                delete yymsp[0].minor.yy522;
                                                if (yymsp[-2].minor.yy537)
                                                    delete yymsp[-2].minor.yy537;

                                                objectForTokens = yygotominor.yy607;
                                            }
        break;
      case 189: /* singlesrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy607 = new SqliteSelect::Core::SingleSource();
                                                objectForTokens = yygotominor.yy607;
                                            }
        break;
      case 190: /* singlesrc ::= nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy607 = new SqliteSelect::Core::SingleSource();
                                                yygotominor.yy607->database = *(yymsp[-1].minor.yy245);
                                                delete yymsp[-1].minor.yy245;
                                                objectForTokens = yygotominor.yy607;
                                            }
        break;
      case 195: /* joinconstr_opt ::= ON expr */
{
                                                yygotominor.yy71 = new SqliteSelect::Core::JoinConstraint(yymsp[0].minor.yy198);
                                                objectForTokens = yygotominor.yy71;
                                            }
        break;
      case 196: /* joinconstr_opt ::= USING LP idlist RP */
{
                                                yygotominor.yy71 = new SqliteSelect::Core::JoinConstraint(*(yymsp[-1].minor.yy613));
                                                delete yymsp[-1].minor.yy613;
                                                objectForTokens = yygotominor.yy71;
                                            }
        break;
      case 197: /* joinconstr_opt ::= */
{yygotominor.yy71 = nullptr;}
        break;
      case 198: /* dbnm ::= */
      case 362: /* collate ::= */ yytestcase(yyruleno==362);
      case 448: /* vtabarg ::= */ yytestcase(yyruleno==448);
      case 452: /* anylist ::= */ yytestcase(yyruleno==452);
{yygotominor.yy245 = new QString();}
        break;
      case 200: /* fullname ::= nm */
{
                                                yygotominor.yy80 = new ParserFullName();
                                                yygotominor.yy80->name1 = *(yymsp[0].minor.yy245);
                                                delete yymsp[0].minor.yy245;
                                            }
        break;
      case 201: /* fullname ::= nm DOT nm */
{
                                                yygotominor.yy80 = new ParserFullName();
                                                yygotominor.yy80->name1 = *(yymsp[-2].minor.yy245);
                                                yygotominor.yy80->name2 = *(yymsp[0].minor.yy245);
                                                delete yymsp[-2].minor.yy245;
                                                delete yymsp[0].minor.yy245;
                                            }
        break;
      case 202: /* xfullname ::= nm */
{
                                                yygotominor.yy208 = new ParserXFullName();
                                                yygotominor.yy208->name1 = *(yymsp[0].minor.yy245);
                                                delete yymsp[0].minor.yy245;
                                            }
        break;
      case 203: /* xfullname ::= nm DOT nm */
{
                                                yygotominor.yy208 = new ParserXFullName();
                                                yygotominor.yy208->name1 = *(yymsp[-2].minor.yy245);
                                                yygotominor.yy208->name2 = *(yymsp[0].minor.yy245);
                                                delete yymsp[-2].minor.yy245;
                                                delete yymsp[0].minor.yy245;
                                            }
        break;
      case 204: /* xfullname ::= nm DOT nm AS nm */
{
                                                yygotominor.yy208 = new ParserXFullName();
                                                yygotominor.yy208->name1 = *(yymsp[-4].minor.yy245);
                                                yygotominor.yy208->name2 = *(yymsp[-2].minor.yy245);
                                                yygotominor.yy208->alias = *(yymsp[0].minor.yy245);
                                                delete yymsp[-4].minor.yy245;
                                                delete yymsp[-2].minor.yy245;
                                                delete yymsp[0].minor.yy245;
                                            }
        break;
      case 205: /* xfullname ::= nm AS nm */
{
                                                yygotominor.yy208 = new ParserXFullName();
                                                yygotominor.yy208->name1 = *(yymsp[-2].minor.yy245);
                                                yygotominor.yy208->alias = *(yymsp[0].minor.yy245);
                                                delete yymsp[-2].minor.yy245;
                                                delete yymsp[0].minor.yy245;
                                            }
        break;
      case 206: /* xfullname ::= nm DOT nm AS ID_ALIAS */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy208 = new ParserXFullName();
                                                yygotominor.yy208->name1 = *(yymsp[-4].minor.yy245);
                                                yygotominor.yy208->name2 = *(yymsp[-2].minor.yy245);
                                                delete yymsp[-4].minor.yy245;
                                                delete yymsp[-2].minor.yy245;
                                            }
        break;
      case 207: /* xfullname ::= nm AS ID_ALIAS */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy208 = new ParserXFullName();
                                                yygotominor.yy208->name1 = *(yymsp[-2].minor.yy245);
                                                delete yymsp[-2].minor.yy245;
                                            }
        break;
      case 208: /* joinop ::= COMMA */
{
                                                yygotominor.yy315 = new SqliteSelect::Core::JoinOp(true);
                                                objectForTokens = yygotominor.yy315;
                                            }
        break;
      case 209: /* joinop ::= JOIN */
{
                                                yygotominor.yy315 = new SqliteSelect::Core::JoinOp(false);
                                                objectForTokens = yygotominor.yy315;
                                            }
        break;
      case 210: /* joinop ::= JOIN_KW JOIN */
{
                                                yygotominor.yy315 = new SqliteSelect::Core::JoinOp(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy315;
                                            }
        break;
      case 211: /* joinop ::= JOIN_KW nm JOIN */
{
                                                yygotominor.yy315 = new SqliteSelect::Core::JoinOp(yymsp[-2].minor.yy0->value, *(yymsp[-1].minor.yy245));
                                                delete yymsp[-1].minor.yy245;
                                                objectForTokens = yygotominor.yy315;
                                            }
        break;
      case 212: /* joinop ::= JOIN_KW nm nm JOIN */
      case 213: /* joinop ::= ID_JOIN_OPTS */ yytestcase(yyruleno==213);
{
                                                yygotominor.yy315 = new SqliteSelect::Core::JoinOp(yymsp[-3].minor.yy0->value, *(yymsp[-2].minor.yy245), *(yymsp[-1].minor.yy245));
                                                delete yymsp[-2].minor.yy245;
                                                objectForTokens = yygotominor.yy315;
                                            }
        break;
      case 214: /* indexed_opt ::= */
{yygotominor.yy108 = nullptr;}
        break;
      case 215: /* indexed_opt ::= INDEXED BY nm */
{
                                                yygotominor.yy108 = new ParserIndexedBy(*(yymsp[0].minor.yy245));
                                                delete yymsp[0].minor.yy245;
                                            }
        break;
      case 216: /* indexed_opt ::= NOT INDEXED */
      case 217: /* indexed_opt ::= INDEXED BY ID_IDX */ yytestcase(yyruleno==217);
{yygotominor.yy108 = new ParserIndexedBy(true);}
        break;
      case 218: /* orderby_opt ::= */
{yygotominor.yy611 = new ParserOrderByList();}
        break;
      case 219: /* orderby_opt ::= ORDER BY sortlist */
{yygotominor.yy611 = yymsp[0].minor.yy611;}
        break;
      case 220: /* sortlist ::= sortlist COMMA expr sortorder nulls */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-2].minor.yy198, *(yymsp[-1].minor.yy351), *(yymsp[0].minor.yy342));
                                                yymsp[-4].minor.yy611->append(obj);
                                                yygotominor.yy611 = yymsp[-4].minor.yy611;
                                                delete yymsp[-1].minor.yy351;
												delete yymsp[0].minor.yy342;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sortlist");
                                            }
        break;
      case 221: /* sortlist ::= expr sortorder nulls */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-2].minor.yy198, *(yymsp[-1].minor.yy351), *(yymsp[0].minor.yy342));
                                                yygotominor.yy611 = new ParserOrderByList();
                                                yygotominor.yy611->append(obj);
                                                delete yymsp[-1].minor.yy351;
												delete yymsp[0].minor.yy342;
                                                objectForTokens = obj;
                                            }
        break;
      case 222: /* sortorder ::= ASC */
{yygotominor.yy351 = new SqliteSortOrder(SqliteSortOrder::ASC);}
        break;
      case 223: /* sortorder ::= DESC */
{yygotominor.yy351 = new SqliteSortOrder(SqliteSortOrder::DESC);}
        break;
      case 224: /* sortorder ::= */
{yygotominor.yy351 = new SqliteSortOrder(SqliteSortOrder::null);}
        break;
      case 225: /* nulls ::= NULLS FIRST */
{yygotominor.yy342 = new SqliteNulls(SqliteNulls::FIRST);}
        break;
      case 226: /* nulls ::= NULLS LAST */
{yygotominor.yy342 = new SqliteNulls(SqliteNulls::LAST);}
        break;
      case 227: /* nulls ::= */
{yygotominor.yy342 = new SqliteNulls(SqliteNulls::null);}
        break;
      case 228: /* groupby_opt ::= */
      case 347: /* exprlist ::= */ yytestcase(yyruleno==347);
{yygotominor.yy537 = new ParserExprList();}
        break;
      case 229: /* groupby_opt ::= GROUP BY nexprlist */
      case 346: /* exprlist ::= nexprlist */ yytestcase(yyruleno==346);
{yygotominor.yy537 = yymsp[0].minor.yy537;}
        break;
      case 230: /* groupby_opt ::= GROUP BY */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy537 = new ParserExprList();
                                            }
        break;
      case 231: /* having_opt ::= */
      case 243: /* where_opt ::= */ yytestcase(yyruleno==243);
      case 343: /* case_else ::= */ yytestcase(yyruleno==343);
      case 345: /* case_operand ::= */ yytestcase(yyruleno==345);
      case 371: /* vinto ::= */ yytestcase(yyruleno==371);
      case 405: /* when_clause ::= */ yytestcase(yyruleno==405);
      case 420: /* key_opt ::= */ yytestcase(yyruleno==420);
{yygotominor.yy198 = nullptr;}
        break;
      case 232: /* having_opt ::= HAVING expr */
      case 244: /* where_opt ::= WHERE expr */ yytestcase(yyruleno==244);
      case 334: /* expr ::= exprx */ yytestcase(yyruleno==334);
      case 342: /* case_else ::= ELSE expr */ yytestcase(yyruleno==342);
      case 344: /* case_operand ::= exprx */ yytestcase(yyruleno==344);
      case 370: /* vinto ::= INTO expr */ yytestcase(yyruleno==370);
      case 406: /* when_clause ::= WHEN expr */ yytestcase(yyruleno==406);
      case 421: /* key_opt ::= KEY expr */ yytestcase(yyruleno==421);
{yygotominor.yy198 = yymsp[0].minor.yy198;}
        break;
      case 233: /* limit_opt ::= */
{yygotominor.yy512 = nullptr;}
        break;
      case 234: /* limit_opt ::= LIMIT expr */
{
                                                yygotominor.yy512 = new SqliteLimit(yymsp[0].minor.yy198);
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 235: /* limit_opt ::= LIMIT expr OFFSET expr */
{
                                                yygotominor.yy512 = new SqliteLimit(yymsp[-2].minor.yy198, yymsp[0].minor.yy198, true);
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 236: /* limit_opt ::= LIMIT expr COMMA expr */
{
                                                yygotominor.yy512 = new SqliteLimit(yymsp[-2].minor.yy198, yymsp[0].minor.yy198, false);
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 238: /* delete_stmt ::= with DELETE FROM xfullname indexed_opt where_opt returning orderby_opt limit_opt */
{
                                                if (yymsp[-4].minor.yy108)
                                                {
                                                    if (!yymsp[-4].minor.yy108->indexedBy.isNull())
                                                    {
                                                        yygotominor.yy157 = new SqliteDelete(
                                                                yymsp[-5].minor.yy208->name1,
                                                                yymsp[-5].minor.yy208->name2,
                                                                yymsp[-5].minor.yy208->alias,
                                                                yymsp[-4].minor.yy108->indexedBy,
                                                                yymsp[-3].minor.yy198,
                                                                yymsp[-8].minor.yy489,
                                                                *(yymsp[-2].minor.yy247),
                                                                *(yymsp[-1].minor.yy611),
                                                                yymsp[0].minor.yy512
                                                            );
                                                    }
                                                    else
                                                    {
                                                        yygotominor.yy157 = new SqliteDelete(
                                                                yymsp[-5].minor.yy208->name1,
                                                                yymsp[-5].minor.yy208->name2,
                                                                yymsp[-5].minor.yy208->alias,
                                                                yymsp[-4].minor.yy108->notIndexedKw,
                                                                yymsp[-3].minor.yy198,
                                                                yymsp[-8].minor.yy489,
                                                                *(yymsp[-2].minor.yy247),
                                                                *(yymsp[-1].minor.yy611),
                                                                yymsp[0].minor.yy512
                                                            );
                                                    }
                                                    delete yymsp[-4].minor.yy108;
                                                }
                                                else
                                                {
                                                    yygotominor.yy157 = new SqliteDelete(
                                                            yymsp[-5].minor.yy208->name1,
                                                            yymsp[-5].minor.yy208->name2,
                                                            yymsp[-5].minor.yy208->alias,
                                                            false,
                                                            yymsp[-3].minor.yy198,
                                                            yymsp[-8].minor.yy489,
                                                            *(yymsp[-2].minor.yy247),
                                                            *(yymsp[-1].minor.yy611),
                                                            yymsp[0].minor.yy512
                                                        );
                                                }
                                                delete yymsp[-5].minor.yy208;
                                                delete yymsp[-2].minor.yy247;
                                                delete yymsp[-1].minor.yy611;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 239: /* delete_stmt ::= with DELETE FROM */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-2].minor.yy489;
                                                yygotominor.yy157 = q;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 240: /* delete_stmt ::= with DELETE FROM nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-4].minor.yy489;
                                                q->database = *(yymsp[-1].minor.yy245);
                                                yygotominor.yy157 = q;
                                                objectForTokens = yygotominor.yy157;
                                                delete yymsp[-1].minor.yy245;
                                            }
        break;
      case 241: /* delete_stmt ::= with DELETE FROM nm DOT ID_TAB */
      case 252: /* update_stmt ::= with UPDATE orconf nm DOT ID_TAB */ yytestcase(yyruleno==252);
{  yy_destructor(yypParser,249,&yymsp[-5].minor);
  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 242: /* delete_stmt ::= with DELETE FROM ID_DB|ID_TAB */
      case 253: /* update_stmt ::= with UPDATE orconf ID_DB|ID_TAB */ yytestcase(yyruleno==253);
{  yy_destructor(yypParser,249,&yymsp[-3].minor);
}
        break;
      case 245: /* where_opt ::= WHERE */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy198 = new SqliteExpr();
                                            }
        break;
      case 247: /* returning ::= RETURNING selcollist */
{yygotominor.yy247 = yymsp[0].minor.yy247;}
        break;
      case 249: /* update_stmt ::= with UPDATE orconf xfullname indexed_opt SET setlist from where_opt returning orderby_opt limit_opt */
{
                                                yygotominor.yy157 = new SqliteUpdate(
                                                        *(yymsp[-9].minor.yy646),
                                                        yymsp[-8].minor.yy208->name1,
                                                        yymsp[-8].minor.yy208->name2,
                                                        yymsp[-8].minor.yy208->alias,
                                                        yymsp[-7].minor.yy108 ? yymsp[-7].minor.yy108->notIndexedKw : false,
                                                        yymsp[-7].minor.yy108 ? yymsp[-7].minor.yy108->indexedBy : QString(),
                                                        *(yymsp[-5].minor.yy129),
                                                        yymsp[-4].minor.yy427,
                                                        yymsp[-3].minor.yy198,
                                                        yymsp[-11].minor.yy489,
                                                        *(yymsp[-2].minor.yy247),
                                                        *(yymsp[-1].minor.yy611),
                                                        yymsp[0].minor.yy512
                                                    );
                                                delete yymsp[-9].minor.yy646;
                                                delete yymsp[-8].minor.yy208;
                                                delete yymsp[-5].minor.yy129;
                                                delete yymsp[-2].minor.yy247;
                                                delete yymsp[-1].minor.yy611;
                                                if (yymsp[-7].minor.yy108)
                                                    delete yymsp[-7].minor.yy108;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 250: /* update_stmt ::= with UPDATE orconf */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-2].minor.yy489;
                                                yygotominor.yy157 = q;
                                                objectForTokens = yygotominor.yy157;
                                                delete yymsp[0].minor.yy646;
                                            }
        break;
      case 251: /* update_stmt ::= with UPDATE orconf nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-4].minor.yy489;
                                                q->database = *(yymsp[-1].minor.yy245);
                                                yygotominor.yy157 = q;
                                                objectForTokens = yygotominor.yy157;
                                                delete yymsp[-2].minor.yy646;
                                                delete yymsp[-1].minor.yy245;
                                            }
        break;
      case 254: /* setlist ::= setlist COMMA nm EQ expr */
{
                                                yymsp[-4].minor.yy129->append(ParserSetValue(*(yymsp[-2].minor.yy245), yymsp[0].minor.yy198));
                                                yygotominor.yy129 = yymsp[-4].minor.yy129;
                                                delete yymsp[-2].minor.yy245;
                                            }
        break;
      case 255: /* setlist ::= setlist COMMA LP idlist RP EQ expr */
{
                                                yymsp[-6].minor.yy129->append(ParserSetValue(*(yymsp[-3].minor.yy613), yymsp[0].minor.yy198));
                                                yygotominor.yy129 = yymsp[-6].minor.yy129;
                                                delete yymsp[-3].minor.yy613;
                                            }
        break;
      case 256: /* setlist ::= nm EQ expr */
{
                                                yygotominor.yy129 = new ParserSetValueList();
                                                yygotominor.yy129->append(ParserSetValue(*(yymsp[-2].minor.yy245), yymsp[0].minor.yy198));
                                                delete yymsp[-2].minor.yy245;
                                            }
        break;
      case 257: /* setlist ::= LP idlist RP EQ expr */
{
                                                yygotominor.yy129 = new ParserSetValueList();
                                                yygotominor.yy129->append(ParserSetValue(*(yymsp[-3].minor.yy613), yymsp[0].minor.yy198));
                                                delete yymsp[-3].minor.yy613;
                                            }
        break;
      case 258: /* setlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy129 = new ParserSetValueList();
                                            }
        break;
      case 259: /* setlist ::= setlist COMMA */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy129 = yymsp[-1].minor.yy129;
                                            }
        break;
      case 260: /* setlist ::= setlist COMMA ID_COL */
      case 261: /* setlist ::= ID_COL */ yytestcase(yyruleno==261);
{  yy_destructor(yypParser,281,&yymsp[-2].minor);
}
        break;
      case 262: /* idlist_opt ::= */
{yygotominor.yy613 = new QStringList();}
        break;
      case 263: /* idlist_opt ::= LP idlist RP */
{yygotominor.yy613 = yymsp[-1].minor.yy613;}
        break;
      case 264: /* idlist ::= idlist COMMA nm */
{
                                                yygotominor.yy613 = yymsp[-2].minor.yy613;
                                                *(yygotominor.yy613) << *(yymsp[0].minor.yy245);
                                                delete yymsp[0].minor.yy245;
                                            }
        break;
      case 265: /* idlist ::= nm */
{
                                                yygotominor.yy613 = new QStringList();
                                                *(yygotominor.yy613) << *(yymsp[0].minor.yy245);
                                                delete yymsp[0].minor.yy245;
                                            }
        break;
      case 266: /* idlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy613 = new QStringList();
                                            }
        break;
      case 267: /* idlist ::= idlist COMMA ID_COL */
      case 268: /* idlist ::= ID_COL */ yytestcase(yyruleno==268);
{  yy_destructor(yypParser,274,&yymsp[-2].minor);
}
        break;
      case 270: /* insert_stmt ::= with insert_cmd INTO xfullname idlist_opt select upsert returning */
{
                                                yygotominor.yy157 = new SqliteInsert(
                                                        yymsp[-6].minor.yy258->replace,
                                                        yymsp[-6].minor.yy258->orConflict,
                                                        yymsp[-4].minor.yy208->name1,
                                                        yymsp[-4].minor.yy208->name2,
                                                        yymsp[-4].minor.yy208->alias,
                                                        *(yymsp[-3].minor.yy613),
                                                        yymsp[-2].minor.yy347,
                                                        yymsp[-7].minor.yy489,
                                                        yymsp[-1].minor.yy392,
                                                        *(yymsp[0].minor.yy247)
                                                    );
                                                delete yymsp[-4].minor.yy208;
                                                delete yymsp[-6].minor.yy258;
                                                delete yymsp[-3].minor.yy613;
                                                delete yymsp[0].minor.yy247;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 271: /* insert_stmt ::= with insert_cmd INTO xfullname idlist_opt DEFAULT VALUES returning */
{
                                                yygotominor.yy157 = new SqliteInsert(
                                                        yymsp[-6].minor.yy258->replace,
                                                        yymsp[-6].minor.yy258->orConflict,
                                                        yymsp[-4].minor.yy208->name1,
                                                        yymsp[-4].minor.yy208->name2,
                                                        yymsp[-4].minor.yy208->alias,
                                                        *(yymsp[-3].minor.yy613),
                                                        yymsp[-7].minor.yy489,
                                                        *(yymsp[0].minor.yy247)
                                                    );
                                                delete yymsp[-4].minor.yy208;
                                                delete yymsp[-6].minor.yy258;
                                                delete yymsp[-3].minor.yy613;
                                                delete yymsp[0].minor.yy247;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 272: /* insert_stmt ::= with insert_cmd INTO xfullname LP idlist rp_opt */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy157 = new SqliteInsert(
                                                        yymsp[-5].minor.yy258->replace,
                                                        yymsp[-5].minor.yy258->orConflict,
                                                        yymsp[-3].minor.yy208->name1,
                                                        yymsp[-3].minor.yy208->name2,
                                                        yymsp[-3].minor.yy208->alias,
                                                        *(yymsp[-1].minor.yy613),
                                                        yymsp[-6].minor.yy489,
                                                        QList<SqliteResultColumn*>()
                                                    );
                                                objectForTokens = yygotominor.yy157;
                                                delete yymsp[-3].minor.yy208;
                                                delete yymsp[-1].minor.yy613;
                                                delete yymsp[-5].minor.yy258;
                                                delete yymsp[0].minor.yy101;
                                            }
        break;
      case 273: /* insert_stmt ::= with insert_cmd INTO */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-1].minor.yy258->replace;
                                                q->onConflict = yymsp[-1].minor.yy258->orConflict;
                                                q->with = yymsp[-2].minor.yy489;
                                                yygotominor.yy157 = q;
                                                objectForTokens = yygotominor.yy157;
                                                delete yymsp[-1].minor.yy258;
                                            }
        break;
      case 274: /* insert_stmt ::= with insert_cmd INTO nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-3].minor.yy258->replace;
                                                q->onConflict = yymsp[-3].minor.yy258->orConflict;
                                                q->with = yymsp[-4].minor.yy489;
                                                q->database = *(yymsp[-1].minor.yy245);
                                                yygotominor.yy157 = q;
                                                objectForTokens = yygotominor.yy157;
                                                delete yymsp[-3].minor.yy258;
                                                delete yymsp[-1].minor.yy245;
                                            }
        break;
      case 275: /* insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB */
{  yy_destructor(yypParser,249,&yymsp[-3].minor);
  yy_destructor(yypParser,284,&yymsp[-2].minor);
}
        break;
      case 276: /* insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB */
{  yy_destructor(yypParser,249,&yymsp[-5].minor);
  yy_destructor(yypParser,284,&yymsp[-4].minor);
  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 277: /* insert_cmd ::= INSERT orconf */
{
                                                yygotominor.yy258 = new ParserStubInsertOrReplace(false, *(yymsp[0].minor.yy646));
                                                delete yymsp[0].minor.yy646;
                                            }
        break;
      case 278: /* insert_cmd ::= REPLACE */
{yygotominor.yy258 = new ParserStubInsertOrReplace(true);}
        break;
      case 279: /* upsert ::= */
{
                                                yygotominor.yy392 = nullptr;
                                            }
        break;
      case 280: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt */
{
                                                yygotominor.yy392 = new SqliteUpsert(*(yymsp[-7].minor.yy611), yymsp[-5].minor.yy198, *(yymsp[-1].minor.yy129), yymsp[0].minor.yy198);
                                                delete yymsp[-7].minor.yy611;
                                                delete yymsp[-1].minor.yy129;
                                                objectForTokens = yygotominor.yy392;
                                            }
        break;
      case 281: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING */
{
                                                yygotominor.yy392 = new SqliteUpsert(*(yymsp[-4].minor.yy611), yymsp[-2].minor.yy198);
                                                delete yymsp[-4].minor.yy611;
                                                objectForTokens = yygotominor.yy392;
                                            }
        break;
      case 282: /* upsert ::= ON CONFLICT DO NOTHING */
{
                                                yygotominor.yy392 = new SqliteUpsert();
                                                objectForTokens = yygotominor.yy392;
                                            }
        break;
      case 283: /* exprx ::= expr not_opt IN ID_DB */
{  yy_destructor(yypParser,227,&yymsp[-3].minor);
}
        break;
      case 284: /* exprx ::= expr not_opt IN nm DOT ID_TAB */
      case 285: /* exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN */ yytestcase(yyruleno==285);
{  yy_destructor(yypParser,227,&yymsp[-5].minor);
  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 286: /* exprx ::= tnm DOT ID_TAB|ID_COL */
{  yy_destructor(yypParser,235,&yymsp[-2].minor);
}
        break;
      case 287: /* exprx ::= tnm DOT nm DOT ID_COL */
{  yy_destructor(yypParser,235,&yymsp[-4].minor);
  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 288: /* exprx ::= expr COLLATE ID_COLLATE */
      case 289: /* exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP */ yytestcase(yyruleno==289);
{  yy_destructor(yypParser,227,&yymsp[-2].minor);
}
        break;
      case 290: /* exprx ::= CTIME_KW */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 291: /* exprx ::= LP nexprlist RP */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initRowValue(*(yymsp[-1].minor.yy537));
                                                delete yymsp[-1].minor.yy537;
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 292: /* exprx ::= tnm */
{
                                                yygotominor.yy198 = new SqliteExpr();
												if (yymsp[0].minor.yy538->isLiteral())
													yygotominor.yy198->initLiteral(yymsp[0].minor.yy538->toLiteral());
												else
													yygotominor.yy198->initId(yymsp[0].minor.yy538->toName());
													//parserContext->errorBeforeLastToken("Syntax error <expected literal value>");

                                                delete yymsp[0].minor.yy538;
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 293: /* exprx ::= tnm DOT nm */
{
                                                yygotominor.yy198 = new SqliteExpr();
												if (yymsp[-2].minor.yy538->isName())
													yygotominor.yy198->initId(yymsp[-2].minor.yy538->toName(), *(yymsp[0].minor.yy245));
												else
													parserContext->errorAtToken("Syntax error <expected name>", -3);

                                                delete yymsp[-2].minor.yy538;
                                                delete yymsp[0].minor.yy245;
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 294: /* exprx ::= tnm DOT */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                objectForTokens = yygotominor.yy198;
                                                if (yymsp[-1].minor.yy538->isName())
                                                {
                                                    yygotominor.yy198->initId(yymsp[-1].minor.yy538->toName(), QString());
                                                    parserContext->minorErrorAfterLastToken("Syntax error <expr>");
                                                }
                                                else
                                                    parserContext->errorAtToken("Syntax error <expected name>", -3);

                                                delete yymsp[-1].minor.yy538;
                                            }
        break;
      case 295: /* exprx ::= tnm DOT nm DOT nm */
{
                                                yygotominor.yy198 = new SqliteExpr();
												if (yymsp[-4].minor.yy538->isName())
													yygotominor.yy198->initId(yymsp[-4].minor.yy538->toName(), *(yymsp[-2].minor.yy245), *(yymsp[0].minor.yy245));
												else
													parserContext->errorAtToken("Syntax error <expected name>", -5);

                                                delete yymsp[-4].minor.yy538;
                                                delete yymsp[-2].minor.yy245;
                                                delete yymsp[0].minor.yy245;
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 296: /* exprx ::= tnm DOT nm DOT */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                objectForTokens = yygotominor.yy198;
                                                if (yymsp[-3].minor.yy538->isName())
                                                {
                                                    yygotominor.yy198->initId(yymsp[-3].minor.yy538->toName(), *(yymsp[-1].minor.yy245), QString());
                                                    parserContext->minorErrorAfterLastToken("Syntax error <expr>");
                                                }
                                                else
                                                    parserContext->errorAtToken("Syntax error <expected name>", -5);

                                                delete yymsp[-3].minor.yy538;
                                                delete yymsp[-1].minor.yy245;
                                            }
        break;
      case 297: /* exprx ::= VARIABLE */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initBindParam(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 298: /* exprx ::= expr COLLATE ids */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initCollate(yymsp[-2].minor.yy198, *(yymsp[0].minor.yy245));
                                                delete yymsp[0].minor.yy245;
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 299: /* exprx ::= CAST LP expr AS typetoken RP */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initCast(yymsp[-3].minor.yy198, yymsp[-1].minor.yy341);
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 300: /* exprx ::= ID LP distinct exprlist RP */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initFunction(stripObjName(yymsp[-4].minor.yy0->value), *(yymsp[-2].minor.yy636), *(yymsp[-1].minor.yy537));
                                                delete yymsp[-2].minor.yy636;
                                                delete yymsp[-1].minor.yy537;
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 301: /* exprx ::= ID LP STAR RP */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initFunction(stripObjName(yymsp[-3].minor.yy0->value), true);
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 302: /* exprx ::= expr AND expr */
      case 303: /* exprx ::= expr OR expr */ yytestcase(yyruleno==303);
      case 304: /* exprx ::= expr LT|GT|GE|LE expr */ yytestcase(yyruleno==304);
      case 305: /* exprx ::= expr EQ|NE expr */ yytestcase(yyruleno==305);
      case 306: /* exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */ yytestcase(yyruleno==306);
      case 307: /* exprx ::= expr PLUS|MINUS expr */ yytestcase(yyruleno==307);
      case 308: /* exprx ::= expr STAR|SLASH|REM expr */ yytestcase(yyruleno==308);
      case 309: /* exprx ::= expr CONCAT expr */ yytestcase(yyruleno==309);
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initBinOp(yymsp[-2].minor.yy198, yymsp[-1].minor.yy0->value, yymsp[0].minor.yy198);
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 310: /* exprx ::= expr not_opt likeop expr */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initLike(yymsp[-3].minor.yy198, *(yymsp[-2].minor.yy101), *(yymsp[-1].minor.yy128), yymsp[0].minor.yy198);
                                                delete yymsp[-2].minor.yy101;
                                                delete yymsp[-1].minor.yy128;
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 311: /* exprx ::= expr not_opt likeop expr ESCAPE expr */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initLike(yymsp[-5].minor.yy198, *(yymsp[-4].minor.yy101), *(yymsp[-3].minor.yy128), yymsp[-2].minor.yy198, yymsp[0].minor.yy198);
                                                delete yymsp[-4].minor.yy101;
                                                delete yymsp[-3].minor.yy128;
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 312: /* exprx ::= expr ISNULL|NOTNULL */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initNull(yymsp[-1].minor.yy198, yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 313: /* exprx ::= expr NOT NULL */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initNull(yymsp[-2].minor.yy198, "NOT NULL");
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 314: /* exprx ::= expr IS not_opt expr */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initIs(yymsp[-3].minor.yy198, *(yymsp[-1].minor.yy101), yymsp[0].minor.yy198);
                                                delete yymsp[-1].minor.yy101;
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 315: /* exprx ::= expr IS NOT DISTINCT FROM expr */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initDistinct(yymsp[-5].minor.yy198, true, yymsp[0].minor.yy198);
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 316: /* exprx ::= expr IS DISTINCT FROM expr */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initDistinct(yymsp[-4].minor.yy198, false, yymsp[0].minor.yy198);
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 317: /* exprx ::= NOT expr */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initUnaryOp(yymsp[0].minor.yy198, yymsp[-1].minor.yy0->value);
                                            }
        break;
      case 318: /* exprx ::= BITNOT expr */
      case 320: /* exprx ::= PLUS expr */ yytestcase(yyruleno==320);
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initUnaryOp(yymsp[0].minor.yy198, yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 319: /* exprx ::= MINUS expr */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                if (yymsp[0].minor.yy198->mode == SqliteExpr::Mode::LITERAL_VALUE &&
                                                    parserContext->isCandidateForMaxNegativeNumber() &&
                                                    yymsp[0].minor.yy198->literalValue == static_cast<qint64>(0L))
                                                {
                                                    yygotominor.yy198->initLiteral(std::numeric_limits<qint64>::min());
                                                    delete yymsp[0].minor.yy198;
                                                }
                                                else
                                                {
                                                    yygotominor.yy198->initUnaryOp(yymsp[0].minor.yy198, yymsp[-1].minor.yy0->value);
                                                }
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 321: /* exprx ::= expr PTR expr */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initPtrOp(yymsp[-2].minor.yy198, yymsp[-1].minor.yy0->value, yymsp[0].minor.yy198);
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 322: /* exprx ::= expr not_opt BETWEEN expr AND expr */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initBetween(yymsp[-5].minor.yy198, *(yymsp[-4].minor.yy101), yymsp[-2].minor.yy198, yymsp[0].minor.yy198);
                                                delete yymsp[-4].minor.yy101;
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 323: /* exprx ::= expr not_opt IN LP exprlist RP */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initIn(yymsp[-5].minor.yy198, *(yymsp[-4].minor.yy101), *(yymsp[-1].minor.yy537));
                                                delete yymsp[-4].minor.yy101;
                                                delete yymsp[-1].minor.yy537;
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 324: /* exprx ::= LP select RP */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initSubSelect(yymsp[-1].minor.yy347);
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 325: /* exprx ::= expr not_opt IN LP select RP */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initIn(yymsp[-5].minor.yy198, *(yymsp[-4].minor.yy101), yymsp[-1].minor.yy347);
                                                delete yymsp[-4].minor.yy101;
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 326: /* exprx ::= expr not_opt IN nm dbnm */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initIn(yymsp[-4].minor.yy198, *(yymsp[-3].minor.yy101), *(yymsp[-1].minor.yy245), *(yymsp[0].minor.yy245));
                                                delete yymsp[-3].minor.yy101;
                                                delete yymsp[-1].minor.yy245;
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 327: /* exprx ::= EXISTS LP select RP */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initExists(yymsp[-1].minor.yy347);
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 328: /* exprx ::= CASE case_operand case_exprlist case_else END */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initCase(yymsp[-3].minor.yy198, *(yymsp[-2].minor.yy537), yymsp[-1].minor.yy198);
                                                delete yymsp[-2].minor.yy537;
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 329: /* exprx ::= RAISE LP IGNORE RP */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initRaise(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 330: /* exprx ::= RAISE LP raisetype COMMA nm RP */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initRaise(yymsp[-3].minor.yy0->value, *(yymsp[-1].minor.yy245));
                                                delete yymsp[-1].minor.yy245;
                                                objectForTokens = yygotominor.yy198;
                                            }
        break;
      case 331: /* exprx ::= ID LP distinct exprlist RP filter_over */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initWindowFunction(stripObjName(yymsp[-5].minor.yy0->value), *(yymsp[-3].minor.yy636), *(yymsp[-2].minor.yy537), yymsp[0].minor.yy393);
                                                delete yymsp[-3].minor.yy636;
                                                delete yymsp[-2].minor.yy537;
                                                objectForTokens = yygotominor.yy198;
											}
        break;
      case 332: /* exprx ::= ID LP STAR RP filter_over */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                yygotominor.yy198->initWindowFunction(stripObjName(yymsp[-4].minor.yy0->value), yymsp[0].minor.yy393);
                                                objectForTokens = yygotominor.yy198;
											}
        break;
      case 333: /* expr ::= */
{
                                                yygotominor.yy198 = new SqliteExpr();
                                                objectForTokens = yygotominor.yy198;
                                                parserContext->minorErrorAfterLastToken("Syntax error <expr>");
                                            }
        break;
      case 339: /* likeop ::= LIKE_KW|MATCH */
{yygotominor.yy128 = new SqliteExpr::LikeOp(SqliteExpr::likeOp(yymsp[0].minor.yy0->value));}
        break;
      case 340: /* case_exprlist ::= case_exprlist WHEN expr THEN expr */
{
                                                yymsp[-4].minor.yy537->append(yymsp[-2].minor.yy198);
                                                yymsp[-4].minor.yy537->append(yymsp[0].minor.yy198);
                                                yygotominor.yy537 = yymsp[-4].minor.yy537;
                                            }
        break;
      case 341: /* case_exprlist ::= WHEN expr THEN expr */
{
                                                yygotominor.yy537 = new ParserExprList();
                                                yygotominor.yy537->append(yymsp[-2].minor.yy198);
                                                yygotominor.yy537->append(yymsp[0].minor.yy198);
                                            }
        break;
      case 348: /* nexprlist ::= nexprlist COMMA expr */
{
                                                yymsp[-2].minor.yy537->append(yymsp[0].minor.yy198);
                                                yygotominor.yy537 = yymsp[-2].minor.yy537;
                                                DONT_INHERIT_TOKENS("nexprlist");
                                            }
        break;
      case 349: /* nexprlist ::= exprx */
{
                                                yygotominor.yy537 = new ParserExprList();
                                                yygotominor.yy537->append(yymsp[0].minor.yy198);
                                            }
        break;
      case 350: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt */
{
                                                yygotominor.yy157 = new SqliteCreateIndex(
                                                        *(yymsp[-10].minor.yy101),
                                                        *(yymsp[-8].minor.yy101),
                                                        *(yymsp[-7].minor.yy245),
                                                        *(yymsp[-6].minor.yy245),
                                                        *(yymsp[-4].minor.yy245),
                                                        *(yymsp[-2].minor.yy611),
                                                        yymsp[0].minor.yy198
                                                    );
                                                delete yymsp[-8].minor.yy101;
                                                delete yymsp[-10].minor.yy101;
                                                delete yymsp[-7].minor.yy245;
                                                delete yymsp[-6].minor.yy245;
                                                delete yymsp[-4].minor.yy245;
                                                delete yymsp[-2].minor.yy611;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 351: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB */
{  yy_destructor(yypParser,203,&yymsp[-3].minor);
}
        break;
      case 356: /* idxlist_opt ::= */
{yygotominor.yy419 = new ParserIndexedColumnList();}
        break;
      case 357: /* idxlist_opt ::= LP idxlist RP */
{yygotominor.yy419 = yymsp[-1].minor.yy419;}
        break;
      case 358: /* idxlist ::= idxlist COMMA idxlist_single */
{
                                                yymsp[-2].minor.yy419->append(yymsp[0].minor.yy500);
                                                yygotominor.yy419 = yymsp[-2].minor.yy419;
                                                DONT_INHERIT_TOKENS("idxlist");
                                            }
        break;
      case 359: /* idxlist ::= idxlist_single */
{
                                                yygotominor.yy419 = new ParserIndexedColumnList();
                                                yygotominor.yy419->append(yymsp[0].minor.yy500);
                                            }
        break;
      case 360: /* idxlist_single ::= nm collate sortorder */
      case 361: /* idxlist_single ::= ID_COL */ yytestcase(yyruleno==361);
{
                                                SqliteIndexedColumn* obj =
                                                    new SqliteIndexedColumn(
                                                        *(yymsp[-2].minor.yy245),
                                                        *(yymsp[-1].minor.yy245),
                                                        *(yymsp[0].minor.yy351)
                                                    );
                                                yygotominor.yy500 = obj;
                                                delete yymsp[0].minor.yy351;
                                                delete yymsp[-2].minor.yy245;
                                                delete yymsp[-1].minor.yy245;
                                                objectForTokens = yygotominor.yy500;
                                            }
        break;
      case 365: /* cmd ::= DROP INDEX ifexists fullname */
{
                                                yygotominor.yy157 = new SqliteDropIndex(*(yymsp[-1].minor.yy101), yymsp[0].minor.yy80->name1, yymsp[0].minor.yy80->name2);
                                                delete yymsp[-1].minor.yy101;
                                                delete yymsp[0].minor.yy80;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 368: /* cmd ::= VACUUM vinto */
{
                                                yygotominor.yy157 = new SqliteVacuum(yymsp[0].minor.yy198);
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 369: /* cmd ::= VACUUM nm vinto */
{
                                                yygotominor.yy157 = new SqliteVacuum(*(yymsp[-1].minor.yy245), yymsp[0].minor.yy198);
                                                delete yymsp[-1].minor.yy245;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 372: /* cmd ::= PRAGMA nm dbnm */
{
                                                yygotominor.yy157 = new SqlitePragma(*(yymsp[-1].minor.yy245), *(yymsp[0].minor.yy245));
                                                delete yymsp[-1].minor.yy245;
                                                delete yymsp[0].minor.yy245;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 373: /* cmd ::= PRAGMA nm dbnm EQ nmnum */
      case 375: /* cmd ::= PRAGMA nm dbnm EQ minus_num */ yytestcase(yyruleno==375);
{
                                                yygotominor.yy157 = new SqlitePragma(*(yymsp[-3].minor.yy245), *(yymsp[-2].minor.yy245), *(yymsp[0].minor.yy189), true);
                                                delete yymsp[-3].minor.yy245;
                                                delete yymsp[-2].minor.yy245;
                                                delete yymsp[0].minor.yy189;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 374: /* cmd ::= PRAGMA nm dbnm LP nmnum RP */
      case 376: /* cmd ::= PRAGMA nm dbnm LP minus_num RP */ yytestcase(yyruleno==376);
{
                                                yygotominor.yy157 = new SqlitePragma(*(yymsp[-4].minor.yy245), *(yymsp[-3].minor.yy245), *(yymsp[-1].minor.yy189), false);
                                                delete yymsp[-4].minor.yy245;
                                                delete yymsp[-3].minor.yy245;
                                                delete yymsp[-1].minor.yy189;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 380: /* nmnum ::= nm */
{
                                                yygotominor.yy189 = new QVariant(*(yymsp[0].minor.yy245));
                                                delete yymsp[0].minor.yy245;
                                            }
        break;
      case 381: /* nmnum ::= ON */
      case 382: /* nmnum ::= DELETE */ yytestcase(yyruleno==382);
      case 383: /* nmnum ::= DEFAULT */ yytestcase(yyruleno==383);
{yygotominor.yy189 = new QVariant(yymsp[0].minor.yy0->value);}
        break;
      case 386: /* minus_num ::= MINUS number */
{
                                                if (yymsp[0].minor.yy189->type() == QVariant::Double)
                                                    *(yymsp[0].minor.yy189) = -(yymsp[0].minor.yy189->toDouble());
                                                else if (yymsp[0].minor.yy189->type() == QVariant::LongLong)
                                                {
                                                    if (parserContext->isCandidateForMaxNegativeNumber())
                                                        *(yymsp[0].minor.yy189) = std::numeric_limits<qint64>::min();
                                                    else
                                                        *(yymsp[0].minor.yy189) = -(yymsp[0].minor.yy189->toLongLong());
                                                }
                                                else
                                                    Q_ASSERT_X(true, "producing minus number", "QVariant is neither of Double or LongLong.");

                                                yygotominor.yy189 = yymsp[0].minor.yy189;
                                            }
        break;
      case 389: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END */
{
                                                yygotominor.yy157 = new SqliteCreateTrigger(
                                                        *(yymsp[-13].minor.yy636),
                                                        *(yymsp[-11].minor.yy101),
                                                        *(yymsp[-10].minor.yy245),
                                                        *(yymsp[-9].minor.yy245),
                                                        *(yymsp[-5].minor.yy245),
                                                        *(yymsp[-8].minor.yy105),
                                                        yymsp[-7].minor.yy481,
                                                        *(yymsp[-4].minor.yy367),
                                                        yymsp[-3].minor.yy198,
                                                        *(yymsp[-1].minor.yy276),
                                                        3
                                                    );
                                                delete yymsp[-11].minor.yy101;
                                                delete yymsp[-13].minor.yy636;
                                                delete yymsp[-8].minor.yy105;
                                                delete yymsp[-4].minor.yy367;
                                                delete yymsp[-10].minor.yy245;
                                                delete yymsp[-5].minor.yy245;
                                                delete yymsp[-9].minor.yy245;
                                                delete yymsp[-1].minor.yy276;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 390: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause */
{
                                                QList<SqliteQuery *> CL;

                                                yygotominor.yy157 = new SqliteCreateTrigger(
                                                        *(yymsp[-10].minor.yy636),
                                                        *(yymsp[-8].minor.yy101),
                                                        *(yymsp[-7].minor.yy245),
                                                        *(yymsp[-6].minor.yy245),
                                                        *(yymsp[-2].minor.yy245),
                                                        *(yymsp[-5].minor.yy105),
                                                        yymsp[-4].minor.yy481,
                                                        *(yymsp[-1].minor.yy367),
                                                        yymsp[0].minor.yy198,
                                                        CL,
                                                        3
                                                    );
                                                delete yymsp[-8].minor.yy101;
                                                delete yymsp[-10].minor.yy636;
                                                delete yymsp[-5].minor.yy105;
                                                delete yymsp[-1].minor.yy367;
                                                delete yymsp[-7].minor.yy245;
                                                delete yymsp[-2].minor.yy245;
                                                delete yymsp[-6].minor.yy245;
                                                objectForTokens = yygotominor.yy157;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 391: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list */
{
                                                yygotominor.yy157 = new SqliteCreateTrigger(
													*(yymsp[-12].minor.yy636),
													*(yymsp[-10].minor.yy101),
													*(yymsp[-9].minor.yy245),
													*(yymsp[-8].minor.yy245),
													*(yymsp[-4].minor.yy245),
													*(yymsp[-7].minor.yy105),
													yymsp[-6].minor.yy481,
													*(yymsp[-3].minor.yy367),
													yymsp[-2].minor.yy198,
													*(yymsp[0].minor.yy276),
													3
                                                );
                                                delete yymsp[-10].minor.yy101;
                                                delete yymsp[-12].minor.yy636;
                                                delete yymsp[-7].minor.yy105;
                                                delete yymsp[-3].minor.yy367;
                                                delete yymsp[-9].minor.yy245;
                                                delete yymsp[-4].minor.yy245;
                                                delete yymsp[-8].minor.yy245;
                                                delete yymsp[0].minor.yy276;
                                                objectForTokens = yygotominor.yy157;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 392: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB */
{  yy_destructor(yypParser,205,&yymsp[-8].minor);
  yy_destructor(yypParser,203,&yymsp[-5].minor);
  yy_destructor(yypParser,300,&yymsp[-3].minor);
  yy_destructor(yypParser,301,&yymsp[-2].minor);
}
        break;
      case 395: /* trigger_time ::= BEFORE */
{yygotominor.yy105 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::BEFORE);}
        break;
      case 396: /* trigger_time ::= AFTER */
{yygotominor.yy105 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::AFTER);}
        break;
      case 397: /* trigger_time ::= INSTEAD OF */
{yygotominor.yy105 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::INSTEAD_OF);}
        break;
      case 398: /* trigger_time ::= */
{yygotominor.yy105 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::null);}
        break;
      case 399: /* trigger_event ::= DELETE */
{
                                                yygotominor.yy481 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::DELETE);
                                                objectForTokens = yygotominor.yy481;
                                            }
        break;
      case 400: /* trigger_event ::= INSERT */
{
                                                yygotominor.yy481 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::INSERT);
                                                objectForTokens = yygotominor.yy481;
                                            }
        break;
      case 401: /* trigger_event ::= UPDATE */
{
                                                yygotominor.yy481 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::UPDATE);
                                                objectForTokens = yygotominor.yy481;
                                            }
        break;
      case 402: /* trigger_event ::= UPDATE OF idlist */
{
                                                yygotominor.yy481 = new SqliteCreateTrigger::Event(*(yymsp[0].minor.yy613));
                                                delete yymsp[0].minor.yy613;
                                                objectForTokens = yygotominor.yy481;
                                            }
        break;
      case 403: /* foreach_clause ::= */
{yygotominor.yy367 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::null);}
        break;
      case 404: /* foreach_clause ::= FOR EACH ROW */
{yygotominor.yy367 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::FOR_EACH_ROW);}
        break;
      case 407: /* trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI */
{
                                                yymsp[-2].minor.yy276->append(yymsp[-1].minor.yy157);
                                                yygotominor.yy276 = yymsp[-2].minor.yy276;
                                                DONT_INHERIT_TOKENS("trigger_cmd_list");
                                            }
        break;
      case 408: /* trigger_cmd_list ::= trigger_cmd SEMI */
{
                                                yygotominor.yy276 = new ParserQueryList();
                                                yygotominor.yy276->append(yymsp[-1].minor.yy157);
                                            }
        break;
      case 409: /* trigger_cmd_list ::= SEMI */
{
                                                yygotominor.yy276 = new ParserQueryList();
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 414: /* raisetype ::= ROLLBACK|ABORT|FAIL */
{yygotominor.yy0 = yymsp[0].minor.yy0;}
        break;
      case 415: /* cmd ::= DROP TRIGGER ifexists fullname */
{
                                                yygotominor.yy157 = new SqliteDropTrigger(*(yymsp[-1].minor.yy101), yymsp[0].minor.yy80->name1, yymsp[0].minor.yy80->name2);
                                                delete yymsp[-1].minor.yy101;
                                                delete yymsp[0].minor.yy80;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 418: /* cmd ::= ATTACH database_kw_opt expr AS expr key_opt */
{
                                                yygotominor.yy157 = new SqliteAttach(*(yymsp[-4].minor.yy101), yymsp[-3].minor.yy198, yymsp[-1].minor.yy198, yymsp[0].minor.yy198);
                                                delete yymsp[-4].minor.yy101;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 419: /* cmd ::= DETACH database_kw_opt expr */
{
                                                yygotominor.yy157 = new SqliteDetach(*(yymsp[-1].minor.yy101), yymsp[0].minor.yy198);
                                                delete yymsp[-1].minor.yy101;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 424: /* cmd ::= REINDEX */
{yygotominor.yy157 = new SqliteReindex();}
        break;
      case 425: /* cmd ::= REINDEX nm dbnm */
      case 426: /* cmd ::= REINDEX ID_COLLATE */ yytestcase(yyruleno==426);
{
                                                yygotominor.yy157 = new SqliteReindex(*(yymsp[-1].minor.yy245), *(yymsp[0].minor.yy245));
                                                delete yymsp[-1].minor.yy245;
                                                delete yymsp[0].minor.yy245;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 429: /* cmd ::= ANALYZE */
{
                                                yygotominor.yy157 = new SqliteAnalyze();
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 430: /* cmd ::= ANALYZE nm dbnm */
{
                                                yygotominor.yy157 = new SqliteAnalyze(*(yymsp[-1].minor.yy245), *(yymsp[0].minor.yy245));
                                                delete yymsp[-1].minor.yy245;
                                                delete yymsp[0].minor.yy245;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 433: /* cmd ::= ALTER TABLE fullname RENAME TO nm */
{
                                                yygotominor.yy157 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy80->name1,
                                                        yymsp[-3].minor.yy80->name2,
                                                        *(yymsp[0].minor.yy245)
                                                    );
                                                delete yymsp[0].minor.yy245;
                                                delete yymsp[-3].minor.yy80;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 434: /* cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column */
{
                                                yygotominor.yy157 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy80->name1,
                                                        yymsp[-3].minor.yy80->name2,
                                                        *(yymsp[-1].minor.yy101),
                                                        yymsp[0].minor.yy199
                                                    );
                                                delete yymsp[-1].minor.yy101;
                                                delete yymsp[-3].minor.yy80;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 435: /* cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm */
{
                                                yygotominor.yy157 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy80->name1,
                                                        yymsp[-3].minor.yy80->name2,
                                                        *(yymsp[-1].minor.yy101),
                                                        *(yymsp[0].minor.yy245)
                                                    );
                                                delete yymsp[-1].minor.yy101;
                                                delete yymsp[-3].minor.yy80;
                                                delete yymsp[0].minor.yy245;
                                            }
        break;
      case 436: /* cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW */
{  yy_destructor(yypParser,207,&yymsp[-3].minor);
}
        break;
      case 442: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm */
{
                                                yygotominor.yy157 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-4].minor.yy101),
                                                        *(yymsp[-3].minor.yy245),
                                                        *(yymsp[-2].minor.yy245),
                                                        *(yymsp[0].minor.yy245)
                                                    );
                                                delete yymsp[-4].minor.yy101;
                                                delete yymsp[-3].minor.yy245;
                                                delete yymsp[-2].minor.yy245;
                                                delete yymsp[0].minor.yy245;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 443: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP */
{
                                                yygotominor.yy157 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-7].minor.yy101),
                                                        *(yymsp[-6].minor.yy245),
                                                        *(yymsp[-5].minor.yy245),
                                                        *(yymsp[-3].minor.yy245),
                                                        *(yymsp[-1].minor.yy613)
                                                    );
                                                delete yymsp[-6].minor.yy245;
                                                delete yymsp[-5].minor.yy245;
                                                delete yymsp[-3].minor.yy245;
                                                delete yymsp[-7].minor.yy101;
                                                delete yymsp[-1].minor.yy613;
                                                objectForTokens = yygotominor.yy157;
                                            }
        break;
      case 446: /* vtabarglist ::= vtabarg */
{
                                                yygotominor.yy613 = new QStringList();
                                                yygotominor.yy613->append((yymsp[0].minor.yy245)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                delete yymsp[0].minor.yy245;
                                            }
        break;
      case 447: /* vtabarglist ::= vtabarglist COMMA vtabarg */
{
                                                yymsp[-2].minor.yy613->append((yymsp[0].minor.yy245)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                yygotominor.yy613 = yymsp[-2].minor.yy613;
                                                delete yymsp[0].minor.yy245;
                                                DONT_INHERIT_TOKENS("vtabarglist");
                                            }
        break;
      case 449: /* vtabarg ::= vtabarg vtabargtoken */
{
                                                yymsp[-1].minor.yy245->append(" "+ *(yymsp[0].minor.yy245));
                                                yygotominor.yy245 = yymsp[-1].minor.yy245;
                                                delete yymsp[0].minor.yy245;
                                            }
        break;
      case 450: /* vtabargtoken ::= ANY */
{
                                                yygotominor.yy245 = new QString(yymsp[0].minor.yy0->value);
                                            }
        break;
      case 451: /* vtabargtoken ::= LP anylist RP */
{
                                                yygotominor.yy245 = new QString("(");
                                                yygotominor.yy245->append(*(yymsp[-1].minor.yy245));
                                                yygotominor.yy245->append(")");
                                                delete yymsp[-1].minor.yy245;
                                            }
        break;
      case 453: /* anylist ::= anylist LP anylist RP */
{
                                                yygotominor.yy245 = yymsp[-3].minor.yy245;
                                                yygotominor.yy245->append("(");
                                                yygotominor.yy245->append(*(yymsp[-1].minor.yy245));
                                                yygotominor.yy245->append(")");
                                                delete yymsp[-1].minor.yy245;
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 454: /* anylist ::= anylist ANY */
{
                                                yygotominor.yy245 = yymsp[-1].minor.yy245;
                                                yygotominor.yy245->append(yymsp[0].minor.yy0->value);
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 455: /* with ::= */
{yygotominor.yy489 = nullptr;}
        break;
      case 456: /* with ::= WITH wqlist */
{
                                                yygotominor.yy489 = new SqliteWith();
												yygotominor.yy489->cteList = *(yymsp[0].minor.yy514);
												delete yymsp[0].minor.yy514;
                                                objectForTokens = yygotominor.yy489;
                                            }
        break;
      case 457: /* with ::= WITH RECURSIVE wqlist */
{
                                                yygotominor.yy489 = new SqliteWith();
												yygotominor.yy489->cteList = *(yymsp[0].minor.yy514);
                                                yygotominor.yy489->recursive = true;
												delete yymsp[0].minor.yy514;
                                                objectForTokens = yygotominor.yy489;
                                            }
        break;
      case 458: /* wqas ::= AS */
{yygotominor.yy221 = new SqliteWith::CommonTableExpression::AsMode(SqliteWith::CommonTableExpression::ANY);}
        break;
      case 459: /* wqas ::= AS MATERIALIZED */
{yygotominor.yy221 = new SqliteWith::CommonTableExpression::AsMode(SqliteWith::CommonTableExpression::MATERIALIZED);}
        break;
      case 460: /* wqas ::= AS NOT MATERIALIZED */
{yygotominor.yy221 = new SqliteWith::CommonTableExpression::AsMode(SqliteWith::CommonTableExpression::NOT_MATERIALIZED);}
        break;
      case 461: /* wqlist ::= wqcte */
{
												yygotominor.yy514 = new ParserCteList();
                                                yygotominor.yy514->append(yymsp[0].minor.yy560);
                                            }
        break;
      case 462: /* wqlist ::= wqlist COMMA wqcte */
{
                                                yygotominor.yy514 = yymsp[-2].minor.yy514;
                                                yygotominor.yy514->append(yymsp[0].minor.yy560);
                                                DONT_INHERIT_TOKENS("wqlist");
                                            }
        break;
      case 463: /* wqlist ::= ID_TAB_NEW */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                            }
        break;
      case 464: /* wqcte ::= nm idxlist_opt wqas LP select RP */
{
                                                yygotominor.yy560 = new SqliteWith::CommonTableExpression(*(yymsp[-5].minor.yy245), *(yymsp[-4].minor.yy419), yymsp[-1].minor.yy347, *(yymsp[-3].minor.yy221));
                                                delete yymsp[-5].minor.yy245;
                                                delete yymsp[-4].minor.yy419;
                                                delete yymsp[-3].minor.yy221;
												objectForTokens = yygotominor.yy560;
											}
        break;
      case 465: /* windowdefn_list ::= windowdefn */
{
												yygotominor.yy647 = new ParserWindowDefList();
												yygotominor.yy647->append(yymsp[0].minor.yy568);
											}
        break;
      case 466: /* windowdefn_list ::= windowdefn_list COMMA windowdefn */
{
												yymsp[-2].minor.yy647->append(yymsp[0].minor.yy568);
												yygotominor.yy647 = yymsp[-2].minor.yy647;
												DONT_INHERIT_TOKENS("windowdefn_list");
											}
        break;
      case 467: /* windowdefn ::= nm AS LP window RP */
{
												yygotominor.yy568 = new SqliteWindowDefinition(*(yymsp[-4].minor.yy245), yymsp[-1].minor.yy52);
												delete yymsp[-4].minor.yy245;
												objectForTokens = yygotominor.yy568;
											}
        break;
      case 468: /* window ::= PARTITION BY nexprlist orderby_opt frame_opt */
{
												yygotominor.yy52 = new SqliteWindowDefinition::Window();
												yygotominor.yy52->initPartitionBy(QString(), *(yymsp[-2].minor.yy537), *(yymsp[-1].minor.yy611), yymsp[0].minor.yy428);
												delete yymsp[-2].minor.yy537;
												delete yymsp[-1].minor.yy611;
												objectForTokens = yygotominor.yy52;
											}
        break;
      case 469: /* window ::= nm PARTITION BY nexprlist orderby_opt frame_opt */
{
												yygotominor.yy52 = new SqliteWindowDefinition::Window();
												yygotominor.yy52->initPartitionBy(*(yymsp[-5].minor.yy245), *(yymsp[-2].minor.yy537), *(yymsp[-1].minor.yy611), yymsp[0].minor.yy428);
												delete yymsp[-2].minor.yy537;
												delete yymsp[-5].minor.yy245;
												delete yymsp[-1].minor.yy611;
												objectForTokens = yygotominor.yy52;
											}
        break;
      case 470: /* window ::= ORDER BY sortlist frame_opt */
{
												yygotominor.yy52 = new SqliteWindowDefinition::Window();
												yygotominor.yy52->initOrderBy(QString(), *(yymsp[-1].minor.yy611), yymsp[0].minor.yy428);
												delete yymsp[-1].minor.yy611;
												objectForTokens = yygotominor.yy52;
											}
        break;
      case 471: /* window ::= nm ORDER BY sortlist frame_opt */
{
												yygotominor.yy52 = new SqliteWindowDefinition::Window();
												yygotominor.yy52->initOrderBy(*(yymsp[-4].minor.yy245), *(yymsp[-1].minor.yy611), yymsp[0].minor.yy428);
												delete yymsp[-1].minor.yy611;
												delete yymsp[-4].minor.yy245;
												objectForTokens = yygotominor.yy52;
											}
        break;
      case 472: /* window ::= frame_opt */
{
												yygotominor.yy52 = new SqliteWindowDefinition::Window();
												yygotominor.yy52->init(QString(), yymsp[0].minor.yy428);
												objectForTokens = yygotominor.yy52;
											}
        break;
      case 473: /* window ::= nm frame_opt */
{
												yygotominor.yy52 = new SqliteWindowDefinition::Window();
												yygotominor.yy52->init(QString(), yymsp[0].minor.yy428);
												delete yymsp[-1].minor.yy245;
												objectForTokens = yygotominor.yy52;
											}
        break;
      case 474: /* frame_opt ::= */
{yygotominor.yy428 = nullptr;}
        break;
      case 475: /* frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt */
{
												yygotominor.yy428 = new SqliteWindowDefinition::Window::Frame(*(yymsp[-2].minor.yy656), yymsp[-1].minor.yy633, nullptr, *(yymsp[0].minor.yy525));
												delete yymsp[-2].minor.yy656;
												delete yymsp[0].minor.yy525;
												objectForTokens = yygotominor.yy428;
											}
        break;
      case 476: /* frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt */
{
												yygotominor.yy428 = new SqliteWindowDefinition::Window::Frame(*(yymsp[-5].minor.yy656), yymsp[-3].minor.yy633, yymsp[-1].minor.yy633, *(yymsp[0].minor.yy525));
												delete yymsp[-5].minor.yy656;
												delete yymsp[0].minor.yy525;
												objectForTokens = yygotominor.yy428;
											}
        break;
      case 477: /* range_or_rows ::= RANGE|ROWS|GROUPS */
{
												yygotominor.yy656 = new SqliteWindowDefinition::Window::Frame::RangeOrRows(
													SqliteWindowDefinition::Window::Frame::toRangeOrRows(yymsp[0].minor.yy0->value)
													);
											}
        break;
      case 478: /* frame_bound_s ::= frame_bound */
      case 480: /* frame_bound_e ::= frame_bound */ yytestcase(yyruleno==480);
{
												yygotominor.yy633 = yymsp[0].minor.yy633;
												objectForTokens = yygotominor.yy633;
											}
        break;
      case 479: /* frame_bound_s ::= UNBOUNDED PRECEDING */
      case 481: /* frame_bound_e ::= UNBOUNDED FOLLOWING */ yytestcase(yyruleno==481);
      case 483: /* frame_bound ::= CURRENT ROW */ yytestcase(yyruleno==483);
{
												yygotominor.yy633 = new SqliteWindowDefinition::Window::Frame::Bound(nullptr, yymsp[-1].minor.yy0->value + " " + yymsp[0].minor.yy0->value);
												objectForTokens = yygotominor.yy633;
											}
        break;
      case 482: /* frame_bound ::= expr PRECEDING|FOLLOWING */
{
												yygotominor.yy633 = new SqliteWindowDefinition::Window::Frame::Bound(yymsp[-1].minor.yy198, yymsp[0].minor.yy0->value);
												objectForTokens = yygotominor.yy633;
											}
        break;
      case 484: /* frame_exclude_opt ::= */
{
												yygotominor.yy525 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::null
													);
											}
        break;
      case 485: /* frame_exclude_opt ::= EXCLUDE frame_exclude */
{
												yygotominor.yy525 = yymsp[0].minor.yy525;
											}
        break;
      case 486: /* frame_exclude ::= NO OTHERS */
{
												yygotominor.yy525 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::NO_OTHERS
													);
											}
        break;
      case 487: /* frame_exclude ::= CURRENT ROW */
{
												yygotominor.yy525 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::CURRENT_ROW
													);
											}
        break;
      case 488: /* frame_exclude ::= GROUP */
{
												yygotominor.yy525 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::GROUP
													);
											}
        break;
      case 489: /* frame_exclude ::= TIES */
{
												yygotominor.yy525 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::TIES
													);
											}
        break;
      case 490: /* window_clause ::= WINDOW windowdefn_list */
{
												yygotominor.yy647 = yymsp[0].minor.yy647;
											}
        break;
      case 491: /* filter_over ::= filter_clause over_clause */
{
												yygotominor.yy393 = new SqliteFilterOver(yymsp[-1].minor.yy275, yymsp[0].minor.yy381);
												objectForTokens = yygotominor.yy393;
											}
        break;
      case 492: /* filter_over ::= over_clause */
{
												yygotominor.yy393 = new SqliteFilterOver(nullptr, yymsp[0].minor.yy381);
												objectForTokens = yygotominor.yy393;
											}
        break;
      case 493: /* filter_over ::= filter_clause */
{
												yygotominor.yy393 = new SqliteFilterOver(yymsp[0].minor.yy275, nullptr);
												objectForTokens = yygotominor.yy393;
											}
        break;
      case 494: /* over_clause ::= OVER LP window RP */
{
												yygotominor.yy381 = new SqliteFilterOver::Over(yymsp[-1].minor.yy52);
												objectForTokens = yygotominor.yy381;
											}
        break;
      case 495: /* over_clause ::= OVER nm */
{
												yygotominor.yy381 = new SqliteFilterOver::Over(*(yymsp[0].minor.yy245));
												delete yymsp[0].minor.yy245;
												objectForTokens = yygotominor.yy381;
											}
        break;
      case 496: /* filter_clause ::= FILTER LP WHERE expr RP */
{
												yygotominor.yy275 = new SqliteFilterOver::Filter(yymsp[-1].minor.yy198);
												objectForTokens = yygotominor.yy275;
                                            }
        break;
      default:
      /* (0) input ::= cmdlist */ yytestcase(yyruleno==0);
        break;
      };
  }
  assert( yyruleno>=0 && yyruleno<(int)(sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0])) );
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;

  // Store tokens for the rule in parser context
  QList<Token*> allTokens;
  QList<Token*> allTokensWithAllInherited;
  QString keyForTokensMap;
  int tokensMapKeyCnt;
  if (parserContext->setupTokens)
  {
      if (objectForTokens)
      {
          // In case this is a list with recurrent references we need
          // to clear tokens before adding the new and extended list.
          objectForTokens->tokens.clear();
      }

      QList<Token*> tokens;
      for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
      {
          tokens.clear();
          const char* fieldName = yyTokenName[yypParser->yystack[i].major];

          // Adding token being subject of this reduction. It's usually not includes in the inherited tokens,
          // although if inheriting from simple statements, like "FAIL" or "ROLLBACK", this tends to be redundant with the inherited tokens.
          // That's why we're checking if it's not contained in the inherited tokens and add it only then.
          if (parserContext->isManagedToken(yypParser->yystack[i].minor.yy0) && !yypParser->yystack[i].tokens->contains(yypParser->yystack[i].minor.yy0))
              tokens += yypParser->yystack[i].minor.yy0;

          tokens += *(yypParser->yystack[i].tokens);

          if (!noTokenInheritanceFields.contains(fieldName))
          {
              if (objectForTokens)
              {
                  keyForTokensMap = fieldName;
                  tokensMapKeyCnt = 2;
                  while (objectForTokens->tokensMap.contains(keyForTokensMap))
                      keyForTokensMap = fieldName + QString::number(tokensMapKeyCnt++);

                  objectForTokens->tokensMap[keyForTokensMap] = parserContext->getTokenPtrList(tokens);
              }

              allTokens += tokens;
          }
          else
          {
              // If field is mentioned only once, then only one occurance of it will be ignored.
              // Second one should be inherited. See "anylist" definition for explanation why.
              noTokenInheritanceFields.removeOne(fieldName);
          }
          allTokensWithAllInherited += tokens;
      }
      if (objectForTokens)
      {
          objectForTokens->tokens += parserContext->getTokenPtrList(allTokens);
      }
  }

  // Clear token lists
  for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
  {
      delete yypParser->yystack[i].tokens;
      yypParser->yystack[i].tokens = nullptr;
  }

  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
      if (parserContext->setupTokens)
          *(yypParser->yystack[yypParser->yyidx].tokens) = allTokens;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
      if (parserContext->setupTokens && yypParser->yyidx >= 0)
      {
          QList<Token*>* tokensPtr = yypParser->yystack[yypParser->yyidx].tokens;
          *tokensPtr = allTokensWithAllInherited + *tokensPtr;
      }
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  sqlite3_parseARG_FETCH;
#define TOKEN (yyminor.yy0)

    UNUSED_PARAMETER(yymajor);
    parserContext->error(TOKEN, QObject::tr("Syntax error"));
    //qDebug() << "near " << TOKEN->toString() << ": syntax error";
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "sqlite3_parseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  sqlite3_parseTOKENTYPE yyminor       /* The value for the token */
  sqlite3_parseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
    yypParser->yystack[0].tokens = new QList<Token*>();
  }
  yyminorunion.yy0 = yyminor;
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif
  sqlite3_parseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s [%s] (lemon type: %s)\n",
            yyTracePrompt,
            yyminor->value.toLatin1().data(),
            yyminor->typeString().toLatin1().data(),
            yyTokenName[yymajor]);  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;

#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}

int sqlite3ParserFallback(int iToken) {
    return yyFallback[iToken];
}
